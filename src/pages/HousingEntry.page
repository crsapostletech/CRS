<apex:page standardController="ServiceRequest__c" extensions="HousingServiceRequestControllerExtension" showHeader="true" sidebar="true" tabStyle="ServiceRequest__c" title="Housing Entry Page">
    <script type="text/javascript" src="{!URLFOR($Resource.jQuery142, 'jQuery1.4.2/js/jquery-1.4.2.min.js')}"></script>
    <apex:stylesheet value="{!URLFOR($Resource.jQuery142, 'jQuery1.4.2/css/ui-lightness/jquery-ui-1.8.custom.css')}" />
    <script type="text/javascript" src="{!URLFOR($Resource.jQuery142, 'jQuery1.4.2/js/jquery-ui-1.8.custom.min.js')}"></script>
    <script src="{!URLFOR($Resource.CharCounter)}" type="text/javascript"></script>
    <script src="{!URLFOR($Resource.BlockUI)}" type="text/javascript"></script>
       
    <link type="text/css" rel="stylesheet" href="{!URLFOR($Resource.HousingEntryCss)}" />  
   
 
    <script type="text/javascript">
        var j = jQuery.noConflict();  
     
        function jq(myid)   
        {     
                return '#' + myid.replace(/(:|\.)/g,'\\\$1');  
        }
    
        var ids = new Object();
            
        //keeps datePicker widget from rendering on page load. 
        function setFocusOnLoad() {}
    
    </script>  
  
  <apex:pageMessage id="adjusterMessage" 
                                    severity="warning" 
                                    strength="1"
                                    rendered="{!claim.Adjuster__c == null}"
                                    summary="An adjuster must be added to the claim before Housing Quote documents can be generated"
                                    />
  <apex:pageMessage id="contactMessage" 
                                    severity="warning" 
                                    strength="1"
                                    rendered="{!claim.Policyholder__c == null}"
                                    summary="A policyholder must be added to the claim before Housing Quote documents can be generated"
                                    /> 
  <div id='srOnHoldMessage' hidden="true">
    <apex:pageMessage severity="warning" strength="1" summary="This Service Request is on hold. You will not be able to select a search until the hold is removed"/> 
 </div>
 
  <apex:pageMessages id="pageMessages"/>    
  
  <apex:messages id="mainMessages"/>


  <apex:sectionHeader title="Enter Housing Information" subtitle="{!ServiceRequest__c.Opportunity__r.name}"></apex:sectionHeader>
  <apex:form id="housingEntryForm">
 
      <apex:pageBlock title="" mode="maindetail" id="mainPageBlock">
        <apex:pageBlockButtons location="top" id="mainPageButtons">
            <apex:actionStatus id="mainPageStatus" >
                    <apex:facet name="stop">
                        <apex:outputPanel >
                            <apex:commandButton value="Add Housing Search" 
                                            onclick="processing();clearHousingSearch();return false;" 
                                            id="btnAddHousingSearch" 
                                            style="display:none"/>
                            <apex:commandButton value="Add Furniture Only Search" 
                                            onclick="processing();clearFurnitureOnlySearch();return false;" 
                                            id="btnAddFurnitureOnlySearch" 
                                            style="display:none"/>
                            <apex:commandButton value="Add Furniture Order" 
                                            onclick="processing();clearFurnitureOrder();return false" 
                                            id="btnAddFurnitureOrder"
                                            style="display:none"/>
                            <apex:commandButton value="Create Quote" 
                                            onclick="clientBuildQuote();return false" 
                                            id="btnCreateQuote"
                                            style="display:none"/>
    <!--                       <apex:commandButton value="Generate Credit Card" 
                                            onclick="clientGenerateCreditCard();return false" 
                                            id="btnGenerateCreditCard"
                                            style="display:none"/>
    -->                                        
                            </apex:outputPanel>                        
                    </apex:facet>
                    <apex:facet name="start">
                        <apex:outputPanel >
                            <apex:image url="{!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')}"></apex:image>
                            <apex:outputText ><b>Processing...</b></apex:outputText>
                        </apex:outputPanel> 
                    </apex:facet>    
           </apex:actionStatus> 
           <apex:CommandLink onclick="window.open('/apex/ActivityTimeLine?claimId={!ServiceRequest__c.Opportunity__c}')" styleClass="btn" style="text-decoration:none;padding:4px;" >Activity Timeline</apex:commandLink> 
       </apex:pageBlockButtons>
       
       <div id="serviceRequest-errors" class="jqError">
           <ul id="serviceRequest-error-list"></ul>
       </div>
     
      <apex:pageBlockSection title="Service Request" columns="2" id="serviceRequestPBS1" collapsible="false">
         <apex:facet name="header"><img src="/img/icon/desk16.png"/><font size="2"> Service Request</font></apex:facet>
          <apex:outputField value="{!ServiceRequest__c.Name}" id="serviceRequestName"/>
          <apex:inputField value="{!ServiceRequest__c.High_Priority__c}" id="serviceRequestHighPriority" onchange="clientSaveServiceRequest()"/>
          <apex:outputField value="{!ServiceRequest__c.Opportunity__c}" id="serviceRequestOpportunity"/>
          <apex:outputField value="{!ServiceRequest__c.Status__c}" id="serviceRequestStatus"/>
          <apex:inputField value="{!ServiceRequest__c.DWO_Reason_Code__c}" id="serviceRequestDWOReasonCode" rendered="{!hasSelectedHousingSearch==false}" onchange="clientSaveServiceRequest()"/>
          <apex:pageBlockSectionItem rendered="{!hasSelectedHousingSearch}"><apex:outputText >&nbsp;</apex:outputText></apex:pageBlockSectionItem> 
          <apex:outputField value="{!ServiceRequest__c.Initial_Call_Date__c}" id="serviceRequestInitialCallDateRO" rendered="{!hasSelectedHousingSearch && !isManagerOrDirector || ServiceRequest.Status__c == 'Lost Opportunity' && !isManagerOrDirector}"/>
          <apex:inputField value="{!ServiceRequest__c.Initial_Call_Date__c}" id="serviceRequestInitialCallDate" rendered="{!hasSelectedHousingSearch==false && ServiceRequest.Status__c != 'Lost Opportunity' || isManagerOrDirector}" onchange="clientSaveServiceRequest()"/>
          <apex:outputField value="{!ServiceRequest__c.DWO_Date__c}" rendered="{!ServiceRequest.Status__c == 'Lost Opportunity'}"/>
          <apex:pageBlockSectionItem rendered="{!ServiceRequest.Status__c != 'Lost Opportunity'}"><apex:outputText >&nbsp;</apex:outputText></apex:pageBlockSectionItem>
          <apex:outputField value="{!ServiceRequest__c.Initial_Contact_Date__c}" id="serviceRequestInitialContactDateRO" rendered="{!hasSelectedHousingSearch && !isManagerOrDirector || ServiceRequest.Status__c == 'Lost Opportunity' && !isManagerOrDirector}"/>
          <apex:inputField value="{!ServiceRequest__c.Initial_Contact_Date__c}" id="serviceRequestInitialContactDate" rendered="{!hasSelectedHousingSearch==false && ServiceRequest.Status__c != 'Lost Opportunity' || isManagerOrDirector}" onchange="clientSaveServiceRequest()"/>
          <apex:outputField value="{!ServiceRequest__c.Adjuster_to_Pay__c}" id="serviceRequestAdjusterToPayRO" rendered="{!hasActiveQuote && Placement.Status__c!='Moved-In' || ServiceRequest.Status__c == 'Lost Opportunity'}"/>
          <apex:inputField value="{!ServiceRequest__c.Adjuster_to_Pay__c}" id="serviceRequestAdjusterToPay" rendered="{!hasActiveQuote==false && Placement.Status__c!='Moved-In' && ServiceRequest.Status__c != 'Lost Opportunity'}" onchange="clientSaveServiceRequest()"/>
          <apex:pageBlockSectionItem rendered="{!Placement.Status__c=='Moved-In'}"><apex:outputText >&nbsp;</apex:outputText></apex:pageBlockSectionItem> 
          <apex:outputField value="{!ServiceRequest__c.First_Property_Presented__c}" id="serviceRequestFirstPropertyPresentedRO" rendered="{!ISBLANK(ServiceRequest__c.First_Property_Presented__c) || isOperationsDirector == false}"/>
          <apex:inputField value="{!ServiceRequest__c.First_Property_Presented__c}" id="firstPropertyPresented" rendered="{!!ISBLANK(ServiceRequest__c.First_Property_Presented__c) && isOperationsDirector}" onclick="setZIndexForDatepicker(this);" onchange="clientSaveServiceRequest()"/>
          <apex:outputField value="{!ServiceRequest__c.Policyholder_to_Pay__c}" id="serviceRequestPolicyholderToPayRO" rendered="{!hasActiveQuote && Placement.Status__c!='Moved-In' || ServiceRequest.Status__c == 'Lost Opportunity'}"/>
          <apex:inputField value="{!ServiceRequest__c.Policyholder_to_Pay__c}" id="serviceRequestPolicyholderToPay" rendered="{!hasActiveQuote==false && Placement.Status__c!='Moved-In' && ServiceRequest.Status__c != 'Lost Opportunity'}" onchange="clientSaveServiceRequest()"/>
          <apex:pageBlockSectionItem rendered="{!Placement.Status__c=='Moved-In'}"><apex:outputText >&nbsp;</apex:outputText></apex:pageBlockSectionItem> 
          <apex:outputField value="{!ServiceRequest__c.Hold__c}" id="serviceRequestHoldRO" rendered="{!ServiceRequest.Status__c == 'Lost Opportunity' || hasSelectedHousingSearch==true}"/>
          <apex:inputField value="{!ServiceRequest__c.Hold__c}" id="serviceRequestHold" rendered="{!ServiceRequest.Status__c != 'Lost Opportunity' && hasSelectedHousingSearch==false}" onchange="clientSaveServiceRequest()"/>
          <apex:pageBlockSectionItem />
          <apex:pageBlockSectionItem />
      </apex:pageBlockSection>
      
      <apex:pageblockSection id="serviceRequestPBS2" columns="1">
          <apex:pageBlockSectionItem >
             <apex:outputText >High Priority Notes</apex:outputText>
             <apex:inputTextArea value="{!ServiceRequest__c.High_Priority_Notes__c}" cols="170" rows="3" id="serviceRequestHighPriorityNotes" styleclass="countable5" style="color:red" onchange="clientSaveServiceRequest()"/>
          </apex:pageBlockSectionItem>
      </apex:pageblockSection>
           
      <apex:pageBlockSection columns="2" id="serviceRequestPBS3" collapsible="false">
          <apex:outputField value="{!ServiceRequest__c.CreatedById}"></apex:outputField>
          <apex:outputField value="{!ServiceRequest__c.CreatedDate}"></apex:outputField>
      </apex:pageBlockSection>  
      
      <apex:actionFunction name="saveServiceRequest"   
                           action="{!saveServiceRequest}"
                           rerender="mainPageButtons,mainMessages,serviceRequestPBS1,serviceRequestPBS2,placementPBS1,placementPBS2,placementPBS3,placementDocumentLinksPBS,housingSearchesPBS1,furnitureOrdersPBS,hdnPageRefresh,hdnSROnHold"
                           oncomplete="stopProcessing();if(j('[id$=hdnPageRefresh]').text() == 'true'){ids.pageRefreshPanel.dialog('open')}else{toggleDisabledFormElements();toggleCommandButtons();togglePageBlockSections();toggleWarningMessages('{!claim.Adjuster__c}','{!claim.Policyholder__c}','{!ServiceRequest.Hold__c}');setupServiceRequestSection();j('.countable3').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800});j('.countable5').jqEasyCounter({'maxChars': 255,'maxCharsWarning': 225})}"/>
           
      </apex:pageblock>
           
      <apex:pageblock mode="maindetail" id="mainDetailPB">
      
      <apex:pageBlockSection id="ClaimDetailPBS" title="" columns="2">
         <apex:facet name="header"><img src="/img/msg_icons/info16.png"/><font size="2"> Claim Details</font></apex:facet>
         <apex:outputField value="{!Claim.Claim__c}" id="claimClaimNumber"/>
         <apex:outputField value="{!Claim.Number_of_Bedrooms__c}" id="claimNumberOfBedrooms"/>
         <apex:outputField value="{!Claim.Number_of_Adults__c}" id="claimNumberOfAdults"/>
         <apex:outputField value="{!Claim.Number_of_Bathrooms__c}" id="claimNumberOfBathrooms"/>
         <apex:outputField value="{!Claim.Number_of_Children__c}" id="claimNumberOfChildren"/>   
         <apex:outputField value="{!Claim.Damaged_Property_Full_Address__c}" />   
         <apex:outputField value="{!Claim.Number_of_Pets__c}"/>
         <apex:outputField value="{!Claim.Home_Insured_For__c}"/>
         <apex:outputField value="{!Claim.Pet_Type_and_Breed__c}"/> 
         <apex:outputField value="{!Claim.Est_Length_of_Stay_Months__c}"/>
         <apex:outputField value="{!Claim.ALE_Limit_Amount__c}"/>  
         <apex:outputField value="{!Claim.Policy_Type__c}"/>
         <apex:outputField value="{!Claim.ALE_Limit_Time__c}"/>
         <apex:outputField value="{!Claim.Monthly_Rental_Amount__c}"/>
         <apex:outputField value="{!Claim.Monthly_ALE_Billing__c}"/> 
         <apex:outputField value="{!Claim.Alerts__c}"/>
      </apex:pageBlockSection>       
      
      
      <apex:pageBlockSection id="housingSearchesPBS" title="Housing Searches"> 
        <apex:facet name="header"><img src="/img/icon/telescope16.png"/><font size="2"> Housing Search</font></apex:facet>
      </apex:pageBlockSection>
      <div id="housingSearches-errors" class="jqError">
        <ul id="housingSearches-error-list"></ul>
      </div>
      <apex:pageblockSection id="housingSearchesPBS1" columns="1" >  
        <apex:outputText rendered="{!housingSearches.size = 0 && ServiceRequest.Status__c!='Lost Opportunity'}">No Housing Searches created yet.&nbsp;&nbsp;Please click on the 'Add Housing Search' button above to add some.</apex:outputText>
        <apex:pageBlockTable value="{!housingSearches}" var="housingSearch" id="housingSearches" rendered="{!housingSearches.size > 0}">
           <apex:column headervalue="Action" >
              <apex:commandLink value="Edit" style="color:blue" rendered="{!hasSelectedHousingSearch==false && ServiceRequest.Status__c!='Lost Opportunity' && housingSearch.Furniture_Option__c != 'Furniture Only'}" onclick="processing();editHousingSearch('{!housingSearch.Id}');return false;"/>
              <apex:commandLink value="Edit" style="color:blue" rendered="{!hasSelectedHousingSearch==false && ServiceRequest.Status__c!='Lost Opportunity' && housingSearch.Furniture_Option__c == 'Furniture Only'}" onclick="processing();editFurnitureOnlySearch('{!housingSearch.Id}');return false;"/>
              <apex:commandLink value="View" style="color:blue" rendered="{!housingSearch.Furniture_Option__c != 'Furniture Only' && (hasSelectedHousingSearch || ServiceRequest.Status__c=='Lost Opportunity')}" onclick="processing();viewHousingSearch('{!housingSearch.Id}');return false;"/>
              <apex:commandLink value="View" style="color:blue" rendered="{!housingSearch.Furniture_Option__c == 'Furniture Only' && (hasSelectedHousingSearch || ServiceRequest.Status__c=='Lost Opportunity')}" onclick="processing();viewFurnitureOnlySearch('{!housingSearch.Id}');return false;"/>
           </apex:column>
           <apex:column >
              <apex:commandLink value="Costs" style="color:blue" rendered="{!housingSearch.Furniture_Option__c != 'Furniture Only'}" onclick="processing();housingSearchCosts('{!housingSearch.Id}');return false;"/> 
           </apex:column>
           <apex:column value="{!housingSearch.Sequence_Number__c}" headerClass="clsCenter" style="width:80px;text-align:center"/>
           <apex:column value="{!housingSearch.Name}"/>
           <apex:column value="{!housingSearch.Property_Type__c}"/> 
           <apex:column value="{!housingSearch.Furniture_Option__c}"/>
           <apex:column value="{!housingSearch.Temporary_Address__c}"/> 
           <apex:column value="{!housingSearch.Presented_Date__c}"/>
           <apex:column value="{!housingSearch.Landlord__c}"/>
           <apex:column value="{!housingSearch.Original_Selected_Date__c}" headerClass="clsCenter" style="width:175px;text-align:center"/>
           <apex:column headerValue="Presented To Adjuster" headerClass="clsCenter" style="width:100px;text-align:center">
           <apex:inputField value="{!housingSearch.Presented_to_Adjuster__c}" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c == false || hasSelectedHousingSearch==false && isManagerOrDirector}" onclick="clientUpdateHousingSearch(this, '{!housingSearch.Id}')"/>  
           <apex:outputField value="{!housingSearch.Presented_to_Adjuster__c}" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c == true && !isManagerOrDirector}"/>
           </apex:column>
           <apex:column headerValue="Selected" headerClass="clsCenter" style="width:100px;text-align:center">
           <apex:inputHidden value="{!housingSearch.Id}"/>
           <apex:inputField value="{!housingSearch.Selected__c}"  
                             styleClass="selectedHouse {!IF(hasCompletedClaim,IF(housingSearch.Has_Rent__c == 1 || housingSearch.Furniture_Option__c == 'Furniture Only',IF(hasActiveQuote || srOnHold || housingSearch.Policyholder_Declined_Property_Reason__c != null,'disabled',''),'disabled'),'disabled')}" 
                             onclick="radioButtonCheckBox(this, 'selectedHouse');clientUpdateSelectedHousingSearch('{!housingSearch.Furniture_Option__c}','{!housingSearch.Landlord_Status__c}','{!housingSearch.Distance_from_Damaged_Property__c}','{!housingSearch.Bedrooms__c}','{!housingSearch.Bathrooms__c}','{!housingSearch.Landlord__c}','{!housingSearch.Initial_Payment_Type__c}','{!housingSearch.Initial_Check_Delivery_Method__c}','{!housingSearch.Recurring_Payment_Type__c}','{!housingSearch.Days_Notice_Required__c}','{!housingSearch.Extension_Increment_Days__c}','{!housingSearch.NTV_Send_Via__c}','{!housingSearch.NTV_Send_To__c}',' {!housingSearch.Foreclosure__c}','{!housingSearch.Policyholder_Accepted_Property_Date__c}','{!housingSearch.Name}','{!housingSearch.Has_Payable_Landlord_Cost__c}','{!undeclinedSearchNames}');return false;"/>
           </apex:column>
        </apex:pageBlockTable>
        </apex:pageBlockSection>
        
        <apex:actionFunction name="viewHousingSearch" 
                                         action="{!editHousingSearch}"
                                         rerender="housingSearchPB"
                                         oncomplete="stopProcessing();jqRequiredField();j('[id$=btnCancelHousingSearch]').hide();j('[id$=btnExitHousingSearch]').show();ids.housingSearchPanel.dialog('open')">
                        <apex:param name="housingSearchId" value="" />
        </apex:actionFunction>
        
        <apex:actionFunction name="viewFurnitureOnlySearch" 
                                         action="{!editHousingSearch}"
                                         rerender="furnitureOnlySearchPB"
                                         oncomplete="stopProcessing();jqRequiredField();j('[id$=btnCancelFurnitureOnlySearch]').hide();j('[id$=btnExitFurnitureOnlySearch]').show();ids.furnitureOnlySearchPanel.dialog('open')">
                        <apex:param name="housingSearchId" value="" />
        </apex:actionFunction>
            
        
        <apex:actionFunction name="editHousingSearch" 
                                         action="{!editHousingSearch}"
                                         rerender="housingSearchPB"
                                         oncomplete="stopProcessing();if(j('[id$=housingSearchLandlordStatus]').val() != 'Active' && j('[id$=housingSearchLandlordStatus]').val() != ''){clientSaveHousingSearch()};jqRequiredField();jqDateField();clientTogglePolicyholderDeclinedPropertyReasonField();clientToggleOver5milesReasonField();clientToggleWhatIsIncludedInTheProratedRentField();clientTogglePetsAllowedPetFeeFields();
                                         clientToggleRentIncreaseToAfterILTField();clientToggleWhatUtilitiesIncludedInRentField();
                                         ;clientToggleCertificateOfOccupancyFeeField();clientToggleAppliancesCRSNeedsToProvideField();toggleRequiredIndicator(j('[id$=housingSearchPolicyholderDeclinedPropertyDate]'),'policyholderDeclinedPropertyReason'); toggleRequiredIndicatorOver5milesReason(j('[id$=housingSearchDistanceFromDamagedProp]'), 'over5milesReason');toggleRequiredIndicator(j('[id$=housingSearchFirstMonthProratedRentAmountDue]'),'WhatIsIncludedInTheProratedRent');toggleRequiredIndicatorCB(j('[id$=housingSearchPetsAllowed]'), 'petInfo');toggleRequiredIndicatorNotOnValue(j('[id$=housingSearchRSD]'),'ResponsiblePartyForRSD',0);toggleRequiredIndicatorNotOnValue(j('[id$=housingSearchPHAbatementAmount]'),'StartDateForPHAbatement',0);toggleRequiredIndicatorCB(j('[id$=housingSearchUtilitiesIncludedInRent]'), 'WhatUtilitiesIncludedInRent');toggleRequiredIndicatorCB(j('[id$=housingSearchRentIncreaseAfterILT]'), 'RentIncreaseToAfterILT');toggleRequiredIndicatorCB(j('[id$=housingSearchAppliancesPresentInRentalProperty]'), 'AppliancesCRSNeedsToProvide');toggleRequiredIndicatorCB(j('[id$=housingSearchCertificateOfOccupancyRequired]'), 'CertificateOfOccupancyFee');j('[id$=btnCancelHousingSearch]').hide();j('[id$=btnExitHousingSearch]').show();clientToggleNTVSendToField();ids.housingSearchPanel.dialog('open');j('.countable2').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800})">
                        <apex:param name="housingSearchId" value="" />
        </apex:actionFunction>


        <apex:actionFunction name="housingSearchCosts" 
                                         action="{!editHousingSearch}"
                                         rerender="costsPB"
                                         oncomplete="stopProcessing();ids.housingSearchCostsPanel.dialog('open')">
                                         <apex:param name="housingSearchId" value="" />
        </apex:actionFunction>

        <apex:actionFunction name="editFurnitureOnlySearch" 
                                         action="{!editHousingSearch}"
                                         rerender="furnitureOnlySearchPB"
                                         oncomplete="stopProcessing();j('#serviceRequest-error-list').empty();jqRequiredField();j('[id$=btnCancelFurnitureOnlySearch]').hide();j('[id$=btnExitFurnitureOnlySearch]').show();ids.furnitureOnlySearchPanel.dialog('open');j('.countable2').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800})">
                        <apex:param name="housingSearchId" value="" />
        </apex:actionFunction>

        <apex:actionFunction name="updateHousingSearch"
                            action="{!updateHousingSearch}"
                            rerender="housingSearchesPBS1"
                            oncomplete="stopProcessing();toggleDisabledFormElements()">
        <apex:param name="housingSearchId" value="" />
        <apex:param name="presentedToAdjuster" value="" />
         
        </apex:actionFunction>
        
        <apex:actionFunction name="updateSelectedHousingSearch"
                             action="{!updateSelectedHousingSearch}"
                             rerender="hdnPageRefresh,hdnHasSelectedHousingSearch,hdnSelectedHousingSearchFurnitureOption,hdnSelectedHousingSearchForeclosureCheck,housingSearchesPBS1,placementPBS1,placementPBS2,placementDocumentLinksPBS,placementHistoryPBS,serviceRequestPBS1,furnitureOrdersPBS,mainMessages,mainPageButtons,pageMessages"
                             oncomplete="stopProcessing();setupPlacementSection();if(j('[id$=hdnPageRefresh]').text() == 'true'){ids.pageRefreshPanel.dialog('open')}else{toggleCommandButtons();togglePageBlockSections();if(j('[id$=hdnHasSelectedHousingSearch]').text() == 'true'){j('.selectedHouse').not(':checked').attr('disabled', 'disabled')};toggleDisabledFormElements();setupServiceRequestSection()}">
                            
                            <apex:param name="housingSearchId" value=""/>
                            <apex:param name="housingSearchFurnitureOption" value=""/>
                            <apex:param name="housingSearchLandlordStatus" value="" />
        </apex:actionFunction> 

        <apex:pageBlockSection id="furnitureOrdersPBS" columns="1">
        <apex:facet name="header"><img src="/img/icon/custom51_100/tvCTR16.png"/><font size="2"> Furniture Orders</font></apex:facet>
        <apex:outputText rendered="{!furnitureOrders.size == 0 && ServiceRequest.Status__c != 'Lost Opportunity'}">No Furniture Orders created yet.&nbsp;&nbsp;Click on the 'Add Furniture Order' button above to add one.</apex:outputText>
        <apex:pageBlockTable value="{!furnitureOrders}" var="furnitureOrder" id="furnitureOrders" rendered="{!furnitureOrders.size > 0}"> 
           <apex:column headervalue="Action" >
              <apex:commandLink value="Edit" style="color:blue" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && ServiceRequest.Status__c!='Lost Opportunity' || furnitureOrder.Status__c != 'Cancelled' && furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In'}" onclick="processing();editFurnitureOrder('{!furnitureOrder.Id}');return false;"/>
              <apex:commandLink value="View" style="color:blue" rendered="{!furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || ServiceRequest.Status__c=='Lost Opportunity' || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}" onclick="processing();editFurnitureOrder('{!furnitureOrder.Id}');return false;"/>
           </apex:column>
           <apex:column value="{!furnitureOrder.Name}"/>
           <apex:column value="{!furnitureOrder.Status__c}"/>
           <apex:column value="{!furnitureOrder.Searches__c}"/>
           <apex:column value="{!furnitureOrder.Requested_Furniture_Delivery_Date__c}"/>
        
        </apex:pageBlockTable>
        </apex:pageBlockSection> 
        
        <apex:actionFunction name="editFurnitureOrder" 
                             action="{!editFurnitureOrder}"
                             rerender="furnitureOrderPBS1,furnitureOrderPBS2,furnitureOrderPBS3,furnitureOrderPBS4,furnitureOrderPBS5,furnitureDetailPBS,appliancesPBS1,appliancesPBS2,appliancesPBS3,housewaresPBS1"
                             oncomplete="stopProcessing();j('#serviceRequest-error-list').empty();j('#furnitureOrder-error-list').empty();jqRequiredField();toggleFurnitureOrderFormElements();clientSetupFurnitureOrderPicklists('{!hasSelectedHousingSearch}');ids.furnitureOrderPanel.dialog('open');j('.countable4').jqEasyCounter({'maxChars': 15000,'maxCharsWarning': 14800})">
           
                             <apex:param name="furnitureOrderId" value="" />
        </apex:actionFunction>  
      
      
      <apex:pageBlockSection id="quotesPBS" columns="1">
        <apex:facet name="header"><img src="/img/icon/mail16.png"/><font size="2"> Quotes</font></apex:facet>
        <apex:outputText rendered="{!quotes.size == 0 && ServiceRequest.Status__c != 'Lost Opportunity'}">No Quotes created yet.&nbsp;&nbsp;Click on the 'Create Quote' button above to create one.</apex:outputText>
        <apex:pageBlockTable value="{!quotes}" var="quote" id="quotes" rendered="{!quotes.size > 0}"> 
           <apex:column headervalue="Action" >
              <apex:commandLink value="Edit" style="color:blue" rendered="{!quote.Status__c == 'Submitted' && quote.Quote_Document_Recieved__c}" onclick="processing();editQuote('{!quote.Id}');return false;"/>
              <apex:commandLink value="View" style="color:blue" rendered="{!quote.Status__c != 'Submitted' || quote.Quote_Document_Recieved__c == false}" onclick="processing();editQuote('{!quote.Id}');return false;"/>
           </apex:column>
           <apex:column value="{!quote.Name}"/>
           <apex:column value="{!quote.Status__c}"/>
           <apex:column value="{!quote.Searches__c}"/>
           <apex:column value="{!quote.Property_Type_New__c}"/>
           <apex:column value="{!quote.Temporary_Address_New__c}"/>
        </apex:pageBlockTable>
        </apex:pageBlockSection>
         
        <apex:actionFunction name="editQuote" 
                             action="{!editQuote}"
                             rerender="quotePBS1,quotePBS2,existingQuoteCostsPBS"
                             oncomplete="stopProcessing();toggleQuoteFormElements();j('#quote-error-list').empty();j('[id$=newQuoteCostsPBS]').hide();ids.quotePanel.dialog('open')">
                              
                              <apex:param name="quoteId" value=""/>
        </apex:actionFunction> 
     
      
        <apex:pageBlockSection id="placementDocumentLinksPBS" columns="1" collapsible="false">   
            <apex:facet name="header"><img src="/img/icon/documents16.png"/><font size="2"> Housing Documents</font></apex:facet>
          <apex:panelGrid columns="7" border="0" width="100%">
        
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Labels,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In'}">Address Labels</apex:outputLink>  
            
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Adjuster_Housing_Agreement,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Searching' || Placement.Status__c == 'Viewing' || Placement.Status__c == 'Pending Confirmation' || Placement.Status__c == 'Quote'}">Adjuster Housing Agreement</apex:outputLink>

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Advanced_Payment_Agreement,ServiceRequest__c.Id)}')">Advanced Payment Agreement</apex:outputLink>
            
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Authorization_to_Omit,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Searching' || Placement.Status__c == 'Viewing' || Placement.Status__c == 'Pending Confirmation' || Placement.Status__c == 'Quote' || Placement.Status__c == 'Moved-In'}">Authorization to Omit</apex:outputLink>    

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Balance_Due_Two_Party_Check,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In' || Placement.Status__c == 'Moved-Out'}">Balance Due - Two Party Check</apex:outputLink>

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Balance_Inquiry_Letter,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In' || Placement.Status__c == 'Moved-Out'}">Balance Inquiry Letter</apex:outputLink>

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Credit_Card_Authorization,ServiceRequest__c.Id)}')">Credit Card Authorization</apex:outputLink> 

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.CRS_Move_In_Packet,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In'}">CRS Move In Packet</apex:outputLink>  

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.CRS_Promissory_Note,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In' || Placement.Status__c == 'Moved-Out'}">CRS Promissary Note</apex:outputLink> 

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Demand_Letter,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In' || Placement.Status__c == 'Moved-Out'}">Demand Letter</apex:outputLink>    

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Early_Move_Out_Confirmation,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In' || Placement.Status__c == 'Moved-Out'}">Early Move Out Confirmation</apex:outputLink>  

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Extension_with_Date,ServiceRequest__c.Id)}')" rendered="{!selectedHousingSearchFurnitureOption != 'Furniture Only' && Placement.Status__c == 'Moved-In'}">Extension Document</apex:outputLink>

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Furniture_Delivery,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In'}">Furniture Delivery</apex:outputLink>  

            <apex:outputLink value="https://www.placetrakforce.com/mulligan/{!instanceName}/documents/HousingAccepted/?placementId={!Placement.Id}&userId={!$User.Id}" rendered="{!selectedHousingSearchFurnitureOption != 'Furniture Only' && (Placement.Status__c == 'Quote' || Placement.Status__c == 'Moved-In')}">Housing Accepted Document</apex:outputLink>

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.MasterCard_w_ID,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Pending Confirmation' || Placement.Status__c == 'Quote' || Placement.Status__c == 'Moved-In'}">MasterCard w/ID</apex:outputLink>

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.M_D_Balance_Due,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In' || Placement.Status__c == 'Moved-Out'}">M_D Balance Due</apex:outputLink>  

            <apex:outputLink value="http://blacklabel:8100/documents/MoveInConfirmation/?placementId={!Placement.Id}&userId={!$User.Id}&quoteId={!ActiveQuote.Id}" rendered="{!instanceName = 'finalforce' && (Placement.Status__c == 'Quote' || Placement.Status__c == 'Moved-In')}">Move In Confirmation</apex:outputLink>

            <apex:outputLink value="http://blacklabel:8085/documents/MoveInConfirmation/?placementId={!Placement.Id}&userId={!$User.Id}&quoteId={!ActiveQuote.Id}" rendered="{!instanceName = 'staging' && (Placement.Status__c == 'Quote' || Placement.Status__c == 'Moved-In')}">Move In Confirmation</apex:outputLink>

            <apex:outputLink value="http://mulligan/documents/MoveInConfirmation/?placementId={!Placement.Id}&userId={!$User.Id}&quoteId={!ActiveQuote.Id}" rendered="{!instanceName = 'production' && (Placement.Status__c == 'Quote' || Placement.Status__c == 'Moved-In')}">Move In Confirmation</apex:outputLink>

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Move_In_Survey_Documents,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In'}">Move In Survey Document</apex:outputLink> 

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Move_Out_Notices_LuxPro,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In'}">Move Out Notices - LuxPro</apex:outputLink>

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Notice_to_Vacate,ServiceRequest__c.Id)}')" rendered="{!selectedHousingSearchFurnitureOption != 'Furniture Only' && Placement.Status__c == 'Moved-In'}">Notice to Vacate</apex:outputLink>  
        
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Permission_to_Enter,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Pending Confirmation' || Placement.Status__c == 'Quote' || Placement.Status__c == 'Moved-In'}">Permission to Enter</apex:outputLink>  
                 
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Policyholder_Move_Out_Letter_CRS_Package,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In'}">Policyholder Move Out Letter - CRS Package</apex:outputLink> 

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Policyholder_Move_Out_Letter_FO,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In'}">Policyholder Move Out Letter - FO</apex:outputLink> 

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Policyholder_Move_Out_Letter_TT_MH,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In'}">Policyholder Move Out Letter - TT/MH</apex:outputLink> 

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Policyholder_Move_Out_Letter_Unfurnished_Corporate,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In'}">Policyholder Move Out Letter - Unfurnished/Corporate</apex:outputLink> 
       
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Relinquish_Letter,ServiceRequest__c.Id)}')" rendered="{!selectedHousingSearchFurnitureOption != 'Furniture Only' && Placement.Status__c == 'Moved-In'}">Relinquish Letter</apex:outputLink> 

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Re_Rent_Request,ServiceRequest__c.Id)}')" rendered="{!selectedHousingSearchFurnitureOption != 'Furniture Only' && Placement.Status__c == 'Moved-In'}">Re-Rent Request</apex:outputLink> 
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Security_Deposit_Documents,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Moved-In' || Placement.Status__c == 'Moved-Out'}">Security Deposit Documents</apex:outputLink> 
  
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Temporary_Housing_Agreement_English,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Searching' || Placement.Status__c == 'Viewing' || Placement.Status__c == 'Pending Confirmation' || Placement.Status__c == 'Quote'}">Temporary Housing Agreement English</apex:outputLink> 
       
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Temporary_Housing_Agreement_Spanish,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Searching' || Placement.Status__c == 'Viewing' || Placement.Status__c == 'Pending Confirmation' || Placement.Status__c == 'Quote'}">Temporary Housing Agreement Spanish</apex:outputLink> 
       
            <apex:outputLink value="https://www.placetrakforce.com/mulligan/{!instanceName}/documents/thc/?searchId={!Placement.Selected_Search__c}" rendered="{!selectedHousingSearchFurnitureOption != 'Furniture Only' && Placement.Status__c == 'Pending Confirmation'}">Temporary Housing Confirmation</apex:outputLink>  
                   
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Work_Order_Request,ServiceRequest__c.Id)}')" rendered="{!selectedHousingSearchFurnitureOption != 'Furniture Only' && Placement.Status__c == 'Moved-In'}">Work Order Request</apex:outputLink> 
         </apex:panelGrid>
        </apex:pageBlockSection>
          
          <apex:pageBlockSection id="placementLinksPBS" columns="1" collapsible="false">
            <apex:facet name="header"><img src="/img/icon/custom51_100/globe16.png"/><font size="2"> Links</font></apex:facet>
            <apex:panelGrid columns="5" border="0" width="100%" columnClasses="linksCols,linksCols,linksCols,linksCols,linkCols">
                <apex:outputLink target="_blank" value="http://www.realtytrac.com">Realty Trak</apex:outputLink>
                <apex:outputLink target="_blank" value="http://www.maps.google.com/?q={!claim.Damaged_Property_Full_Address__c}">Google Map</apex:outputLink>
                <apex:outputLink target="_blank" value="http://www.zillow.com/homes/{!claim.Damaged_Property_Full_Address__c}_rb/">Zillow</apex:outputLink>
                <apex:outputLink target="_blank" value="{!fullFurniturePickupURL}" rendered="{!Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out'}">Change Furniture Pickup Date</apex:outputLink>
            <apex:outputlink target="_blank" value="https://www.placetrakforce.com/mulligan/{!instanceName}/placements/details/{!Placement.Id}">Documents 
            <apex:param name="OrgId" value="{!documentHash}"/>
            </apex:outputlink>
          
            </apex:panelGrid>
          </apex:pageBlockSection>
      </apex:pageblock> 
      <apex:pageblock mode="edit">
         <apex:actionRegion >
            <apex:pageBlockSection id="placementPBS" title="Placement">
               <apex:facet name="header"><img src="/img/icon/custom51_100/keys16.png"/><font size="2"> Placement</font></apex:facet>
            </apex:pageBlockSection>
            <div id="placement-errors" class="jqError">
                <ul id="placement-error-list"></ul>
            </div>
            <div class="columns"> 
            <apex:pageblockSection id="placementPBS1" columns="1" > 
               <apex:outputField value="{!Placement.Name}" id="placementName"/>
               <apex:outputField value="{!Placement.Status__c}" id="placementStatus"/>
               <apex:outputField value="{!Placement.Placement_Team__c}"/>
               <apex:outputField value="{!Placement.serviceRequest__r.Opportunity__r.Account.Name}"/>
               <apex:pageBlockSectionItem >
                  <apex:outputText >Adjuster</apex:outputText>
                  <apex:outputField value="{!Placement.serviceRequest__r.Opportunity__r.Adjuster__c}"/>
               </apex:pageBlockSectionItem>
               <apex:pageBlockSectionItem >
                  <apex:outputText >Policyholder</apex:outputText>
                  <apex:outputField value="{!Placement.serviceRequest__r.Opportunity__r.Policyholder__c}"/>
               </apex:pageBlockSectionItem>
               <apex:inputField value="{!Placement.Return_Deposit_To__c}" id="placementReturnDepositTo" rendered="{!hasSelectedHousingSearch && ServiceRequest.Status__c!='Lost Opportunity' && Placement.Status__c!='Closed' && Placement.Status__c!='Cancelled'}" onkeypress="return noenter(event)" onchange="clientUpdatePlacement()"/>
               <apex:outputField value="{!Placement.Return_Deposit_To__c}" rendered="{!Placement.Status__c=='Lost Opportunity' || Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled'}"/>
               <apex:outputField value="{!Placement.Prorate__c}" id="placementProrate" rendered="{!hasSelectedHousingSearch && selectedHousingSearchFurnitureOption != 'Furniture Only'}"/>
               <apex:inputField value="{!Placement.Prorate_Adjustment__c}" id="placementProrateAdjustment" rendered="{!hasSelectedHousingSearch && hasActiveQuote==false && ServiceRequest.Status__c!='Lost Opportunity' && selectedHousingSearchFurnitureOption != 'Furniture Only' && Placement.Status__c != 'Cancelled'}" onkeypress="return noenter(event)" onchange="clientUpdatePlacement()"/>
               <apex:outputField value="{!Placement.Prorate_Adjustment__c}" id="placementProrateAdjustmentRO" rendered="{!hasSelectedHousingSearch && hasActiveQuote && selectedHousingSearchFurnitureOption != 'Furniture Only' || hasSelectedHousingSearch && ServiceRequest.Status__c=='Lost Opportunity' && selectedHousingSearchFurnitureOption != 'Furniture Only' || Placement.Status__c == 'Cancelled'}"/>
               <apex:outputField value="{!Placement.Prorate_Total__c}" id="placementProrateTotal" rendered="{!hasSelectedHousingSearch && selectedHousingSearchFurnitureOption != 'Furniture Only'}"/>
               <apex:inputField value="{!Placement.Monthly_Follow_Up_Call__c}" rendered="{!Placement.Status__c=='Moved-In'}" onchange="clientUpdatePlacement()"/>
               <apex:outputField value="{!Placement.Monthly_Follow_Up_Call__c}" rendered="{!Placement.Status__c=='Moved-Out' || Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled'}"/>
               <apex:inputField value="{!Placement.Rent_Hold__c}" id="placementRentHold" rendered="{!(Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption != 'Furniture Only' && (isManagerOrDirector || !isManagerOrDirector && !Placement.Rent_Hold__c)}" onchange="if(j('[id$=placementRentHold]:checked').val() != '1'){clientUpdatePlacement()}else{clientToggleReasonFields()}"/>
               <apex:outputField value="{!Placement.Rent_Hold__c}" id="placementRentHoldRO" rendered="{!(Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled') && selectedHousingSearchFurnitureOption != 'Furniture Only' || (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption != 'Furniture Only' && !isManagerOrDirector && Placement.Rent_Hold__c}"/>
             <apex:pageBlockSectionItem datastyleclass="placementRentHoldReasonSI" labelstyleclass="placementRentHoldReasonSI">
               <apex:outputText rendered="{!(Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption != 'Furniture Only'}">Rent Hold Reason</apex:outputText>
               <apex:inputField value="{!Placement.Rent_Hold_Reason__c}" id="placementRentHoldReason" rendered="{!(Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption != 'Furniture Only'}" onchange="clientUpdatePlacement()" styleClass="placementRentHoldReason"/>
             </apex:pageBlockSectionItem>
             <apex:pageBlockSectionItem datastyleclass="placementRentHoldReasonROSI" labelstyleclass="placementRentHoldReasonROSI">
               <apex:outputText rendered="{!(Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption != 'Furniture Only'}">Rent Hold Reason</apex:outputText>
               <apex:outputField value="{!Placement.Rent_Hold_Reason__c}" id="placementRentHoldReasonRO" rendered="{!(Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption != 'Furniture Only'}"/>
             </apex:pageBlockSectionItem>
             <apex:inputField value="{!Placement.Invoice_Hold__c}" id="placementInvoiceHold" rendered="{!(Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption != 'Furniture Only' && (isManagerOrDirector || !isManagerOrDirector && !Placement.Invoice_Hold__c)}" onchange="if(j('[id$=placementInvoiceHold]:checked').val() != '1'){clientUpdatePlacement()}else{clientToggleReasonFields()}"/>
             <apex:outputField value="{!Placement.Invoice_Hold__c}" id="placementInvoiceHoldRO" rendered="{!(Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled') && selectedHousingSearchFurnitureOption != 'Furniture Only' || (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption != 'Furniture Only' && !isManagerOrDirector && Placement.Invoice_Hold__c}"/>
             <apex:pageBlockSectionItem datastyleclass="placementInvoiceHoldReasonSI" labelstyleclass="placementInvoiceHoldReasonSI">
               <apex:outputText rendered="{!(Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption != 'Furniture Only'}">Invoice Hold Reason</apex:outputText>
               <apex:inputField value="{!Placement.Invoice_Hold_Reason__c}" id="placementInvoiceHoldReason" rendered="{!(Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption != 'Furniture Only'}" onchange="clientUpdatePlacement()" styleClass="placementInvoiceHoldReason"/>
             </apex:pageBlockSectionItem>
             <apex:pageBlockSectionItem datastyleclass="placementInvoiceHoldReasonROSI" labelstyleclass="placementInvoiceHoldReasonROSI">
               <apex:outputText rendered="{!(Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption != 'Furniture Only'}">Invoice Hold Reason</apex:outputText>
               <apex:outputField value="{!Placement.Invoice_Hold_Reason__c}" id="placementInvoiceHoldReasonRO" rendered="{!(Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption != 'Furniture Only'}"/>
             </apex:pageBlockSectionItem>
             <apex:inputField value="{!Placement.Selected_Search__r.Days_Notice_Required__c}" id="placementDaysNoticeRequired" rendered="{!Placement.Status__c=='Moved-In' && isManagerOrDirector}" onchange="clientUpdatePlacement()" onkeypress="return noenter(event)" style="width:50px;text-align:right"/>
               <apex:outputField value="{!Placement.Selected_Search__r.Days_Notice_Required__c}" id="placementDaysNoticeRequiredRO" rendered="{!Placement.Status__c=='Moved-In' && !isManagerOrDirector}"/>     
               <apex:inputField value="{!Placement.Selected_Search__r.Extension_Increment_Days__c}" id="placementExtensionIncrementDays" rendered="{!Placement.Status__c=='Moved-In' && isManagerOrDirector}" onchange="clientUpdatePlacement()" onkeypress="return noenter(event)" style="width:50px;text-align:right"/>
               <apex:outputField value="{!Placement.Selected_Search__r.Extension_Increment_Days__c}" id="placementExtensionIncrementDaysRO" rendered="{!Placement.Status__c=='Moved-In' && !isManagerOrDirector}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Searching' || Placement.Status__c=='Viewing' || Placement.Status__c=='Lost Opportunity')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Searching' || Placement.Status__c=='Viewing' || Placement.Status__c=='Lost Opportunity')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Searching' || Placement.Status__c=='Viewing' || Placement.Status__c=='Lost Opportunity')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Searching' || Placement.Status__c=='Viewing' || Placement.Status__c=='Lost Opportunity')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Searching' || Placement.Status__c=='Viewing' || Placement.Status__c=='Lost Opportunity')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Searching' || Placement.Status__c=='Viewing')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && selectedHousingSearchFurnitureOption == 'Furniture Only' && (Placement.Status__c=='Pending Confirmation' || Placement.Status__c=='Quote')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && selectedHousingSearchFurnitureOption == 'Furniture Only' && (Placement.Status__c=='Pending Confirmation' || Placement.Status__c=='Quote')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Pending Confirmation' || Placement.Status__c=='Quote')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Pending Confirmation' || Placement.Status__c=='Quote')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Pending Confirmation' || Placement.Status__c=='Quote')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && selectedHousingSearchFurnitureOption == 'Furniture Only' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out' || Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && selectedHousingSearchFurnitureOption == 'Furniture Only' && (Placement.Status__c=='Moved-Out' || Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && selectedHousingSearchFurnitureOption == 'Furniture Only' && (Placement.Status__c=='Moved-Out' || Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && selectedHousingSearchFurnitureOption == 'Furniture Only' && (Placement.Status__c=='Moved-Out' || Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && selectedHousingSearchFurnitureOption == 'Furniture Only' &&  Placement.Status__c=='Moved-Out'}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && selectedHousingSearchFurnitureOption == 'Furniture Only' &&  Placement.Status__c=='Moved-Out'}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out' || Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out' || Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out' || Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled')}"/>
               <apex:pageBlockSectionItem rendered="{!Placement.Credit_Card_Type__c != '' && (Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled')}"/>
               <apex:pageBlockSectionItem />
            </apex:pageblockSection>
            <apex:pageblockSection id="placementPBS2" columns="1"> 
               <apex:outputField value="{!Placement.Selected_Search__c}"/>
               <apex:inputField value="{!Placement.THA_Signed_Date__c}" id="placementTHASignedDateTime" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && (Placement.Status__c != 'Moved-In' && Placement.Status__c != 'Moved-Out' && Placement.Status__c != 'Closed' && Placement.Status__c != 'Cancelled') || ServiceRequest.Status__c!='Lost Opportunity' && Placement.THA_Signed_Date__c == null && Placement.Status__c == 'Moved-In'}" onkeypress="return noenter(event)" onchange="clientUpdatePlacement()"/>
               <apex:outputField value="{!Placement.THA_Signed_Date__c}" rendered="{!ServiceRequest.Status__c=='Lost Opportunity' || Placement.THA_Signed_Date__c!=null && (Placement.Status__c == 'Moved-In' || Placement.Status__c == 'Moved-Out' || Placement.Status__c == 'Closed' || Placement.Status__c == 'Cancelled')}"/>
               <apex:inputField value="{!Placement.THC_Signed_Date__c}" id="placementTHCSignedDateTime" rendered="{!hasActiveQuote==false && ServiceRequest.Status__c!='Lost Opportunity' && selectedHousingSearchFurnitureOption != 'Furniture Only' && Placement.Status__c != 'Cancelled'}" onkeypress="return noenter(event)" onchange="clientUpdatePlacement()"/>
               <apex:outputField value="{!Placement.THC_Signed_Date__c}" rendered="{!hasActiveQuote && selectedHousingSearchFurnitureOption != 'Furniture Only' || ServiceRequest.Status__c=='Lost Opportunity' && selectedHousingSearchFurnitureOption != 'Furniture Only' || Placement.Status__c == 'Cancelled'}"/>
               <apex:inputField value="{!Placement.Move_In_Date__c}" id="placementMoveInDate" rendered="{!hasSelectedHousingSearch==false && ServiceRequest.Status__c!='Lost Opportunity'}" onkeypress="return noenter(event)" onchange="clientUpdatePlacement()"/>
               <apex:outputField value="{!Placement.Move_In_Date__c}" rendered="{!hasSelectedHousingSearch || ServiceRequest.Status__c=='Lost Opportunity'}"/>
               <apex:outputField value="{!Placement.Original_Approved_Through_Date__c}"/>
               <apex:inputField value="{!Placement.Approved_Through_Date__c}" id="placementApprovedThroughDate" rendered="{!hasSelectedHousingSearch==false && ServiceRequest.Status__c!='Lost Opportunity'}" onkeypress="return noenter(event)" onchange="clientUpdatePlacement()"/>
               <apex:outputField value="{!Placement.Approved_Through_Date__c}" rendered="{!hasSelectedHousingSearch || ServiceRequest.Status__c=='Lost Opportunity'}"/>
               <apex:pageBlockSectionItem >
                   <apex:outputText ></apex:outputText> 
                    <apex:outputlink value="http://blacklabel:8085/placements/extension/{!Placement.Id}" target="_blank" rendered="{!hasSelectedHousingSearch && instanceName = 'staging' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption=='Furniture Only' || hasSelectedHousingSearch && instanceName = 'staging' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption!='Furniture Only' && Placement.Selected_Search__r.Landlord_Status__c=='Active'}">Mulligan Extension 
                        <apex:param name="OrgId" value="{!hash}"/>
                    </apex:outputlink>
               </apex:pageBlockSectionItem>
               <apex:pageBlockSectionItem >
                   <apex:outputText ></apex:outputText> 
                    <apex:outputlink value="http://blacklabel:8100/placements/extension/{!Placement.Id}" target="_blank" rendered="{!hasSelectedHousingSearch && instanceName = 'finalforce' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption=='Furniture Only' || hasSelectedHousingSearch && instanceName = 'finalforce' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption!='Furniture Only' && Placement.Selected_Search__r.Landlord_Status__c=='Active'}">Mulligan Extension 
                        <apex:param name="OrgId" value="{!hash}"/>
                    </apex:outputlink>
               </apex:pageBlockSectionItem>
               <apex:pageBlockSectionItem >
                   <apex:outputText ></apex:outputText> 
                    <apex:outputlink value="http://blacklabel:8090/placements/extension/{!Placement.Id}" target="_blank" rendered="{!hasSelectedHousingSearch && instanceName = 'training' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption=='Furniture Only' || hasSelectedHousingSearch && instanceName = 'training' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption!='Furniture Only' && Placement.Selected_Search__r.Landlord_Status__c=='Active'}">Mulligan Extension 
                        <apex:param name="OrgId" value="{!hash}"/>
                    </apex:outputlink>
               </apex:pageBlockSectionItem>
               <apex:pageBlockSectionItem >
                   <apex:outputText ></apex:outputText> 
                    <apex:outputlink value="http://blacklabel:8105/placements/extension/{!Placement.Id}" target="_blank" rendered="{!hasSelectedHousingSearch && instanceName = 'sandboxtle' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption=='Furniture Only' || hasSelectedHousingSearch && instanceName = 'sandboxtle' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption!='Furniture Only' && Placement.Selected_Search__r.Landlord_Status__c=='Active'}">Mulligan Extension 
                        <apex:param name="OrgId" value="{!hash}"/>
                    </apex:outputlink>
               </apex:pageBlockSectionItem>
               <apex:pageBlockSectionItem >
                   <apex:outputText ></apex:outputText> 
                   <apex:outputlink value="http://mulligan/placements/extension/{!Placement.Id}" target="_blank" rendered="{!hasSelectedHousingSearch && instanceName = 'production' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption=='Furniture Only' || hasSelectedHousingSearch && instanceName = 'production' && (Placement.Status__c=='Moved-In' || Placement.Status__c=='Moved-Out') && selectedHousingSearchFurnitureOption!='Furniture Only' && Placement.Selected_Search__r.Landlord_Status__c=='Active'}">Mulligan Extension 
                        <apex:param name="OrgId" value="{!hash}"/>
                   </apex:outputlink>
               </apex:pageBlockSectionItem> 
               <apex:inputField value="{!Placement.Move_Out_Date__c}" id="placementMoveOutDate" rendered="{!Placement.Status__c=='Moved-In' || (Placement.Status__c=='Moved-Out' && isManagerOrDirector)}" onkeypress="return noenter(event)" onchange="clientUpdatePlacement()"/>
               <apex:outputField value="{!Placement.Move_Out_Date__c}" rendered="{!Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled' || (Placement.Status__c=='Moved-Out' && !isManagerOrDirector)}"/>
               <apex:inputField value="{!Placement.Disposition_Completed__c}" id="placementDispositionCompleted" rendered="{!Placement.Status__c=='Moved-Out' || Placement.Status__c=='Closed'}" onchange="clientUpdatePlacement()"/>
               <apex:outputField value="{!Placement.Disposition_Completed__c}" rendered="{!Placement.Status__c=='Cancelled'}"/>
               <apex:inputField value="{!Placement.AR_Pending__c}" id="placementARPending" rendered="{!Placement.Status__c=='Moved-Out'}" onchange="clientUpdatePlacement()"/>
               <apex:outputField value="{!Placement.AR_Pending__c}" id="placementARPendingRO" rendered="{!Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled'}"/>            
               <apex:inputField value="{!Placement.Failure_to_Vacate__c}" id="placementFailureToVacate" rendered="{!Placement.Status__c=='Moved-Out'}" onchange="clientUpdatePlacement()"/>
               <apex:outputField value="{!Placement.Failure_to_Vacate__c}" id="placementFailureToVacateRO" rendered="{!Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled'}"/>    
               <apex:inputField value="{!Placement.Lease_Required__c}" id="placementLeaseRequired" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && Placement.Lease_Required__c == false && (Placement.Status__c == 'Pending Confirmation' || Placement.Status__c == 'Quote' || Placement.Status__c == 'Moved-In' || Placement.Status__c == 'Moved-Out') || isBillingSpecialist}" onchange="clientUpdatePlacement()"/>
               <apex:outputField value="{!Placement.Lease_Required__c}" id="placementLeaseRequiredRO" rendered="{!!isBillingSpecialist && (ServiceRequest.Status__c == 'Lost Opportunity' || Placement.Lease_Required__c== true || Placement.Status__c == 'Closed' || Placement.Status__c == 'Cancelled')}"/>
               <apex:outputField value="{!Placement.Move_In_Docs_Missing__c}" id="placementMoveInDocsMissingRO" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && Placement.Status__c != 'Searching' && Placement.Status__c != 'Viewing'}"/>
               <apex:outputField value="{!Placement.Credit_Card_Type__c}" id="placementCreditCardType" rendered="{!Placement.Credit_Card_Type__c != ''}"/>
               <apex:outputField value="{!Placement.Credit_Card_Number__c}" rendered="{!Placement.Credit_Card_Type__c != ''}"/>
               <apex:outputField value="{!Placement.Credit_Card_Expiration__c}" rendered="{!Placement.Credit_Card_Type__c != ''}"/>
               <apex:outputField value="{!Placement.Credit_Card_CID__c}" rendered="{!Placement.Credit_Card_Type__c != ''}"/>
               <apex:inputField value="{!Placement.Selected_Search__r.Landlord__c}" id="placementLandlord" rendered="{!Placement.Status__c=='Moved-In' && selectedHousingSearchFurnitureOption != 'Furniture Only' && isManagerOrDirector}" onchange="clientUpdatePlacementLandlord()" onkeypress="return noenter(event)"/>   
               <apex:outputField value="{!Placement.Selected_Search__r.Landlord__c}" id="placementLandlordRO" rendered="{!Placement.Status__c=='Moved-In' && selectedHousingSearchFurnitureOption != 'Furniture Only' && !isManagerOrDirector}"/>   
               <apex:inputField value="{!Placement.Selected_Search__r.Recurring_Payment_Type__c}" id="placementRecurringPaymentType" rendered="{!Placement.Status__c=='Moved-In' && selectedHousingSearchFurnitureOption != 'Furniture Only' && isManagerOrDirector}" onchange="clientUpdatePlacement()"/>  
               <apex:outputField value="{!Placement.Selected_Search__r.Recurring_Payment_Type__c}" id="placementRecurringPaymentTypeRO" rendered="{!Placement.Status__c=='Moved-In' && selectedHousingSearchFurnitureOption != 'Furniture Only' && !isManagerOrDirector}"/> 
               <apex:inputField value="{!Placement.Selected_Search__r.NTV_Send_To__c}" id="placementNTVSendTo" rendered="{!Placement.Status__c=='Moved-In' && selectedHousingSearchFurnitureOption!='Furniture Only'}" onchange="clientUpdatePlacement()" onkeypress="return noenter(event)"/> 
               <apex:outputField value="{!Placement.Selected_Search__r.NTV_Send_To__c}" id="placementNTVSendToRO" rendered="{(!Placement.Status__c=='Moved-Out'|| Placement.Status__c=='Closed' || Placement.Status__c=='Cancelled') && selectedHousingSearchFurnitureOption != 'Furniture Only'}"/>
               <apex:inputField value="{!Placement.Selected_Search__r.NTV_Send_Via__c}" id="placementNTVSendVia" rendered="{!Placement.Status__c=='Moved-In' && selectedHousingSearchFurnitureOption != 'Furniture Only' && isManagerOrDirector}" onchange="clientUpdatePlacement()"/>  
               <apex:outputField value="{!Placement.Selected_Search__r.NTV_Send_Via__c}" id="placementNTVSendViaRO" rendered="{!Placement.Status__c=='Moved-In' && selectedHousingSearchFurnitureOption != 'Furniture Only' && !isManagerOrDirector}"/>  
               <apex:outputField value="{!Placement.Selected_Search__r.Date_To_Send_NTV__c}" id="placementDateToSendNTV" rendered="{!Placement.Status__c=='Moved-In'}"/>

               </apex:pageblockSection>
            </div>
            <apex:pageblockSection id="placementPBS3" columns="1">  
               <apex:pageBlockSectionItem >
                  <apex:outputText >Special Instructions</apex:outputText>
                  <apex:inputTextArea value="{!Placement.Special_Instructions__c}" cols="170" rows="5" id="placementSpecialInstructions" styleclass="countable3" onchange="clientUpdatePlacement()"/>
               </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
         </apex:actionRegion> 
            
         <apex:actionFunction name="updatePlacement"
                              action="{!updatePlacement}"
                              rerender="hdnPageRefresh,hdnIsPlacementCancelled,mainMessages,placementPBS1,placementPBS2,placementPBS3,placementDocumentLinksPBS,placementLinksPBS,placementHistoryPBS,housingSearchesPBS1,pageMessages"
                                        oncomplete="stopProcessing();setupPlacementSection();if(j('[id$=hdnIsPlacementCancelled]').text() == 'true' || j('[id$=hdnPageRefresh]').text() == 'true'){ids.pageRefreshPanel.dialog('open')}else{toggleDisabledFormElements();j('#serviceRequest-error-list').empty();j('.countable3').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800})}">
         </apex:actionFunction>
         
         <apex:actionFunction name="updatePlacementStatus"
                              action="{!updatePlacementStatus}"
                              rerender="mainMessages,placementPBS1,placementPBS2,placementPBS3,placementDocumentLinksPBS,placementLinksPBS,placementHistoryPBS"
                                        oncomplete="stopProcessing();setupPlacementSection();toggleCommandButtons()">
             <apex:param name="placementStatus" value="" />
         </apex:actionFunction>

                                 
         <apex:actionFunction name="refresh">
         </apex:actionFunction>
           
      </apex:pageBlock>
      
      <apex:pageBlock mode="maindetail"> 
      
       <apex:pageBlockSection id="housingExtensionsPBS" title="Housing Extensions" columns="1"> 
        <apex:facet name="header"><img src="/img/icon/custom51_100/stopwatch16.png"/><font size="2"> Housing Extensions</font></apex:facet>
        <apex:outputText rendered="{!housingExtensions.size = 0 && ServiceRequest.Status__c!='Lost Opportunity'}">No Housing Extensions created yet.</apex:outputText>
        <apex:pageBlockTable value="{!housingExtensions}" var="housingExtension" id="housingExtensions" rendered="{!housingExtensions.size > 0}">
           <apex:column value="{!housingExtension.Name}"/>
           <apex:column value="{!housingExtension.Extend_To_Date__c}"/> 
           <apex:column value="{!housingExtension.CreatedDate}"/>
           <apex:column value="{!housingExtension.Extension_Created_By__c}"/> 
        </apex:pageBlockTable>
       </apex:pageBlockSection>
      </apex:pageBlock>
      
      
       <apex:pageBlock mode="maindetail">      
       <apex:pageBlockSection id="placementHistoryPBS" title="Placement History" columns="1" collapsible="true" >
       <script>twistSection(document.getElementById("{!$Component.placementHistoryPBS}").childNodes[0].childNodes[0]);</script>
            <apex:pageBlockTable value="{!History.events}" var="event">
                 <apex:column >
                    <apex:facet name="header">Timestamp</apex:facet>
                    <apex:outputText value="{!event.formatted}" />
                </apex:column> 
                <apex:column width="15%">
                    <apex:facet name="header">Action</apex:facet>
                    <apex:outputText value="{!event.eventType}" />
                </apex:column>
                <apex:column >
                    <apex:facet name="header">Description</apex:facet>
                    <apex:outputLink value="/{!event.detailID}" rendered="{!NOT(ISNULL(event.detailID))}" target="_blank">
                        <apex:outputText value="{!event.description}" />
                    </apex:outputLink>
                    <apex:outputText value="{!event.description}" rendered="{!ISNULL(event.detailID)}" />
                </apex:column>
                <apex:column >
                    <apex:facet name="header">Modified By</apex:facet>
                    <apex:outputText value="{!event.modifiedBy.name}" />
                </apex:column>
            </apex:pageBlockTable>
       </apex:pageBlockSection>
      
       
       <apex:outputPanel id="housingSearchPanel" layout="block" style="display:none;">
         <div id="printHousingSearch">
         <apex:pageBlock mode="edit" id="housingSearchPB">
             <apex:pageBlockButtons location="top">
                <apex:actionStatus id="housingSearchStatus">
                    <apex:facet name="stop">
                        <apex:outputPanel >          
                            <apex:commandButton value="Save Housing Search" 
                                                onclick="clientSaveHousingSearch();return false;"
                                                id="saveHousingSearchButton" rendered="{!hasSelectedHousingSearch==false}"/>
                            <apex:commandButton value="Add Landlord Account" 
                                                onclick="ids.newLandlordAccountPanel.dialog('open');return false" 
                                                id="btnAddLandlordAccount" rendered="{!hasSelectedHousingSearch==false}"/>
                            <apex:commandButton value="Print"  
                                                onclick="printElement(document.getElementById('printHousingSearch'));"
                                                id="btnPrintHousingSearch"/>
                            <apex:commandButton value="Cancel"  
                                                onclick="ids.housingSearchPanel.dialog('close')"
                                                id="btnCancelHousingSearch" rendered="{!hasSelectedHousingSearch==false}"/>                       
                            <apex:commandButton value="Exit"  
                                                onclick="ids.housingSearchPanel.dialog('close')"
                                                id="btnExitHousingSearch"/>                    
                        </apex:outputPanel>            
                    </apex:facet>
                    <apex:facet name="start">
                        <apex:outputPanel >
                            <apex:image url="{!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')}"></apex:image>
                            <apex:outputText ><b>Processing...</b></apex:outputText>
                        </apex:outputPanel> 
                    </apex:facet>
                </apex:actionStatus>                                     
            </apex:pageBlockButtons>
            
            <div id="housing-search-errors" class="jqError">
               <ul id="housing-search-error-list"></ul>
            </div>
            
            <apex:actionRegion >
            <apex:pageBlockSection title="Housing Search" id="housingSearchPBS"/>
            <div class="columns"> 
                <apex:pageblockSection columns="1" id="housingSearchPBS1"> 
                <apex:inputField value="{!housingSearch.Foreclosure__c}" id="housingSearchForecloserCheck" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}"/> 
                <apex:outputField value="{!housingSearch.Foreclosure__c}" id="housingSearchForecloserCheckRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.PH_Viewed__c}" id="housingSearchPHViewed" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.PH_Viewed__c}" id="housingSearchPHViewedRO" rendered="{!hasSelectedHousingSearch}"/>  
                <apex:inputField value="{!housingSearch.Presented_Date__c}" id="housingSearchPresentedDateTime" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Presented_Date__c}" id="housingSearchPresentedDateTimeRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Policyholder_Accepted_Property_Date__c}" id="housingSearchPolicyholderAcceptedPropertyDate" rendered="{!hasSelectedHousingSearch==false}" onchange="clientClearPolicyholderDeclinedPropertyDateField()" styleClass="jqDateField"/>
                <apex:outputField value="{!housingSearch.Policyholder_Accepted_Property_Date__c}" id="housingSearchPolicyholderAcceptedPropertyDateRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Policyholder_Declined_Property_Date__c}" id="housingSearchPolicyholderDeclinedPropertyDate" rendered="{!hasSelectedHousingSearch==false}" onchange="clientTogglePolicyholderDeclinedPropertyReasonField();toggleRequiredIndicator(this, 'policyholderDeclinedPropertyReason')" styleClass="jqDateField"/>
                <apex:outputField value="{!housingSearch.Policyholder_Declined_Property_Date__c}" id="housingSearchPolicyholderDeclinedPropertyDateRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputTextArea value="{!housingSearch.Policyholder_Declined_Property_Reason__c}" id="housingSearchPolicyholderDeclinedPropertyReason" rendered="{!hasSelectedHousingSearch==false}" styleClass="policyholderDeclinedPropertyReason"/>
                <apex:outputField value="{!housingSearch.Policyholder_Declined_Property_Reason__c}" id="housingSearchPolicyholderDeclinedPropertyReasonRO" rendered="{!housingSearch.Policyholder_Declined_Property_Date__c != null && hasSelectedHousingSearch}"/> 
                <apex:inputField value="{!housingSearch.Property_Type__c}" id="housingSearchPropertyType" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Property_Type__c}" id="housingSearchPropertyTypeRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Furniture_Option__c}" id="housingSearchFurnitureOption" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Furniture_Option__c}" id="housingSearchFurnitureOptionRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Name_of_Complex__c}" id="housingSearchNameOfComplex" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Name_of_Complex__c}" id="housingSearchNameOfComplexRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Unit__c}" id="housingSearchUnit" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Unit__c}" id="housingSearchUnitRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Floor__c}" id="housingSearchFloorNumber" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Floor__c}" id="housingSearchFloorNumberRO" rendered="{!hasSelectedHousingSearch}"/> 
                <apex:inputField value="{!housingSearch.Street_Addr1__c}" id="housingSearchStreetAddress1" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Street_Addr1__c}" id="housingSearchStreetAddress1RO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.City__c}" id="housingSearchCity" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.City__c}" id="housingSearchCityRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.State__c}" id="housingSearchState" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.State__c}" id="housingSearchStateRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Zip__c}" id="housingSearchZip" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Zip__c}" id="housingSearchZipRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Country__c}" id="housingSearchCountry" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Country__c}" id="housingSearchCountryRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Square_Feet__c}" id="housingSearchSquareFeet" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Square_Feet__c}" id="housingSearchSquareFeetRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Bedrooms__c}" id="housingSearchBedrooms" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Bedrooms__c}" id="housingSearchBedroomsRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Bathrooms__c}" id="housingSearchBathrooms" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Bathrooms__c}" id="housingSearchBathroomsRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Distance_from_Damaged_Property__c}" id="housingSearchDistanceFromDamagedProp" rendered="{!hasSelectedHousingSearch==false}"
                 onchange="clientToggleOver5milesReasonField();toggleRequiredIndicatorOver5milesReason(this, 'over5milesReason')" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Distance_from_Damaged_Property__c}" id="housingSearchDistanceFromDamagedPropRO" rendered="{!hasSelectedHousingSearch}"/> 
                <apex:inputField value="{!housingSearch.Over_5_Mile_Reason__c}" id="housingSearchOver5milesReason" rendered="{!hasSelectedHousingSearch==false}" styleClass="over5milesReason"/>
                <apex:outputField value="{!housingSearch.Over_5_Mile_Reason__c}" id="housingSearchOver5milesReasonRO" rendered="{!housingSearch.Distance_from_Damaged_Property__c != null && housingSearch.Distance_from_Damaged_Property__c > 5 && hasSelectedHousingSearch}"/> 
                <apex:inputField value="{!housingSearch.Lease_Term_Approved_By_Adjuster__c}" id="housingSearchLeaseTermApproveByAdj" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Lease_Term_Approved_By_Adjuster__c}" id="housingSearchLeaseTermApproveByAdjRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.First_Available_Move_In_Date__c}" id="housingSearchFirstAvailableMoveInDate" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.First_Available_Move_In_Date__c}" id="housingSearchFirstAvailableMoveInDateRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Tentative_Move_Out_Date__c}" id="housingSearchTentativeMoveOutDate" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Tentative_Move_Out_Date__c}" id="housingSearchTentativeMoveOutDateRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Rent__c}" id="housingSearchRent" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Rent__c}" id="housingSearchRentRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Rent_Frequency__c}" id="housingSearchRentFrequency" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Rent_Frequency__c}" id="housingSearchRentFrequencyRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.First_Month_Pro_Rated_Rent_Amount_Due__c}" id="housingSearchFirstMonthProratedRentAmountDue" rendered="{!hasSelectedHousingSearch==false}" onchange="clientToggleWhatIsIncludedInTheProratedRentField();toggleRequiredIndicator(this, 'WhatIsIncludedInTheProratedRent')"/>
                <apex:outputField value="{!housingSearch.First_Month_Pro_Rated_Rent_Amount_Due__c}" id="housingSearchFirstMonthProratedRentAmountDueRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.What_Is_Included_In_The_Prorated_Rent__c}" id="housingSearchWhatIsIncludedInTheProratedRent" rendered="{!hasSelectedHousingSearch==false}" styleClass="WhatIsIncludedInTheProratedRent"/>
                <apex:outputField value="{!housingSearch.What_Is_Included_In_The_Prorated_Rent__c}" id="housingSearchWhatIsIncludedInTheProratedRentRO" rendered="{!housingSearch.First_Month_Pro_Rated_Rent_Amount_Due__c != null && hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.RSD__c}" id="housingSearchRSD" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField" onchange="toggleRequiredIndicatorNotOnValue(this,'ResponsiblePartyForRSD',0)"/>
                <apex:outputField value="{!housingSearch.RSD__c}" id="housingSearchRSDRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Responsible_Party_For_RSD__c}" id="housingSearchResponsiblePartyForRSD" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="ResponsiblePartyForRSD"/>
                <apex:outputField value="{!housingSearch.Responsible_Party_For_RSD__c}" id="housingSearchResponsiblePartyForRSDRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Sure_Deposit__c}" id="housingSearchSureDeposit" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Sure_Deposit__c}" id="housingSearchSureDepositRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Application_Fee__c}" id="housingSearchApplicationFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Application_Fee__c}" id="housingSearchApplicationFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Tax__c}" id="housingSearchTax" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Tax__c}" id="housingSearchTaxRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Other_Non_Refundable_Fee__c}" id="housingSearchOtherNonRefundableFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Other_Non_Refundable_Fee__c}" id="housingSearchOtherNonRefundableFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Cleaning_Fee__c}" id="housingSearchCleaningFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Cleaning_Fee__c}" id="housingSearchCleaningFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Amenity_Fee__c}" id="housingSearchAmenityFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Amenity_Fee__c}" id="housingSearchAmenityFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Administration_Fee__c}" id="housingSearchAdministrationFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Administration_Fee__c}" id="housingSearchAdministrationFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Re_Keying_Fee__c}" id="housingSearchReKeyingFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Re_Keying_Fee__c}" id="housingSearchReKeyingFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Break_Lease_Fee__c}" id="housingSearchBreakLeaseFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Break_Lease_Fee__c}" id="housingSearchBreakLeaseFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Garage_Remote_Fee__c}" id="housingSearchGarageRemoteFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Garage_Remote_Fee__c}" id="housingSearchGarageRemoteFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Fencing_Fee__c}" id="housingSearchFencingFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Fencing_Fee__c}" id="housingSearchFencingFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Pets_Allowed__c}" id="housingSearchPetsAllowed" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" onchange="clientTogglePetsAllowedPetFeeFields();toggleRequiredIndicatorCB(j('[id$=housingSearchPetsAllowed]'), 'petInfo')"/>
                <apex:outputField value="{!housingSearch.Pets_Allowed__c}" id="housingSearchPetsAllowedRO"  rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/> 
                <apex:inputField value="{!housingSearch.Number_Of_Pets_Allowed__c}" id="housingSearchNumberOfPetsAllowed" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="petInfo"/>
                <apex:outputField value="{!housingSearch.Number_Of_Pets_Allowed__c}" id="housingSearchNumberOfPetsAllowedRO" rendered="{!housingSearch.Pets_Allowed__c == true && hasSelectedHousingSearch || housingSearch.Pets_Allowed__c == true &&  housingSearch.Presented_to_Adjuster__c}"/> 
                <apex:inputField value="{!housingSearch.Total_Pet_Fees__c}" id="housingSearchTotalPetFees" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="petInfo"/>
                <apex:outputField value="{!housingSearch.Total_Pet_Fees__c}" id="housingSearchTotalPetFeesRO" rendered="{!housingSearch.Pets_Allowed__c == true && hasSelectedHousingSearch || housingSearch.Pets_Allowed__c == true &&  housingSearch.Presented_to_Adjuster__c}"/> 
                <apex:inputField value="{!housingSearch.Pet_RSD__c}" id="housingSearchPetRSD" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="petInfo"/>
                <apex:outputField value="{!housingSearch.Pet_RSD__c}" id="housingSearchPetRSDRO"  rendered="{!housingSearch.Pets_Allowed__c == true && hasSelectedHousingSearch || housingSearch.Pets_Allowed__c == true &&  housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputHidden value="{!housingSearch.Landlord_Status__c}" id="housingSearchLandlordStatus"/>
            </apex:pageblockSection>
            
            <apex:pageblockSection columns="1" id="housingSearchPBS2">  
                <apex:inputField value="{!housingSearch.Days_Notice_Required__c}" id="housingSearchDaysNoticeRequired" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Days_Notice_Required__c}" id="housingSearchDaysNoticeRequiredRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Extension_Increment_Days__c}" id="housingSearchExtensionIncrementDays" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Extension_Increment_Days__c}" id="housingSearchExtensionIncrementDaysRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Days_Notice_Required_After_ILT__c}" id="housingSearchDaysNoticeRequiredAfterILT" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Days_Notice_Required_After_ILT__c}" id="housingSearchDaysNoticeRequiredAfterILTRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Rent_Increase_After_ILT__c}" id="housingSearchRentIncreaseAfterILT" rendered="{!hasSelectedHousingSearch==false}" 
                onchange="clientToggleRentIncreaseToAfterILTField();toggleRequiredIndicatorCB(j('[id$=housingSearchRentIncreaseAfterILT]'), 'RentIncreaseToAfterILT')"/>
                <apex:outputField value="{!housingSearch.Rent_Increase_After_ILT__c}" id="housingSearchRentIncreaseAfterILTRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Rent_Increase_To_After_ILT__c}" id="housingSearchRentIncreaseToAfterILT" rendered="{!hasSelectedHousingSearch==false}" 
                styleClass="RentIncreaseToAfterILT"/>
                <apex:outputField value="{!housingSearch.Rent_Increase_To_After_ILT__c}" id="housingSearchRentIncreaseToAfterILTRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Renters_Insurance_Required__c}" id="housingSearchRentersInsuranceRequired" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Renters_Insurance_Required__c}" id="housingSearchRentersInsuranceRequiredRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Declaration_Page_Sufficient__c}" id="housingSearchDeclarationPageSufficient" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Declaration_Page_Sufficient__c}" id="housingSearchDeclarationPageSufficientRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.RM_Updated__c}" id="housingSearchRMUpdated" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.RM_Updated__c}" id="housingSearchRMUpdatedRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Rental_Application_Required__c}" id="housingSearchRentalApplicationRequired" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Rental_Application_Required__c}" id="housingSearchRentalApplicationRequiredRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Processing_Time_For_Application__c}" id="housingSearchProcessingTimeForApplication" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Processing_Time_For_Application__c}" id="housingSearchProcessingTimeForApplicationRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Requirements_For_Qualification__c}" id="housingSearchRequirementsForQualification" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Requirements_For_Qualification__c}" id="housingSearchRequirementsForQualificationRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Utilities_Included_In_Rent__c}" id="housingSearchUtilitiesIncludedInRent" rendered="{!hasSelectedHousingSearch==false}" onchange="clientToggleWhatUtilitiesIncludedInRentField();toggleRequiredIndicatorCB(j('[id$=housingSearchUtilitiesIncludedInRent]'), 'WhatUtilitiesIncludedInRent')"/>
                <apex:outputField value="{!housingSearch.Utilities_Included_In_Rent__c}" id="housingSearchUtilitiesIncludedInRentRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.What_Utilities_Are_Included_In_Rent__c}" id="housingSearchWhatUtilitiesIncludedInRent" rendered="{!hasSelectedHousingSearch==false}" styleClass="WhatUtilitiesIncludedInRent"/>
                <apex:outputField value="{!housingSearch.What_Utilities_Are_Included_In_Rent__c}" id="housingSearchWhatUtilitiesIncludedInRentRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.How_Utilities_Are_To_Be_Established__c}" id="housingSearchHowUtilitiesAreToBeEstablished" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.How_Utilities_Are_To_Be_Established__c}" id="housingSearchHowUtilitiesAreToBeEstablishedRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Utilities_PH_Is_Responsible_For__c}" id="housingSearchUtilitiesPHIsResponsibleFor" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Utilities_PH_Is_Responsible_For__c}" id="housingSearchUtilitiesPHIsResponsibleForRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Landscaping_Snow_Removal_HOA_Included__c}" id="housingSearchLandscapingSnowRemovalHOAIncluded" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Landscaping_Snow_Removal_HOA_Included__c}" id="housingSearchLandscapingSnowRemovalHOAIncludedRO" rendered="{!hasSelectedHousingSearch}"/>
                
                <apex:inputField value="{!housingSearch.Appliances_Present_In_Rental_Property__c}" id="housingSearchAppliancesPresentInRentalProperty" rendered="{!hasSelectedHousingSearch==false}" onchange="clientToggleAppliancesCRSNeedsToProvideField();toggleRequiredIndicatorCB(j('[id$=housingSearchAppliancesPresentInRentalProperty]'), 'AppliancesCRSNeedsToProvide')"/>
                <apex:outputField value="{!housingSearch.Appliances_Present_In_Rental_Property__c}" id="housingSearchAppliancesPresentInRentalPropertyRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Appliances_CRS_Needs_To_Provide__c}" id="housingSearchAppliancesCRSNeedsToProvide" rendered="{!hasSelectedHousingSearch==false}" styleClass="AppliancesCRSNeedsToProvide"/>
                <apex:outputField value="{!housingSearch.Appliances_CRS_Needs_To_Provide__c}" id="housingSearchAppliancesCRSNeedsToProvideRO" rendered="{!housingSearch.Appliances_Present_In_Rental_Property__c &&hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Appliance_Hook_Up_Gas_Electric__c}" id="housingSearchApplianceHookUpGasElectric" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Appliance_Hook_Up_Gas_Electric__c}" id="housingSearchApplianceHookUpGasElectricRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Window_Coverings_Present__c}" id="housingSearchWindowCoveringsPresent" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Window_Coverings_Present__c}" id="housingSearchWindowCoveringsPresentRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Pictures_Allowed_On_Walls__c}" id="housingSearchPicturesAllowedOnWalls" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Pictures_Allowed_On_Walls__c}" id="housingSearchPicturesAllowedOnWallsRO" rendered="{!hasSelectedHousingSearch}"/>
                
                <apex:inputField value="{!housingSearch.Fenced_Yard__c}" id="housingSearchFencedYard" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Fenced_Yard__c}" id="housingSearchFencedYardRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Initial_Contact_Name__c}" id="housingSearchInitialContactName" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Initial_Contact_Name__c}" id="housingSearchInitialContactNameRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Initial_Contact_Number__c}" id="housingSearchInitialContactNumber" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Initial_Contact_Number__c}" id="housingSearchInitialContactNumberRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Utility_Set_Up_Fee__c}" id="housingSearchUtilitySetUpFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" 
                styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Utility_Set_Up_Fee__c}" id="housingSearchUtilitySetUpFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Broker_Fee__c}" id="housingSearchBrokerFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Broker_Fee__c}" id="housingSearchBrokerFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Window_Covering_Fee__c}" id="housingSearchWindowCoveringFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Window_Covering_Fee__c}" id="housingSearchWindowCoveringFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Certificate_Of_Occupancy_Required__c}" id="housingSearchCertificateOfOccupancyRequired" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" onchange="clientToggleCertificateOfOccupancyFeeField();toggleRequiredIndicatorCB(j('[id$=housingSearchCertificateOfOccupancyRequired]'), 'CertificateOfOccupancyFee')"/>
                <apex:outputField value="{!housingSearch.Certificate_Of_Occupancy_Required__c}" id="housingSearchCertificateOfOccupancyRequiredRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Certificate_Of_Occupancy_Fee__c}" id="housingSearchCertificateOfOccupancyFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="CertificateOfOccupancyFee"/>
                <apex:outputField value="{!housingSearch.Certificate_Of_Occupancy_Fee__c}" id="housingSearchhousingSearchCertificateOfOccupancyFeeRO" rendered="{!housingSearch.Certificate_Of_Occupancy_Required__c == true && hasSelectedHousingSearch || housingSearch.Certificate_Of_Occupancy_Required__c && housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.Parking_Fee__c}" id="housingSearchParkingFee" rendered="{!hasSelectedHousingSearch==false && housingSearch.Presented_to_Adjuster__c==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Parking_Fee__c}" id="housingSearchParkingFeeRO" rendered="{!hasSelectedHousingSearch || housingSearch.Presented_to_Adjuster__c}"/>
                <apex:inputField value="{!housingSearch.PH_Abatement_Amount__c}" id="housingSearchPHAbatementAmount" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField" onchange="toggleRequiredIndicatorNotOnValue(this,'StartDateForPHAbatement',0)"/>
                <apex:outputField value="{!housingSearch.PH_Abatement_Amount__c}" id="housingSearchPHAbatementAmountRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Start_Date_For_PH_Abatement__c}" id="housingSearchStartDateForPHAbatement" rendered="{!hasSelectedHousingSearch==false}" styleClass="StartDateForPHAbatement"/>
                <apex:outputField value="{!housingSearch.Start_Date_For_PH_Abatement__c}" id="housingSearchStartDateForPHAbatementRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Responsible_Party_For_Vendor_Entry__c}" id="housingSearchResponsiblePartyForVendorEntry" rendered="{!hasSelectedHousingSearch==false}" 
                styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Responsible_Party_For_Vendor_Entry__c}" id="housingSearchResponsiblePartyForVendorEntryRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Phone_Number_To_Confirm_Vendor_Entry__c}" id="housingSearchPhoneNumberToConfirmVendorEntry" rendered="{!hasSelectedHousingSearch==false}" 
                styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Phone_Number_To_Confirm_Vendor_Entry__c}" id="housingSearchPhoneNumberToConfirmVendorEntryRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Landlord__c}" id="housingSearchLandlord" rendered="{!hasSelectedHousingSearch==false}" onchange="clientSetNTVSendToField()"/>
                <apex:outputField value="{!housingSearch.Landlord__c}" id="housingSearchLandlordRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Initial_Payment_Type__c}" id="housingSearchInitialPaymentType" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Initial_Payment_Type__c}" id="housingSearchInitialPaymentTypeRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Initial_Check_Delivery_Method__c}" id="housingSearchInitialCheckDeliveryMethod" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Initial_Check_Delivery_Method__c}" id="housingSearchInitialCheckDeliveryMethodRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Send_Copy_of_Check__c}" id="housingSearchSendCopyOfCheck" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Send_Copy_of_Check__c}" id="housingSearchSendCopyOfCheckRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Send_Copy_of_Tracking_Information__c}" id="housingSearchSendCopyOfTrackingInformation" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Send_Copy_of_Tracking_Information__c}" id="housingSearchSendCopyOfTrackingInformationRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Recurring_Payment_Type__c}" id="housingSearchRecurringPaymentType" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Recurring_Payment_Type__c}" id="housingSearchRecurringPaymentTypeRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.NTV_Send_To__c}" id="housingSearchNTVSendTo" rendered="{!hasSelectedHousingSearch==false}" styleClass="housingSearchNTVSendTo"/>
                <apex:outputField value="{!housingSearch.NTV_Send_To__c}" id="housingSearchNTVSendToRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.NTV_Send_Via__c}" id="housingSearchNTVSendVia" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.NTV_Send_Via__c}" id="housingSearchNTVSendViaRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Elevator_Reservation_Required__c}" id="housingSearchElevatorReservationRequired" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Elevator_Reservation_Required__c}" id="housingSearchElevatorReservationRequiredRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Wood_Floors__c}" id="housingSearchWoodFloors" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Wood_Floors__c}" id="housingSearchWoodFloorsRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:outputField value="{!housingSearch.CreatedDate}" id="housingSearchCreatedDate" rendered="{!housingSearch.Id != null}"/>  
                <apex:inputHidden value="{!housingSearch.Id}" id="housingSearchId"/>
                <apex:inputHidden value="{!housingSearch.Presented_to_Adjuster__c}" id="housingSearchPresentedToAdjuster"/> 
            </apex:pageBlockSection>
            </div>
            <apex:pageblockSection columns="1" id="housingSearchPBS3">      
                <apex:pageBlockSectionItem rendered="{!hasSelectedHousingSearch==false}">
                    <apex:outputText >Property Description</apex:outputText>
                    <apex:inputTextArea value="{!housingSearch.Property_Description__c}" cols="100" rows="3" id="housingSearchPropertyDescription" styleclass="countable2"/>
                </apex:pageBlockSectionItem>
                <apex:outputField value="{!housingSearch.Property_Description__c}" id="housingSearchPropertyDescriptionRO" rendered="{!hasSelectedHousingSearch}"/> 
            </apex:pageBlockSection>
            <apex:pageblockSection columns="1" id="housingSearchPBS4">      
                <apex:pageBlockSectionItem rendered="{!hasSelectedHousingSearch==false}">
                    <apex:outputText >THC Comments</apex:outputText>
                    <apex:inputTextArea value="{!housingSearch.THC_Comments__c}" cols="100" rows="3" id="housingSearchTHCComments" styleclass="countable2"/>
                </apex:pageBlockSectionItem>
                <apex:outputField value="{!housingSearch.THC_Comments__c}" id="housingSearchTHCCommentsRO" rendered="{!hasSelectedHousingSearch}"/>
            </apex:pageBlockSection>
            </apex:actionRegion>
                                                    
            <apex:actionFunction name="saveHousingSearch"
                                 action="{!saveHousingSearch}"
                                 status="housingSearchStatus"
                                 rerender="housingSearchPBS1,housingSearchPBS2,housingSearchPBS3,housingSearchPBS4,serviceRequestPBS1,housingSearchesPBS1,costsPB,placementPBS1"
                                 oncomplete="jqRequiredField();j('[id$=btnCancelHousingSearch]').hide();toggleDisabledFormElements();j('[id$=btnExitHousingSearch]').show();j('#housingSearches-error-list').empty();setupServiceRequestSection();if(j('[id$=housingSearchLandlordStatus]').val() == 'Active' || j('[id$=housingSearchLandlordStatus]').val() == ''){ids.housingSearchPanel.dialog('close')}">
                                            
              <apex:param name="housingSearchId" value="" />
              <apex:param name="housingSearchPropertyType" value="" />
              <apex:param name="housingSearchFurnitureOption" value="" />
              <apex:param name="housingSearchPresentedDateTime" value="" />  
              <apex:param name="housingSearchLandlord" value="" />  
              <apex:param name="housingSearchStreetAddress1" value="" />
              <apex:param name="housingSearchStreetAddress2" value="" />
              <apex:param name="housingSearchCity" value="" />
              <apex:param name="housingSearchState" value="" />
              <apex:param name="housingSearchZip" value="" />
              <apex:param name="housingSearchCountry" value="" />
              <apex:param name="housingSearchDistanceFromDamagedProp" value="" />
              <apex:param name="housingSearchForecloserCheck" value="" />
              <apex:param name="housingSearchPropertyDescription" value="" />
              <apex:param name="housingSearchTHCComments" value="" />
              <apex:param name="housingSearchDaysNoticeRequired" value="" />
              <apex:param name="housingSearchInitialCheckDeliveryMethod" value="" />
              <apex:param name="housingSearchSendCopyOfCheck" value="" />
              <apex:param name="housingSearchSendCopyOfTrackingInformation" value="" />
              <apex:param name="housingSearchInitialPaymentType" value="" />
              <apex:param name="housingSearchBedrooms" value="" />
              <apex:param name="housingSearchNameOfComplex" value="" />
              <apex:param name="housingSearchUnit" value="" />
              <apex:param name="housingSearchInitialContactName" value="" />
              <apex:param name="housingSearchInitialContactNumber" value="" />
              <apex:param name="housingSearchBathrooms" value="" />
              <apex:param name="housingSearchSquareFeet" value="" />
              <apex:param name="housingSearchPetsAllowed" value="" />
              <apex:param name="housingSearchWoodFloors" value="" />
              <apex:param name="housingSearchElevatorReservationRequired" value="" />
              <apex:param name="housingSearchExtensionIncrementDays" value="" />
              <apex:param name="housingSearchRecurringPaymentType" value="" />
              <apex:param name="housingSearchNTVSendVia" value="" />
              <apex:param name="housingSearchNTVSendTo" value="" />
              <apex:param name="housingSearchPolicyholderAcceptedPropertyDate" value="" />
              <apex:param name="housingSearchPolicyholderDeclinedPropertyDate" value="" />
              <apex:param name="housingSearchPolicyholderDeclinedPropertyReason" value="" />
              <apex:param name="housingSearchOver5milesReason" value="" />
              <apex:param name="housingSearchLeaseTermApproveByAdj" value="" />
              <apex:param name="housingSearchFirstAvailableMoveInDate" value="" />
              <apex:param name="housingSearchTentativeMoveOutDate" value="" />
              <apex:param name="housingSearchRentFrequency" value="" />
              <apex:param name="housingSearchFirstMonthProratedRentAmountDue" value="" />
              <apex:param name="housingSearchWhatIsIncludedInTheProratedRent" value="" />
              <apex:param name="housingSearchRSD" value="" />
              <apex:param name="housingSearchResponsiblePartyForRSD" value="" />
              <apex:param name="housingSearchSureDeposit" value="" />
              <apex:param name="housingSearchApplicationFee" value="" />
              <apex:param name="housingSearchTax" value="" />
              <apex:param name="housingSearchCleaningFee" value="" />
              <apex:param name="housingSearchAmenityFee" value="" />
              <apex:param name="housingSearchAdministrationFee" value="" />
              <apex:param name="housingSearchReKeyingFee" value="" />
              <apex:param name="housingSearchBreakLeaseFee" value="" />
              <apex:param name="housingSearchGarageRemoteFee" value="" />
              <apex:param name="housingSearchFencingFee" value="" />
              <apex:param name="housingSearchNumberOfPetsAllowed" value="" />
              <apex:param name="housingSearchTotalPetFees" value="" />
              <apex:param name="housingSearchPetRSD" value="" />
              <apex:param name="housingSearchDaysNoticeRequiredAfterILT" value="" />
              <apex:param name="housingSearchRentIncreaseAfterILT" value="" />
              <apex:param name="housingSearchRentIncreaseToAfterILT" value="" />
              <apex:param name="housingSearchProcessingTimeForApplication" value="" />
              <apex:param name="housingSearchRequirementsForQualification" value="" />
              <apex:param name="housingSearchUtilitiesPHIsResponsibleFor" value="" />
              <apex:param name="housingSearchAppliancesCRSNeedsToProvide" value="" />
              <apex:param name="housingSearchApplianceHookUpGasElectric" value="" />
              <apex:param name="housingSearchUtilitySetUpFee" value="" />
              <apex:param name="housingSearchBrokerFee" value="" />
              <apex:param name="housingSearchWindowCoveringFee" value="" />
              <apex:param name="housingSearchCertificateOfOccupancyFee" value="" />
              <apex:param name="housingSearchParkingFee" value="" />
              <apex:param name="housingSearchOtherNonRefundableFee" value="" />
              <apex:param name="housingSearchPHAbatementAmount" value="" />
              <apex:param name="housingSearchStartDateForPHAbatement" value="" />
              <apex:param name="housingSearchResponsiblePartyForVendorEntry" value="" />
              <apex:param name="housingSearchPhoneNumberToConfirmVendorEntry" value="" />
              <apex:param name="housingSearchPHViewed" value="" />
              <apex:param name="housingSearchRentersInsuranceRequired" value="" />
              <apex:param name="housingSearchDeclarationPageSufficient" value="" />
              <apex:param name="housingSearchRMUpdated" value="" />
              <apex:param name="housingSearchRentalApplicationRequired" value="" />
              <apex:param name="housingSearchUtilitiesIncludedInRent" value="" />
              <apex:param name="housingSearchHowUtilitiesAreToBeEstablished" value="" />
              <apex:param name="housingSearchLandscapingSnowRemovalHOAIncluded" value="" />
              <apex:param name="housingSearchAppliancesPresentInRentalProperty" value="" />
              <apex:param name="housingSearchWindowCoveringsPresent" value="" />
              <apex:param name="housingSearchPicturesAllowedOnWalls" value="" />
              <apex:param name="housingSearchFencedYard" value="" />
              <apex:param name="housingSearchCertificateOfOccupancyRequired" value="" />
              <apex:param name="housingSearchFloorNumber" value="" />
              <apex:param name="housingSearchRent" value="" />
              <apex:param name="housingSearchWhatUtilitiesIncludedInRent" value="" />

           </apex:actionFunction>

            <apex:actionFunction name="clearHousingSearch" 
                             action="{!clearHousingSearch}" 
                             rerender="housingSearchPB,hdnPageRefresh"
                             oncomplete="stopProcessing();if(j('[id$=hdnPageRefresh]').text() == 'true'){ids.pageRefreshPanel.dialog('open')}else{j('#serviceRequest-error-list').empty();jqRequiredField();jqDateField();clientSetupHousingSearch();clientTogglePolicyholderDeclinedPropertyReasonField();clientToggleOver5milesReasonField();clientTogglePetsAllowedPetFeeFields();
                             clientToggleNTVSendToField();ids.housingSearchPanel.dialog('open');j('.countable2').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800})}">
            </apex:actionFunction>
        </apex:pageBlock>
        </div>
        </apex:outputPanel>

        <apex:outputPanel id="housingSearchCostsPanel" style="display:none">
            <apex:pageBlock id="costsPB">
               <apex:outputText ><b>Search Name:</b> {!housingSearch.Name}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Property Type:</b> {!housingSearch.Property_Type__c}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Adjuster:</b> {!housingSearch.Service_Request__r.Opportunity__r.Adjuster__r.Name}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Policyholder:</b> {!housingSearch.Service_Request__r.Opportunity__r.Policyholder__r.Name}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Landlord:</b> {!housingSearch.Landlord__r.Name} </apex:outputText>
               <apex:inputHidden id="housingSearchLandlordForCosts" value="{!housingSearch.Landlord__c}"/>
               <apex:inputHidden id="housingSearchLandlordNameForCosts" value="{!housingSearch.Landlord__r.Name}"/>
               <apex:inputHidden id="housingSearchPolicyholderForCosts" value="{!housingSearch.Service_Request__r.Opportunity__r.Policyholder__c}"/>
               <apex:inputHidden id="housingSearchPolicyholderNameForCosts" value="{!housingSearch.Service_Request__r.Opportunity__r.Policyholder__r.Name}"/>
               <apex:inputHidden id="housingSearchAdjusterForCosts" value="{!housingSearch.Service_Request__r.Opportunity__r.Adjuster__c}"/>
               <apex:inputHidden id="housingSearchAdjusterNameForCosts" value="{!housingSearch.Service_Request__r.Opportunity__r.Adjuster__r.Name}"/>
                
               <apex:pageBlockButtons location="top">
                <apex:actionStatus id="costsStatus">
                 <apex:facet name="stop">
                  <apex:outputPanel >         
                    <apex:commandButton value="Add Cost" 
                                        onclick="clearCost('cost');return false;" 
                                        id="btnAddCost" rendered="{!hasSelectedHousingSearch==false && (housingSearch.Landlord_Status__c=='Active' || housingSearch.Landlord_Status__c=='')}"/>
                    <apex:commandButton value="Add Fee" 
                                        onclick="clearCost('fee');return false;"
                                        id="btnAddFee" rendered="{!hasSelectedHousingSearch==false && (housingSearch.Landlord_Status__c=='Active' || housingSearch.Landlord_Status__c=='')}"/>
                    <apex:commandButton value="Add Deposit" 
                                        onclick="clearCost('deposit');return false;"
                                        id="btnAddDeposit" rendered="{!hasSelectedHousingSearch==false && (housingSearch.Landlord_Status__c=='Active' || housingSearch.Landlord_Status__c=='')}"/>                  
               
                  </apex:outputPanel>                         
                 </apex:facet>
                 <apex:facet name="start">
                  <apex:outputPanel >
                    <apex:image url="{!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')}"></apex:image>
                    <apex:outputText ><b>Processing...</b></apex:outputText>
                  </apex:outputPanel> 
                 </apex:facet>
                </apex:actionStatus> 
               </apex:pageBlockButtons>           
                   
                <apex:pageBlockSection id="costsPBS" title="Costs/Fees/Deposits" columns="1" collapsible="false">
                    <apex:outputText rendered="{!housingSearch.Costs__r.size = 0}">No records to display.&nbsp;&nbsp;&nbsp;Click on the buttons above to create Costs, Fees and Deposits.</apex:outputText>
                    <apex:pageBlockTable value="{!housingSearch.Costs__r}" var="costs" id="costsPBT" rendered="{!housingSearch.Costs__r.size > 0}">
                        <apex:column headervalue="Action" >
                            <apex:commandLink value="View" style="color:blue" rendered="{!hasSelectedHousingSearch || (housingSearch.Landlord_Status__c!='Active' && housingSearch.Landlord_Status__c!='')}" onclick="editCost('{!costs.Id}');return false;"/> 
                            <apex:commandLink value="Edit" style="color:blue" rendered="{!hasSelectedHousingSearch==false && (housingSearch.Landlord_Status__c=='Active' || housingSearch.Landlord_Status__c=='')}" onclick="editCost('{!costs.Id}');return false;"/> 
                            <apex:outputText value=" | " rendered="{!hasSelectedHousingSearch==false}" style="color:grey"/>
                            <apex:commandLink value="Delete" style="color:blue" rendered="{!hasSelectedHousingSearch==false}" onclick="deleteCost('{!costs.Id}');return false;"/>  
                        </apex:column>
                        <apex:column value="{!costs.Name}"/> 
                        <apex:column value="{!costs.RecordTypeID}"/> 
                        <apex:column value="{!costs.Type__c}"/>
                        <apex:column value="{!costs.Type_Description__c}"/>
                        <apex:column value="{!costs.Amount__c}"/>
                        <apex:column value="{!costs.Payable_Party__c}"/>   
                        <apex:column value="{!costs.Billable_Party__c}"/>
                        <apex:column value="{!costs.Prorate_Type__c}"/>  
                     </apex:pageBlockTable>
                </apex:pageBlockSection> 
                            
                          
                <apex:actionFunction name="editCost" 
                                     action="{!editCost}"
                                     status="costsStatus"
                                     rerender="costPB"
                                     oncomplete="j('[id$=btnCancelCost]').hide();j('[id$=btnExitCost]').show();jqRequiredField();jqRequiredFieldLookup();clientToggleTypeDescriptionField();toggleRequiredIndicatorOnValue(j('[id$=costType]'), 'costTypeDescription','Other');toggleLookupRequiredIndicatorOnValue(j('[id$=costType]'),j('[id$=costPayableParty]'),'PH Abatement','Utilities','Policyholder Rent');toggleLookupRequiredIndicatorOnValue(j('[id$=costType]'),j('[id$=costBillableParty]'),'Policyholder Rent');if(j('[id$=costRecordTypeId]').text() == 'Cost'){jqUndoRequiredFieldBySelector('costType')}else{jqRequiredFieldBySelector('costType')};clientToggleCostPageLayout();clientOpenCostPanel('{!housingSearch.Has_Rent__c}','{!housingSearch.Has_Policyholder_Rent__c}','{!housingSearch.Has_Policyholder_Abatement__c}','{!housingSearch.Has_Utilities__c}')">
                    <apex:param name="costId" value="" />
                </apex:actionFunction>
                
                 <apex:actionFunction name="deleteCost" 
                                     action="{!deleteCost}"
                                     status="costsStatus"
                                     rerender="housingSearchesPBS1,costsPBS"
                                     oncomplete="toggleDisabledFormElements();">
                    <apex:param name="costId" value="" />
                </apex:actionFunction>
            </apex:pageBlock>
         </apex:outputPanel>
      
           
      <apex:outputPanel id="furnitureOnlySearchPanel" layout="block" style="display:none">
         <div id="printFOHousingSearch">
         <apex:pageBlock mode="edit" id="furnitureOnlySearchPB">
            <apex:pageBlockButtons location="top">
                <apex:actionStatus id="furnitureOnlySearchStatus">
                    <apex:facet name="stop">
                        <apex:outputPanel >          
                            <apex:commandButton value="Save Furniture Only Search" 
                                                onclick="clientSaveFurnitureOnlySearch();return false;"
                                                id="saveFurnitureOnlySearchButton" rendered="{!hasSelectedHousingSearch==false}"/>
                            <apex:commandButton value="Cancel"  
                                                onclick="ids.furnitureOnlySearchPanel.dialog('close')"
                                                id="btnCancelFurnitureOnlySearch" rendered="{!hasSelectedHousingSearch==false}"/>   
                            <apex:commandButton value="Print"  
                                                onclick="printElement(document.getElementById('printFOHousingSearch'));"
                                                id="btnPrintFOHousingSearch"/>   
                            <apex:commandButton value="Exit"  
                                                onclick="ids.furnitureOnlySearchPanel.dialog('close')"
                                                id="btnExitFurnitureOnlySearch"/>                    
                        </apex:outputPanel>            
                    </apex:facet>
                    <apex:facet name="start">
                        <apex:outputPanel >
                            <apex:image url="{!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')}"></apex:image>
                            <apex:outputText ><b>Processing...</b></apex:outputText>
                        </apex:outputPanel> 
                    </apex:facet>
                </apex:actionStatus>                                     
            </apex:pageBlockButtons>
            
            <div id="furnitureOnly-search-errors" class="jqError">
               <ul id="furnitureOnly-search-error-list"></ul>
            </div>
            
            <apex:actionRegion >
            <apex:pageBlockSection title="Furniture Only Search" id="furnitureOnlySearchPBS"/>
            <div class="columns"> 
                <apex:pageblockSection columns="1" id="furnitureOnlySearchPBS1"> 
                <apex:inputField value="{!housingSearch.Property_Type__c}" id="furnitureOnlyPropertyType" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Property_Type__c}" id="furnitureOnlyPropertyTypeRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:outputField value="{!housingSearch.Furniture_Option__c}" id="furnitureOnlyFurnitureOptionRO"/>
                <apex:inputField value="{!housingSearch.Name_of_Complex__c}" id="furnitureOnlyNameOfComplex" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Name_of_Complex__c}" id="furnitureOnlyNameOfComplexRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Unit__c}" id="furnitureOnlyUnit" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Unit__c}" id="furnitureOnlyUnitRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Street_Addr1__c}" id="furnitureOnlyStreetAddress1" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Street_Addr1__c}" id="furnitureOnlyStreetAddress1RO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Street_Addr2__c}" id="furnitureOnlyStreetAddress2" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Street_Addr2__c}" id="furnitureOnlyStreetAddress2RO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.City__c}" id="furnitureOnlyCity" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.City__c}" id="furnitureOnlyCityRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.State__c}" id="furnitureOnlyState" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.State__c}" id="furnitureOnlyStateRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Zip__c}" id="furnitureOnlyZip" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Zip__c}" id="furnitureOnlyZipRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Country__c}" id="furnitureOnlyCountry" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Country__c}" id="furnitureOnlyCountryRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Square_Feet__c}" id="furnitureOnlySquareFeet" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Square_Feet__c}" id="furnitureOnlySquareFeetRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Distance_from_Damaged_Property__c}" id="furnitureOnlyDistanceFromDamagedProp" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Distance_from_Damaged_Property__c}" id="furnitureOnlyDistanceFromDamagedPropRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Bedrooms__c}" id="furnitureOnlyBedrooms" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Bedrooms__c}" id="furnitureOnlyBedroomsRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Bathrooms__c}" id="furnitureOnlyBathrooms" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Bathrooms__c}" id="furnitureOnlyBathroomsRO" rendered="{!hasSelectedHousingSearch}"/>
            </apex:pageblockSection>
            <apex:pageblockSection columns="1" id="furnitureOnlySearchPBS2">     
                <apex:inputField value="{!housingSearch.Presented_Date__c}" id="furnitureOnlyPresentedDateTime" rendered="{!hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
                <apex:outputField value="{!housingSearch.Presented_Date__c}" id="furnitureOnlyPresentedDateTimeRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Days_Notice_Required__c}" id="furnitureOnlyDaysNoticeRequired" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Days_Notice_Required__c}" id="furnitureOnlyDaysNoticeRequiredRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Extension_Increment_Days__c}" id="furnitureOnlyExtensionIncrementDays" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Extension_Increment_Days__c}" id="furnitureOnlyExtensionIncrementDaysRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:inputField value="{!housingSearch.Elevator_Reservation_Required__c}" id="furnitureOnlyElevatorReservationRequired" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Elevator_Reservation_Required__c}" id="furnitureOnlyElevatorReservationRequiredRO" rendered="{!hasSelectedHousingSearch}"/> 
                <apex:inputField value="{!housingSearch.Wood_Floors__c}" id="furnitureOnlyWoodFloors" rendered="{!hasSelectedHousingSearch==false}"/>
                <apex:outputField value="{!housingSearch.Wood_Floors__c}" id="furnitureOnlyWoodFloorsRO" rendered="{!hasSelectedHousingSearch}"/>
                <apex:outputField value="{!housingSearch.CreatedDate}" id="housingSearchCreatedDate" rendered="{!housingSearch.Id != null}"/>    
                <apex:inputHidden value="{!housingSearch.Id}" id="furnitureOnlyId"/>                      
            </apex:pageBlockSection>
            </div>
            <apex:pageblockSection columns="1" id="furnitureOnlySearchPBS3">      
                <apex:pageBlockSectionItem rendered="{!hasSelectedHousingSearch==false}">
                    <apex:outputText >Property Description</apex:outputText>
                    <apex:inputTextArea value="{!housingSearch.Property_Description__c}" cols="100" rows="3" id="furnitureOnlyPropertyDescription" styleclass="countable2"/>
                </apex:pageBlockSectionItem>
                <apex:outputField value="{!housingSearch.Property_Description__c}" id="furnitureOnlyPropertyDescriptionRO" rendered="{!hasSelectedHousingSearch}"/>
            </apex:pageBlockSection>
            </apex:actionRegion> 
                
            <apex:actionFunction name="saveFurnitureOnlySearch"
                                 action="{!saveFurnitureOnlySearch}"
                                 status="furnitureOnlySearchStatus"
                                 rerender="furnitureOnlySearchPBS1,furnitureOnlySearchPBS2,furnitureOnlySearchPBS3,serviceRequestPBS1,housingSearchesPBS1"
                                 oncomplete="setupServiceRequestSection();ids.furnitureOnlySearchPanel.dialog('close')">
                               
                                            
              <apex:param name="furnitureOnlyId" value="" />
              <apex:param name="furnitureOnlyPropertyType" value="" />
              <apex:param name="furnitureOnlyPresentedDateTime" value="" />  
              <apex:param name="furnitureOnlyStreetAddress1" value="" />
              <apex:param name="furnitureOnlyStreetAddress2" value="" />
              <apex:param name="furnitureOnlyCity" value="" />
              <apex:param name="furnitureOnlyState" value="" />
              <apex:param name="furnitureOnlyZip" value="" />
              <apex:param name="furnitureOnlyCountry" value="" />
              <apex:param name="furnitureOnlyDistanceFromDamagedProp" value="" />
              <apex:param name="furnitureOnlyPropertyDescription" value="" />
              <apex:param name="furnitureOnlyDaysNoticeRequired" value="" />
              <apex:param name="furnitureOnlyBedrooms" value="" />
              <apex:param name="furnitureOnlyNameOfComplex" value="" />
              <apex:param name="furnitureOnlyUnit" value="" />
              <apex:param name="furnitureOnlyBathrooms" value="" />
              <apex:param name="furnitureOnlySquareFeet" value="" />
              <apex:param name="furnitureOnlyWoodFloors" value="" />
              <apex:param name="furnitureOnlyElevatorReservationRequired" value="" />
              <apex:param name="furnitureOnlyExtensionIncrementDays" value="" />
            </apex:actionFunction>
            
            <apex:actionFunction name="clearFurnitureOnlySearch" 
                             action="{!clearFurnitureOnlySearch}" 
                             rerender="furnitureOnlySearchPB,hdnPageRefresh"
                             oncomplete="stopProcessing();if(j('[id$=hdnPageRefresh]').text() == 'true'){ids.pageRefreshPanel.dialog('open')}else{j('#serviceRequest-error-list').empty();jqRequiredField();j('[id$=btnCancelFurnitureOnlySearch]').show();j('[id$=btnExitFurnitureOnlySearch]').hide();ids.furnitureOnlySearchPanel.dialog('open');j('.countable2').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800})}">
            </apex:actionFunction>

        </apex:pageBlock>
        </div>
      </apex:outputPanel>
                  
      <apex:outputPanel id="costPanel" layout="block" style="display:none">
        <apex:pageBlock mode="edit" id="costPB">
          <apex:pageBlockButtons location="top">
              <apex:actionStatus id="costStatus">
                  <apex:facet name="stop">
                      <apex:outputPanel >          
                        <apex:commandButton value=""  
                                            onclick="clientSaveCost();return false;"
                                            id="btnSaveCost" rendered="{!hasSelectedHousingSearch==false && (cost.Searches__r.Landlord_Status__c=='Active' || cost.Searches__r.Landlord_Status__c=='')}"/>
                        <apex:commandButton value="Cancel"  
                                            onclick="ids.costPanel.dialog('close')"
                                            id="btnCancelCost" rendered="{!hasSelectedHousingSearch==false && (cost.Searches__r.Landlord_Status__c=='Active' || cost.Searches__r.Landlord_Status__c=='')}"/>
                        <apex:commandButton value="Exit"  
                                            onclick="ids.costPanel.dialog('close')"
                                            id="btnExitCost"/>                    
                      </apex:outputPanel>                         
                  </apex:facet>
                  <apex:facet name="start">
                      <apex:outputPanel >
                          <apex:image url="{!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')}"></apex:image>
                          <apex:outputText ><b>Processing...</b></apex:outputText>
                      </apex:outputPanel> 
                  </apex:facet>
              </apex:actionStatus>                                     
          </apex:pageBlockButtons>
         
          <div id="cost-errors" class="jqError">
            <ul id="cost-error-list"></ul>
            </div>

          <apex:actionRegion >   
            <apex:pageBlockSection title="{!costRecordTypeName}" id="costPBS" collapsible="false"/> 
            <div class="columns"> 
            <apex:pageblockSection columns="1">  
                <apex:outputField value="{!cost.Searches__c}"/>
              <apex:inputField value="{!cost.Amount__c}" id="costAmount" rendered="{!hasSelectedHousingSearch==false && (cost.Searches__r.Landlord_Status__c=='Active' || cost.Searches__r.Landlord_Status__c=='')}" styleClass="jqRequiredField"/>
              <apex:outputField value="{!cost.Amount__c}" id="costAmountRO" rendered="{!hasSelectedHousingSearch || (cost.Searches__r.Landlord_Status__c!='Active' && cost.Searches__r.Landlord_Status__c!='')}"/>
              <apex:inputField value="{!cost.Billable_Party__c}" id="costBillableParty" rendered="{!hasSelectedHousingSearch==false && (cost.Searches__r.Landlord_Status__c=='Active' || cost.Searches__r.Landlord_Status__c=='')}"/>
              <apex:outputField value="{!cost.Billable_Party__c}" id="costBillablePartyRO" rendered="{!hasSelectedHousingSearch || (cost.Searches__r.Landlord_Status__c!='Active' && cost.Searches__r.Landlord_Status__c!='')}"/>
              <apex:inputField value="{!cost.Type__c}" id="costType" rendered="{!hasSelectedHousingSearch==false && (cost.Searches__r.Landlord_Status__c=='Active' || cost.Searches__r.Landlord_Status__c=='')}" onchange="clientToggleTypeDescriptionField();toggleRequiredIndicatorOnValue(this,'costTypeDescription','Other');toggleLookupRequiredIndicatorOnValue(this,j('[id$=costPayableParty]'),'PH Abatement','Utilities','Policyholder Rent');toggleLookupRequiredIndicatorOnValue(this,j('[id$=costBillableParty]'),'Policyholder Rent');clientToggleCostPageLayout()" styleClass="costType"/>
              <apex:outputField value="{!cost.Type__c}" id="costTypeRO" rendered="{!hasSelectedHousingSearch || (cost.Searches__r.Landlord_Status__c!='Active' && cost.Searches__r.Landlord_Status__c!='')}"/>
              <apex:inputField value="{!cost.Type_Description__c}" id="costTypeDescription" rendered="{!hasSelectedHousingSearch==false && (cost.Searches__r.Landlord_Status__c=='Active' || cost.Searches__r.Landlord_Status__c=='')}" style="width:400px" styleClass="costTypeDescription"/>
              <apex:outputField value="{!cost.Type_Description__c}" id="costTypeDescriptionRO" rendered="{!cost.Type__c=='Other' && (hasSelectedHousingSearch || (cost.Searches__r.Landlord_Status__c!='Active' && cost.Searches__r.Landlord_Status__c!=''))}"/>
             </apex:pageblockSection>
           <apex:pageblockSection columns="1">  
                <apex:outputField value="{!cost.RecordTypeId}" id="costRecordTypeId"/>
              <apex:inputField value="{!cost.Prorate_Type__c}" id="costProrateType" rendered="{!costRecordTypeName == 'Cost' && hasSelectedHousingSearch==false && (cost.Searches__r.Landlord_Status__c=='Active' || cost.Searches__r.Landlord_Status__c=='')}" required="{!costRecordTypeName == 'Cost'}"/>
              <apex:outputField value="{!cost.Prorate_Type__c}" id="costProrateTypeRO" rendered="{!costRecordTypeName == 'Cost' && hasSelectedHousingSearch || (cost.Searches__r.Landlord_Status__c!='Active' && cost.Searches__r.Landlord_Status__c!='')}"/>    
              <apex:pageBlockSectionItem rendered="{!costRecordTypeName!='Cost'}"/>
              <apex:inputField value="{!cost.Payable_Party__c}" id="costPayableParty" rendered="{!hasSelectedHousingSearch==false && (cost.Searches__r.Landlord_Status__c=='Active' || cost.Searches__r.Landlord_Status__c=='')}"/>
              <apex:outputField value="{!cost.Payable_Party__c}" id="costPayablePartyRO" rendered="{!hasSelectedHousingSearch || (cost.Searches__r.Landlord_Status__c!='Active' && cost.Searches__r.Landlord_Status__c!='')}"/>
              <apex:inputHidden value="{!cost.Id}" id="costId"/> 
            </apex:pageBlockSection>
            </div>
            <apex:pageblockSection columns="1">
            <apex:pageBlockSectionItem />
            </apex:pageblockSection>      
          </apex:actionRegion>  
        
         <apex:actionFunction name="saveCost"
                              action="{!saveCost}"
                              status="costStatus"
                              rerender="hdnPageRefresh,housingSearchesPBS1,costPB,costsPBS"
                              oncomplete="if(j('[id$=hdnPageRefresh]').text() == 'true'){ids.pageRefreshPanel.dialog('open')}else{if(j('.errorMsg').is(':visible') == true){j('[id$=btnCancelCost]').show();j('[id$=btnSaveCost]').show();j('[id$=btnExitCost]').hide();jqRequiredField();clientOpenCostPanel('{!housingSearch.Has_Rent__c}','{!housingSearch.Has_Policyholder_Rent__c}','{!housingSearch.Has_Policyholder_Abatement__c}','{!housingSearch.Has_Utilities__c}')}else{ids.costPanel.dialog('close');toggleDisabledFormElements()}}">

            <apex:param name="costAmount" value=""/>
            <apex:param name="costType" value=""/>
            <apex:param name="costTypeDescription" value=""/>
            <apex:param name="costBillableParty" value=""/>
            <apex:param name="costPayableParty" value=""/>
            <apex:param name="costProrateType" value=""/>
         </apex:actionFunction> 
          
         <apex:actionFunction name="clearCost" 
                              action="{!clearCost}"
                              status="costsStatus" 
                              rerender="costPB"
                              oncomplete="j('[id$=btnCancelCost]').show();j('[id$=btnExitCost]').hide();jqRequiredField();jqRequiredFieldLookup();clientToggleTypeDescriptionField();toggleRequiredIndicatorOnValue(j('[id$=costType]'), 'costTypeDescription','Other');jqRequiredFieldBySelector('costType');clientOpenCostPanel('{!housingSearch.Has_Rent__c}','{!housingSearch.Has_Policyholder_Rent__c}','{!housingSearch.Has_Policyholder_Abatement__c}','{!housingSearch.Has_Utilities__c}')">
          
            <apex:param name="costType" value="" /> 
         </apex:actionFunction>
         
          
        </apex:pageBlock>     
      </apex:outputPanel>
     
      <apex:outputPanel id="furnitureOrderPanel" layout="block" style="display:none">
        <apex:pageBlock mode="edit">
          <apex:pageBlockButtons location="both">
              <apex:actionStatus id="furnitureOrderActionStatus">
                  <apex:facet name="stop">
                      <apex:outputPanel >          
                        <apex:commandButton value="Save"  
                                            onclick="clientSaveFurnitureOrder();return false;"
                                            id="btnSaveFurnitureOrder"/> 
                        <apex:commandButton value="Cancel"  
                                            onclick="ids.furnitureOrderPanel.dialog('close')"
                                            id="btnCancelFurnitureOrder"/>  
                        <apex:commandButton value="Exit"  
                                            onclick="ids.furnitureOrderPanel.dialog('close')"
                                            id="btnExitFurnitureOrder"/>                          
                                            
                      </apex:outputPanel>                         
                  </apex:facet> 
                  <apex:facet name="start">
                      <apex:outputPanel >
                          <apex:image url="{!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')}"></apex:image>
                          <apex:outputText ><b>Processing...</b></apex:outputText>
                      </apex:outputPanel> 
                  </apex:facet>
              </apex:actionStatus>                                     
          </apex:pageBlockButtons>
          
          <div id="furnitureOrder-errors" class="jqError">
            <ul id="furnitureOrder-error-list"></ul>
          </div>
          
         <apex:actionRegion >   
         <apex:pageBlockSection title="Furniture Order" columns="2" id="furnitureOrderPBS1" collapsible="false">
            <apex:outputField value="{!furnitureOrder.Name}" id="furnitureOrderName" rendered="{!furnitureOrder.Id != null}"/>
            <apex:pageBlockSectionItem rendered="{!furnitureOrder.Id != null}"/>
            <apex:inputField value="{!furnitureOrder.Status__c}" id="furnitureOrderStatus" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && hasSelectedHousingSearch || furnitureOrder.Status__c != 'Cancelled' && furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In' || furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Id != null && hasSelectedHousingSearch==false}" styleClass="jqRequiredField"/>
            <apex:outputField value="{!furnitureOrder.Status__c}" id="furnitureOrderStatusRO" rendered="{!furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Id == null && hasSelectedHousingSearch==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Include_Pictures__c}" id="furnitureOrderIncludePictures" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}"/>
            <apex:outputField value="{!furnitureOrder.Include_Pictures__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Cost__c}" id="furnitureOrderCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}" onblur="toggleFurnitureOrderFormBillableParty()"/>
            <apex:outputField value="{!furnitureOrder.Cost__c}" id="furnitureOrderCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Billable_Party_Cost__c}" id="furnitureOrderBillablePartyCost" styleClass="furnitureOrderBillablePartyCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}"/>
            <apex:outputField value="{!furnitureOrder.Billable_Party_Cost__c}" id="furnitureOrderBillablePartyCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Furniture_Cost__c}" id="furnitureOrderFurnitureCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}" onblur="toggleFurnitureOrderFormBillableParty()"/>
            <apex:outputField value="{!furnitureOrder.Furniture_Cost__c}" id="furnitureOrderFurnitureCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Billable_Party_Furniture_Cost__c}" id="furnitureOrderBillablePartyFurnitureCost" styleClass="furnitureOrderBillablePartyFurnitureCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}"/>
            <apex:outputField value="{!furnitureOrder.Billable_Party_Furniture_Cost__c}" id="furnitureOrderBillablePartyFurnitureCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Appliance_Cost__c}" id="furnitureOrderApplianceCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}" onblur="toggleFurnitureOrderFormBillableParty()"/>
            <apex:outputField value="{!furnitureOrder.Appliance_Cost__c}" id="furnitureOrderApplianceCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Billable_Party_Appliance_Cost__c}" id="furnitureOrderBillablePartyApplianceCost" styleClass="furnitureOrderBillablePartyApplianceCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}"/>
            <apex:outputField value="{!furnitureOrder.Billable_Party_Appliance_Cost__c}" id="furnitureOrderBillablePartyApplianceCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Electronics_Cost__c}" id="furnitureOrderElectronicsCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}" onblur="toggleFurnitureOrderFormBillableParty()"/>
            <apex:outputField value="{!furnitureOrder.Electronics_Cost__c}" id="furnitureOrderElectronicsCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Billable_Party_Electronics_Cost__c}" id="furnitureOrderBillablePartyElectronicsCost" styleClass="furnitureOrderBillablePartyElectronicsCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}"/>
            <apex:outputField value="{!furnitureOrder.Billable_Party_Electronics_Cost__c}" id="furnitureOrderBillablePartyElectronicsCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Kitchen_Housewares_Cost__c}" id="furnitureOrderKitchenHousewaresCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}" onblur="toggleFurnitureOrderFormBillableParty()"/>
            <apex:outputField value="{!furnitureOrder.Kitchen_Housewares_Cost__c}" id="furnitureOrderKitchenHousewaresCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Billable_Party_Kitchen_Housewares_Cost__c}" id="furnitureOrderBillablePartyKitchenHousewaresCost" styleClass="furnitureOrderBillablePartyKitchenHousewaresCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}"/>
            <apex:outputField value="{!furnitureOrder.Billable_Party_Kitchen_Housewares_Cost__c}" id="furnitureOrderBillablePartyKitchenHousewaresCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.BedBath_Housewares_Cost__c}" id="furnitureOrderBedBathHousewaresCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}" onblur="toggleFurnitureOrderFormBillableParty()"/>
            <apex:outputField value="{!furnitureOrder.BedBath_Housewares_Cost__c}" id="furnitureOrderBedBathHousewaresCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Billable_Party_BedBath_Housewares_Cost__c}" id="furnitureOrderBillablePartyBedBathHousewaresCost" styleClass="furnitureOrderBillablePartyBedBathHousewaresCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}"/>
            <apex:outputField value="{!furnitureOrder.Billable_Party_BedBath_Housewares_Cost__c}" id="furnitureOrderBillablePartyBedBathHousewaresCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Other_Housewares_Cost__c}" id="furnitureOrderOtherHousewaresCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}" onblur="toggleFurnitureOrderFormBillableParty()"/>
            <apex:outputField value="{!furnitureOrder.Other_Housewares_Cost__c}" id="furnitureOrderOtherHousewaresCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Billable_Party_Other_Housewares_Cost__c}" id="furnitureOrderBillablePartyOtherHousewaresCost" styleClass="furnitureOrderBillablePartyOtherHousewaresCost" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}"/>
            <apex:outputField value="{!furnitureOrder.Billable_Party_Other_Housewares_Cost__c}" id="furnitureOrderBillablePartyOtherHousewaresCostRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Deposit__c}" id="furnitureOrderDeposit" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}" styleClass="jqRequiredField"/>
            <apex:outputField value="{!furnitureOrder.Deposit__c}" id="furnitureOrderDepositRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Billable_Party_Deposit__c}" id="furnitureOrderBillablePartyDeposit" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}" styleClass="jqRequiredField"/>
            <apex:outputField value="{!furnitureOrder.Billable_Party_Deposit__c}" id="furnitureOrderBillablePartyDepositRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Setup_Fee__c}" id="furnitureOrderSetupFee" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}" onblur="toggleFurnitureOrderFormBillableParty()"/>
            <apex:outputField value="{!furnitureOrder.Setup_Fee__c}" id="furnitureOrderSetupFeeRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Billable_Party_Setup_Fee__c}" id="furnitureOrderBillablePartySetupFee" styleClass="furnitureOrderBillablePartySetupFee" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}"/>
            <apex:outputField value="{!furnitureOrder.Billable_Party_Setup_Fee__c}" id="furnitureOrderBillablePartySetupFeeRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Pet_Fee__c}" id="furnitureOrderPetFee" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}" onblur="toggleFurnitureOrderFormBillableParty()"/>
            <apex:outputField value="{!furnitureOrder.Pet_Fee__c}" id="furnitureOrderPetFeeRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Billable_Party_Pet_Fee__c}" id="furnitureOrderBillablePartyPetFee" styleClass="furnitureOrderBillablePartyPetFee" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}"/>
            <apex:outputField value="{!furnitureOrder.Billable_Party_Pet_Fee__c}" id="furnitureOrderBillablePartyPetFeeRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Delivery_Fee__c}" id="furnitureOrderDeliveryFee" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}" onblur="toggleFurnitureOrderFormBillableParty()"/>
            <apex:outputField value="{!furnitureOrder.Delivery_Fee__c}" id="furnitureOrderDeliveryFeeRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Billable_Party_Delivery_Fee__c}" id="furnitureOrderBillablePartyDeliveryFee" styleClass="furnitureOrderBillablePartyDeliveryFee" rendered="{!furnitureOrder.Status__c != 'Cancelled' && hasActiveQuote==false && furnitureOrder.Created_After_Move_In__c==false}"/>
            <apex:outputField value="{!furnitureOrder.Billable_Party_Delivery_Fee__c}" id="furnitureOrderBillablePartyDeliveryFeeRO" rendered="{!furnitureOrder.Created_After_Move_In__c==false && (furnitureOrder.Status__c == 'Cancelled' || hasActiveQuote)}"/>
            <apex:inputField value="{!furnitureOrder.Is_partial_order__c}" id="furnitureOrderIsPartial" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="jqRequiredField" onchange="clientToggleFurnitureOrderDependentPicklists();toggleRequiredIndicatorOnValue(this, 'countable4','Yes')"/>
            <apex:outputField value="{!furnitureOrder.Is_partial_order__c}" id="furnitureOrderIsPartialRO" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Requested_Furniture_Delivery_Date__c}" id="furnitureOrderRequestedDeliveryDate" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="jqRequiredField"/>
            <apex:outputField value="{!furnitureOrder.Requested_Furniture_Delivery_Date__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Furniture_Level__c}" id="furnitureOrderLevel" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" onchange="clientToggleFurnitureOrderDependentPicklists()"/>
            <apex:outputField value="{!furnitureOrder.Furniture_Level__c}" rendered="{!furnitureOrder.Status__c != 'Working' && furnitureOrder.Is_partial_order__c == 'No'}"/>
            <apex:inputHidden value="{!furnitureOrder.Id}" id="furnitureOrderId" rendered="{!furnitureOrder.Status__c != 'Cancelled'}"/>            
          </apex:pageBlockSection>
          
           <apex:pageblockSection columns="1" id="furnitureOrderPBS2">      
                <apex:pageBlockSectionItem rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}">
                    <apex:outputText >Furniture Comments</apex:outputText>
                    <apex:inputTextArea value="{!furnitureOrder.Furniture_Comments__c}" styleClass="countable4" cols="100" rows="3" id="furnitureOrderComments"/>
                </apex:pageBlockSectionItem>
                <apex:outputField value="{!furnitureOrder.Furniture_Comments__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote}"/>
           </apex:pageBlockSection>
        
          <apex:pageBlockSection title="Furniture Detail" id="furnitureOrderPBS3" collapsible="false"/>
          <div class="columns"> 
          <apex:pageblockSection columns="1" id="furnitureOrderPBS4">     
            <apex:inputField value="{!furnitureOrder.Master_Bedroom__c}" id="furnitureOrderMasterBedroom" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Master_Bedroom__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Additional_Bedroom_1__c}" id="furnitureOrderAdditionalBedroom1" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Additional_Bedroom_1__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Additional_Bedroom_2__c}" id="furnitureOrderAdditionalBedroom2" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Additional_Bedroom_2__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Additional_Bedroom_3__c}" id="furnitureOrderAdditionalBedroom3" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Additional_Bedroom_3__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Additional_Bedroom_4__c}" id="furnitureOrderAdditionalBedroom4" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Additional_Bedroom_4__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Additional_Bedroom_5__c}" id="furnitureOrderAdditionalBedroom5" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Additional_Bedroom_5__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Additional_Bedroom_6__c}" id="furnitureOrderAdditionalBedroom6" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Additional_Bedroom_6__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Additional_Bedroom_7__c}" id="furnitureOrderAdditionalBedroom7" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Additional_Bedroom_7__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Additional_Bedroom_8__c}" id="furnitureOrderAdditionalBedroom8" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Additional_Bedroom_8__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Additional_Bedroom_9__c}" id="furnitureOrderAdditionalBedroom9" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Additional_Bedroom_9__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Additional_Bedroom_10__c}" id="furnitureOrderAdditionalBedroom10" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Additional_Bedroom_10__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
          </apex:pageblockSection>
          <apex:pageblockSection columns="1" id="furnitureOrderPBS5">
            <apex:inputField value="{!furnitureOrder.Living_Room__c}" id="furnitureOrderLivingRoom" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Living_Room__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Additional_Living_Room__c}" id="furnitureOrderAdditionalLivingRoom" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Additional_Living_Room__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:pageBlockSectionItem />
            <apex:inputField value="{!furnitureOrder.Dining_Room__c}" id="furnitureOrderDiningRoom" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Dining_Room__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Additional_Dining_Room__c}" id="furnitureOrderAdditionalDiningRoom" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureDetail"/>
            <apex:outputField value="{!furnitureOrder.Additional_Dining_Room__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputHidden value="{!furnitureOrder.Ready_For_VSS__c}" id="furnitureOrderReadyForVSS"/>  
            <apex:inputHidden value="{!furnitureOrder.Created_After_Move_In__c}" id="furnitureOrderCreatedAfterMoveIn"/>    
          </apex:pageBlockSection>
          </div>
          <apex:pageBlockSection title="Appliances" id="appliancesPBS1" collapsible="false"/>
          <div class="columns"> 
          <apex:pageblockSection columns="1" id="appliancesPBS2">     
            <apex:inputField value="{!furnitureOrder.Appliances__c}" id="furnitureOrderAppliances" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureAppliances"/>
            <apex:outputField value="{!furnitureOrder.Appliances__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:inputField value="{!furnitureOrder.Refrigerator__c}" id="furnitureOrderRefrigerator" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}"/>
            <apex:outputField value="{!furnitureOrder.Refrigerator__c}" rendered="{!furnitureOrder.Status__c != 'Working' && furnitureOrder.Appliances__c == 'Yes' || 
            hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false && furnitureOrder.Appliances__c == 'Yes' || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In' && furnitureOrder.Appliances__c == 'Yes'}"/>
            <apex:inputField value="{!furnitureOrder.Microwave__c}" id="furnitureOrderMicrowave" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}"/>
            <apex:outputField value="{!furnitureOrder.Microwave__c}" rendered="{!furnitureOrder.Status__c != 'Working' && furnitureOrder.Appliances__c == 'Yes' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false && furnitureOrder.Appliances__c == 'Yes' || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In' && furnitureOrder.Appliances__c == 'Yes'}"/>
            <apex:inputField value="{!furnitureOrder.Range__c}" id="furnitureOrderRange" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}"/>
            <apex:outputField value="{!furnitureOrder.Range__c}" rendered="{!furnitureOrder.Status__c != 'Working' && furnitureOrder.Appliances__c == 'Yes' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false && furnitureOrder.Appliances__c == 'Yes' || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In' && furnitureOrder.Appliances__c == 'Yes'}"/>
            <apex:inputField value="{!furnitureOrder.Range_Type__c}" id="furnitureOrderRangeType" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}"/>
            <apex:outputField value="{!furnitureOrder.Range_Type__c}" rendered="{!furnitureOrder.Status__c != 'Working' && furnitureOrder.Appliances__c == 'Yes' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false && furnitureOrder.Appliances__c == 'Yes' || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In' && furnitureOrder.Appliances__c == 'Yes'}"/>
            <apex:inputField value="{!furnitureOrder.Clothes_Washer__c}" id="furnitureOrderClothesWasher" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}"/>
            <apex:outputField value="{!furnitureOrder.Clothes_Washer__c}" rendered="{!furnitureOrder.Status__c != 'Working' && furnitureOrder.Appliances__c == 'Yes' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false && furnitureOrder.Appliances__c == 'Yes' || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In' && furnitureOrder.Appliances__c == 'Yes'}"/>
          </apex:pageblockSection>
          <apex:pageblockSection columns="1" id="appliancesPBS3"> 
            <apex:pageBlockSectionItem />
            <apex:inputField value="{!furnitureOrder.Clothes_Dryer__c}" id="furnitureOrderClothesDryer" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}"/>
            <apex:outputField value="{!furnitureOrder.Clothes_Dryer__c}" rendered="{!furnitureOrder.Status__c != 'Working' && furnitureOrder.Appliances__c == 'Yes' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false && furnitureOrder.Appliances__c == 'Yes' || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In' && furnitureOrder.Appliances__c == 'Yes'}"/>
            <apex:inputField value="{!furnitureOrder.Dryer_Type__c}" id="furnitureOrderDryerType" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}"/>
            <apex:outputField value="{!furnitureOrder.Dryer_Type__c}" rendered="{!furnitureOrder.Status__c != 'Working' && furnitureOrder.Appliances__c == 'Yes' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false && furnitureOrder.Appliances__c == 'Yes' || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In' && furnitureOrder.Appliances__c == 'Yes'}"/>
          </apex:pageBlockSection>
          </div>          
          <apex:pageBlockSection title="Housewares" id="housewaresPBS1" columns="2" collapsible="false">
            <apex:inputField value="{!furnitureOrder.Housewares__c}" id="furnitureOrderHousewares" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}" styleClass="furnitureHousewares"/>
            <apex:outputField value="{!furnitureOrder.Housewares__c}" rendered="{!furnitureOrder.Status__c != 'Working' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In'}"/>
            <apex:pageBlockSectionItem />
            <apex:inputField value="{!furnitureOrder.Bedrooms_Needing_Housewares__c}" id="furnitureOrderBedroomsNeedingHousewares" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}"/>
            <apex:outputField value="{!furnitureOrder.Bedrooms_Needing_Housewares__c}" rendered="{!furnitureOrder.Status__c != 'Working' && furnitureOrder.Housewares__c == 'Yes' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false && furnitureOrder.Housewares__c == 'Yes' || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In' && furnitureOrder.Housewares__c == 'Yes'}"/>
            <apex:inputField value="{!furnitureOrder.Bathrooms_Needing_Housewares__c}" id="furnitureOrderBathroomsNeedingHousewares" rendered="{!furnitureOrder.Status__c == 'Working' && (hasActiveQuote==false || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c == 'Moved-In')}"/>
            <apex:outputField value="{!furnitureOrder.Bathrooms_Needing_Housewares__c}" rendered="{!furnitureOrder.Status__c != 'Working' && furnitureOrder.Housewares__c == 'Yes' || hasActiveQuote && furnitureOrder.Created_After_Move_In__c == false && furnitureOrder.Housewares__c == 'Yes' || furnitureOrder.Created_After_Move_In__c == true && placement.Status__c != 'Moved-In' && furnitureOrder.Housewares__c == 'Yes'}"/>
          </apex:pageBlockSection>
          </apex:actionRegion>  
        
          <apex:actionFunction name="saveFurnitureOrder"
                               action="{!saveFurnitureOrder}"
                               status="furnitureOrderActionStatus"
                               rerender="hdnHasFurnitureOrder,hdnActiveFurnitureOrderStatus,hdnHasFurnitureOrderCost,furnitureOrdersPBS" 
                               oncomplete="toggleCommandButtons();ids.furnitureOrderPanel.dialog('close')">

            
            <apex:param name="furnitureOrderId" value="" />  
            <apex:param name="furnitureOrderStatus" value="" />  
            <apex:param name="furnitureOrderRequestedDeliveryDate" value="" />
            <apex:param name="furnitureOrderIsPartial" value="" />
            <apex:param name="furnitureOrderComments" value="" /> 
            <apex:param name="furnitureOrderIncludePictures" value="" />
            <apex:param name="furnitureOrderCost" value="" />
            <apex:param name="furnitureOrderBillablePartyCost" value="" />
            
            <apex:param name="furnitureOrderFurnitureCost" value="" />
            <apex:param name="furnitureOrderBillablePartyFurnitureCost" value="" />
            <apex:param name="furnitureOrderApplianceCost" value="" />
            <apex:param name="furnitureOrderBillablePartyApplianceCost" value="" />
            <apex:param name="furnitureOrderElectronicsCost" value="" />
            <apex:param name="furnitureOrderBillablePartyElectronicsCost" value="" />
            <apex:param name="furnitureOrderKitchenHousewaresCost" value="" />
            <apex:param name="furnitureOrderBillablePartyKitchenHousewaresCost" value="" />
            <apex:param name="furnitureOrderBedBathHousewaresCost" value="" />
            <apex:param name="furnitureOrderBillablePartyBedBathHousewaresCost" value="" />
            <apex:param name="furnitureOrderOtherHousewaresCost" value="" />
            <apex:param name="furnitureOrderBillablePartyOtherHousewaresCost" value="" />
          
            <apex:param name="furnitureOrderDeposit" value="" />
            <apex:param name="furnitureOrderBillablePartyDeposit" value="" />
            <apex:param name="furnitureOrderSetupFee" value="" />
            <apex:param name="furnitureOrderBillablePartySetupFee" value="" />
            <apex:param name="furnitureOrderPetFee" value="" />
            <apex:param name="furnitureOrderBillablePartyPetFee" value="" />
            <apex:param name="furnitureOrderDeliveryFee" value="" />
            <apex:param name="furnitureOrderBillablePartyDeliveryFee" value="" />
            <apex:param name="furnitureOrderLevel" value="" />
            <apex:param name="furnitureOrderMasterBedroom" value="" /> 
            <apex:param name="furnitureOrderAdditionalBedroom1" value="" />
            <apex:param name="furnitureOrderAdditionalBedroom2" value="" />
            <apex:param name="furnitureOrderAdditionalBedroom3" value="" />
            <apex:param name="furnitureOrderAdditionalBedroom4" value="" />
            <apex:param name="furnitureOrderAdditionalBedroom5" value="" />
            <apex:param name="furnitureOrderAdditionalBedroom6" value="" />
            <apex:param name="furnitureOrderAdditionalBedroom7" value="" />
            <apex:param name="furnitureOrderAdditionalBedroom8" value="" />
            <apex:param name="furnitureOrderAdditionalBedroom9" value="" />
            <apex:param name="furnitureOrderAdditionalBedroom10" value="" />
            <apex:param name="furnitureOrderLivingRoom" value="" />
            <apex:param name="furnitureOrderAdditionalLivingRoom" value="" />
            <apex:param name="furnitureOrderDiningRoom" value="" />
            <apex:param name="furnitureOrderAdditionalDiningRoom" value="" />
            <apex:param name="furnitureOrderAppliances" value="" />
            <apex:param name="furnitureOrderRefrigerator" value="" />
            <apex:param name="furnitureOrderMicrowave" value="" />
            <apex:param name="furnitureOrderClothesWasher" value="" />
            <apex:param name="furnitureOrderClothesDryer" value="" />
            <apex:param name="furnitureOrderDryerType" value="" />
            <apex:param name="furnitureOrderRange" value="" />
            <apex:param name="furnitureOrderRangeType" value="" />
            <apex:param name="furnitureOrderHousewares" value="" />
            <apex:param name="furnitureOrderBedroomsNeedingHousewares" value="" />
            <apex:param name="furnitureOrderBathroomsNeedingHousewares" value="" />
            
            
          </apex:actionFunction> 
          
          <apex:actionFunction name="clearFurnitureOrder" 
                               action="{!clearFurnitureOrder}" 
                               rerender="furnitureOrderPBS1,furnitureOrderPBS2,furnitureOrderPBS3,furnitureOrderPBS4,furnitureOrderPBS5,appliancesPBS1,appliancesPBS2,appliancesPBS3,housewaresPBS1,hdnPageRefresh"
                               oncomplete="stopProcessing();if(j('[id$=hdnPageRefresh]').text() == 'true'){ids.pageRefreshPanel.dialog('open')}else{j('#serviceRequest-error-list').empty();j('#furnitureOrder-error-list').empty();jqRequiredField();toggleFurnitureOrderFormElements();clientSetupFurnitureOrderPicklists('{!hasSelectedHousingSearch}');j('[id$=furnitureOrderLevel]').attr('disabled', 'disabled');ids.furnitureOrderPanel.dialog('open');j('.countable4').jqEasyCounter({'maxChars': 15000,'maxCharsWarning': 14800})}">
          </apex:actionFunction>
        </apex:pageBlock>
        
      </apex:outputPanel>
         
      <apex:outputPanel id="quotePanel" layout="block" style="display:none">
        <apex:pageBlock mode="edit">
          <apex:pageBlockButtons location="top">
              <apex:actionStatus id="quoteActionStatus">
                  <apex:facet name="stop">
                      <apex:outputPanel >          
                         <apex:commandButton value="Save"  
                                             onclick="clientSaveQuote();return false;"
                                             id="btnSaveQuote"/> 
                         <apex:commandButton value="Cancel"  
                                             onclick="ids.quotePanel.dialog('close')"
                                             id="btnCancelQuote"/>  
                         <apex:commandButton value="Exit"  
                                             onclick="ids.quotePanel.dialog('close')"
                                             id="btnExitQuote"/>                      
                      </apex:outputPanel>                         
                  </apex:facet> 
                  <apex:facet name="start">
                      <apex:outputPanel >
                          <apex:image url="{!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')}"></apex:image>
                          <apex:outputText ><b>Processing...</b></apex:outputText>
                      </apex:outputPanel> 
                  </apex:facet>
              </apex:actionStatus>                                     
          </apex:pageBlockButtons>
          
          <div id="quote-errors" class="jqError">
            <ul id="quote-error-list"></ul>
          </div>
         
        <apex:pageBlockSection title="Quote" id="quotePBS1" columns="2" collapsible="false"> 
          <apex:inputField value="{!quote.Status__c}" id="quoteStatus" rendered="{!quote.Id != null && quote.Status__c == 'Submitted' && quote.Quote_Document_Recieved__c}"/>
            <apex:outputField value="{!quote.Status__c}" id="quoteStatusRO" rendered="{!quote.Id != null && quote.Status__c != 'Submitted' || quote.Id != null && quote.Quote_Document_Recieved__c == false}"/>
            <apex:outputField value="{!quote.Name}" id="quoteName" rendered="{!quote.Id != null}"/>
              <apex:outputField value="{!quote.Move_In_Date__c}" id="quoteMoveInDate"/>
              <apex:outputField value="{!quote.Approved_Through_Date__c}" id="quoteApprovedThroughDate"/>
              <apex:outputField value="{!quote.Temporary_Address_New__c}" id="quoteTemporaryAddress"/> 
              <apex:outputField value="{!quote.Markup__c}" id="quoteMarkup"/>
              <apex:outputField value="{!quote.Property_Type_New__c}" id="quotePropertyType"/>
              <apex:outputField value="{!quote.Markup_Adjustment__c}" id="quoteMarkupAdjustmentRO" rendered="{!quote.Id != null}"/>  
            <apex:inputField value="{!quote.Markup_Adjustment__c}" id="quoteMarkupAdjustment" rendered="{!quote.Id == null}" onblur="clientUpdateQuote();clientToggleMarkupFields();toggleRequiredIndicator(this, 'quoteMarkupAdjustmentReason');toggleRequiredIndicator(this, 'quoteMarkupAuthorizedBy')"/> 
            <apex:outputField value="{!quote.Furniture_Option__c}" id="quoteFunitureOption"/>
            <apex:outputField value="{!quote.Markup_Adjustment_Reason__c}" id="quoteMarkupAdjustmentReasonRO" rendered="{!quote.Id != null}"/>
              <apex:inputField value="{!quote.Markup_Adjustment_Reason__c}" id="quoteMarkupAdjustmentReason" styleClass="quoteMarkupAdjustmentReason" rendered="{!quote.Id == null}"/>
              <apex:outputField value="{!quote.Days_Notice_Required_New__c}" id="quoteDaysNoticeRequired"/>
              <apex:outputField value="{!quote.Markup_Authorized_By__c}" id="quoteMarkupAuthorizedByRO" rendered="{!quote.Id != null}"/>    
              <apex:inputField value="{!quote.Markup_Authorized_By__c}" id="quoteMarkupAuthorizedBy" styleClass="quoteMarkupAuthorizedBy" rendered="{!quote.Id == null}"/> 
              <apex:outputField value="{!quote.Prorate_Total__c}" id="quoteProrateTotal" rendered="{!quote.Furniture_Option__c != 'Furniture Only'}"/>
              <apex:pageBlockSectionItem rendered="{!quote.Furniture_Option__c == 'Furniture Only'}"/>
              <apex:outputField value="{!quote.Markup_Total__c}" id="quoteMarkupTotal"/>
          <apex:outputField value="{!quote.Claim_Entity__c}" rendered="{!quote.Furniture_Option__c == 'Furniture Only'}"/>
          <apex:pageBlockSectionItem rendered="{!quote.Furniture_Option__c != 'Furniture Only'}"/>
              <apex:outputField value="{!quote.Return_Deposit_To_New__c}"/>
              <apex:outputField value="{!quote.Claim_Entity__c}" rendered="{!quote.Furniture_Option__c != 'Furniture Only'}"/>
          <apex:pageBlockSectionItem rendered="{!quote.Furniture_Option__c == 'Furniture Only'}"/> 
          <apex:outputField value="{!quote.Billing_Preference__c}" id="quoteBillingPreferencesRO" rendered="{!quote.Id != null}"/>
            <apex:inputField value="{!quote.Billing_Preference__c}" id="quoteBillingPreferences" rendered="{!quote.Id == null}"/>
          
        </apex:pageblockSection>
             
          <apex:pageblockSection id="quotePBS2" columns="1">  
             <apex:pageBlockSectionItem rendered="{!quote.Id != null}"/>
             <apex:outputField value="{!quote.Special_Instructions_New__c}" id="quoteSpecialInstructionsRO" rendered="{!quote.Id != null}"/>
         <apex:inputHidden value="{!quote.Id}" id="quoteId"/>   
             <apex:pageBlockSectionItem rendered="{!quote.Id == null}">
                <apex:outputText >Special Instructions</apex:outputText>
                <apex:inputTextArea value="{!quote.Special_Instructions_New__c}" cols="90" rows="6" id="quoteSpecialInstructions" styleclass="countable1"/>
             </apex:pageBlockSectionItem>  
          </apex:pageblockSection>  
             
          <apex:pageBlockSection id="newQuoteCostsPBS" title="Costs/Fees/Deposits" columns="1">  
            <apex:pageBlockTable value="{!quoteCosts}" var="newQuoteCost" id="newQuoteCostsPBT">
                <apex:column value="{!newQuoteCost.RecordTypeID}"/> 
                <apex:column value="{!newQuoteCost.Type__c}"/>
                <apex:column value="{!newQuoteCost.Type_Description__c}"/>
                <apex:column headerValue="Start Date">
                <apex:outputfield value="{!newQuoteCost.Start_Date__c}" rendered="{!newQuoteCost.Start_Date__c != null}"/>
                <apex:outputfield value="{!quote.Move_In_Date__c}" rendered="{!newQuoteCost.Start_Date__c == null}"/>
                </apex:column>
                <apex:column headerValue="End Date">
                <apex:outputfield value="{!newQuoteCost.End_Date__c}" rendered="{!newQuoteCost.End_Date__c != null}"/>
                <apex:outputfield value="{!quote.Move_In_Date__c}" rendered="{!newQuoteCost.End_Date__c == null && newQuoteCost.Type__c != 'Furniture'}"/>
                <apex:outputfield value="{!quote.Approved_Through_Date__c}" rendered="{!newQuoteCost.End_Date__c == null && newQuoteCost.Type__c == 'Furniture'}"/>
                </apex:column>
                <apex:column value="{!newQuoteCost.Amount__c}"/> 
                <apex:column value="{!newQuoteCost.Billable_Party__c}"/>
                <apex:column value="{!newQuoteCost.Payable_Party__c}"/>  
                <apex:column value="{!newQuoteCost.Prorate_Type__c}"/>       
            </apex:pageBlockTable>
          </apex:pageBlockSection>
          <apex:pageBlockSection id="existingQuoteCostsPBS" title="Costs/Fees/Deposits" columns="1">   
            <apex:pageBlockTable value="{!quote.Quote_Costs__r}" var="existingQuoteCost" id="existingQuoteCostsPBT">
                <apex:column value="{!existingQuoteCost.Record_Type_Name__c}"/> 
                <apex:column value="{!existingQuoteCost.Type__c}"/>
                <apex:column value="{!existingQuoteCost.Type_Description__c}"/>
                <apex:column value="{!existingQuoteCost.Start_Date__c}"/>
                <apex:column value="{!existingQuoteCost.End_Date__c}"/>
                <apex:column value="{!existingQuoteCost.Amount__c}"/> 
                <apex:column value="{!existingQuoteCost.Billable_Party__c}"/>
                <apex:column value="{!existingQuoteCost.Payable_Party__c}"/>  
                <apex:column value="{!existingQuoteCost.Prorate_Type__c}"/>       
            </apex:pageBlockTable>
          </apex:pageBlockSection> 
           
          <apex:actionFunction name="buildQuote" 
                               action="{!buildQuote}" 
                               rerender="hdnPageRefresh,quotePBS1,quotePBS2,newQuoteCostsPBS,pageMessages"
                               oncomplete="stopProcessing();if(j('[id$=hdnPageRefresh]').text() == 'true'){ids.pageRefreshPanel.dialog('open')}else{toggleQuoteFormElements();j('[id$=existingQuoteCostsPBS]').hide();if(j('[id$=pageMessages]').text() == ''){ids.quotePanel.dialog('open');j('.countable1').jqEasyCounter({'maxChars': 500,'maxCharsWarning': 490})}}">
                
                <apex:param name="selectedHousingSearchFurnitureOption" value=""/>  
          </apex:actionFunction>

          <apex:actionFunction name="refreshQuote" 
                               rerender="test">
          </apex:actionFunction>    

          <apex:actionFunction name="saveQuote" 
                               action="{!saveQuote}"
                               status="quoteActionStatus"
                               rerender="hdnPageRefresh,hdnHasActiveQuote,quotesPBS,placementPBS1,placementPBS2,placementPBS3,placementDocumentLinksPBS,placementLinksPBS,housingSearchesPBS1,furnitureOrdersPBS,serviceRequestPBS1,serviceRequestOpenActivities,placementNotesAndAttachments"
                               oncomplete="if(j('[id$=hdnPageRefresh]').text() == 'true'){ids.pageRefreshPanel.dialog('open')}else{toggleCommandButtons();toggleDisabledFormElements();togglePageBlockSections();setupServiceRequestSection();setupPlacementSection();ids.quotePanel.dialog('close');j('.countable3').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800})}">
            <apex:param name="quoteId" value=""/>  
            <apex:param name="quoteStatus" value=""/>  
            <apex:param name="quoteBillingPreferences" value=""/>  
            <apex:param name="quoteMarkupAdjustment" value=""/>
            <apex:param name="quoteMarkupAdjustmentReason" value=""/>    
            <apex:param name="quoteMarkupAuthorizedBy" value=""/>
            <apex:param name="quoteSpecialInstructions" value=""/>
          </apex:actionFunction>
        </apex:pageBlock>     
      </apex:outputPanel> 
      
      <apex:outputPanel id="newLandlordAccountPanel" style="display:none">
        <apex:iframe id="newLandlordAccountIFrame" scrolling="true" width="625px" src="/001/e?retURL=%2F001%2Fo&RecordType=012700000001W2S&ent=Account&isdtp=mn"></apex:iframe>
      </apex:outputPanel>

       <apex:outputPanel id="PaymentSelectionPanel" style="display:none"> 
        <apex:actionRegion >
          <apex:pageBlock >
            <apex:pageBlockButtons location="top">
                <apex:actionStatus id="paymentSelectionStatus">
                     <apex:facet name="stop">
                        <apex:outputPanel >          
                             <apex:commandButton value="Continue" 
                                    onclick="clientGetNewCreditCard(); return false;"
                                    id="btnPaymentSelectionComplete" />
                        </apex:outputPanel>            
                    </apex:facet>
                    <apex:facet name="start">
                        <apex:outputPanel >
                            <apex:image url="{!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')}"></apex:image>
                            <apex:outputText ><b>Processing...</b></apex:outputText>
                        </apex:outputPanel> 
                    </apex:facet>
                </apex:actionStatus> 
            </apex:pageBlockButtons>
            <div id="payment-selection-errors" class="jqError">
                <ul id="payment-selection-error-list"></ul>
            </div>
            <apex:pageBlockSection id="PaymentSelectionPBS" columns="2">
      
                <apex:outputLabel value="Payment Type" />
             
                <select id="placementPaymentType" name="placementPaymentType" size="1">
                    <option value="" selected="selected">--None--</option>
                    <option value="PayNet">PayNet</option>
                    <option value="PayNet ID Copy">PayNet ID Copy</option>
                </select>
                <apex:inputHidden id="itemId"/>
            </apex:pageBlockSection> 
          </apex:pageBlock>
        </apex:actionRegion>
      </apex:outputPanel>

     <apex:actionFunction name="getNewCreditCard"
                          action="{!getNewCreditCard}"
                          status="paymentSelectionStatus"
                          rerender="placementPBS1,placementPBS2,placementLinksPBS,placementDocumentLinksPBS,placementHistoryPBS,mainMessages,mainPageButtons"
                          oncomplete="toggleCommandButtons();togglePageBlockSections();ids.paymentSelectionPanel.dialog('close');j('body').css('overflow','scroll')">
                          <apex:param name="placementPaymentType" value=""/>
     </apex:actionFunction> 
      
      <apex:outputPanel id="PageRefreshPanel" style="display:none"> 
      <apex:pageBlock >
        <apex:pageBlockButtons location="top">
          <apex:commandButton value="Refresh" 
                              onclick="clientRefreshPage(); return false;"
                              id="btnRefreshPage" />
          </apex:pageBlockButtons>
          <apex:outputText value="Updates have been made to this housing placement outside of this page.<br/>This page needs to be refreshed." escape="false" />
        </apex:pageBlock>
      </apex:outputPanel>

      <apex:outputPanel style="display:none">
        <apex:outputText value="{!hasSelectedHousingSearch}" id="hdnHasSelectedHousingSearch"/>
        <apex:outputText value="{!selectedHousingSearchFurnitureOption}" id="hdnSelectedHousingSearchFurnitureOption"/> 
        <apex:outputText value="{!selectedHousingSearchForeclosureCheck}" id="hdnSelectedHousingSearchForeclosureCheck"/> 
        <apex:outputText value="{!activeFurnitureOrderStatus}" id="hdnActiveFurnitureOrderStatus"/> 
        <apex:outputText value="{!hasFurnitureOrder}" id="hdnHasFurnitureOrder"/>
        <apex:outputText value="{!hasFurnitureOrderCost}" id="hdnHasFurnitureOrderCost"/>
        <apex:outputText value="{!hasActiveQuote}" id="hdnHasActiveQuote"/>
        <apex:outputText value="{!isManagerOrDirector}" id="hdnIsManagerOrDirector"/>
        <apex:outputText value="{!isBillingSpecialist}" id="hdnIsBillingSpecialist"/>
        <apex:outputText value="{!hasQuote}" id="hdnHasQuote"/>
        <apex:outputText value="{!hasCompletedClaim}" id="hdnHasCompletedClaim"/>
        <apex:outputText value="{!isPlacementMovedOut}" id="hdnIsPlacementMovedOut"/>
        <apex:outputText value="{!isPlacementCancelled}" id="hdnIsPlacementCancelled"/>
        <apex:outputText value="{!instanceName}" id="hdnInstanceName"/>   
        <apex:outputText value="{!costRecordTypeName}" id="hdnCostRecordTypeName"/>
        <apex:outputText value="{!srOnHold}" id="hdnSROnHold"/>
        <apex:outputText value="{!pageRefresh}" id="hdnPageRefresh"/> 
      </apex:outputPanel> 
      <script type="text/javascript"> 
        ids.waitDialog = j('#waitDialog');
    
        // popup panels
        
        ids.newLandlordAccountPanel = j(jq('{!$Component.newLandlordAccountPanel}'));
        ids.housingSearchPanel = j(jq('{!$Component.housingSearchPanel}'));
        ids.furnitureOnlySearchPanel = j(jq('{!$Component.furnitureOnlySearchPanel}'));
        ids.housingSearchCostsPanel = j(jq('{!$Component.housingSearchCostsPanel}'));
        ids.costPanel = j(jq('{!$Component.costPanel}'));
        ids.furnitureOrderPanel = j(jq('{!$Component.furnitureOrderPanel}'));
        ids.quotePanel = j(jq('{!$Component.quotePanel}'));
        ids.pageRefreshPanel = j(jq('{!$Component.PageRefreshPanel}'));  
        ids.paymentSelectionPanel = j(jq('{!$Component.PaymentSelectionPanel}'));  
        
        // main page buttons
        
        ids.btnAddHousingSearch = j('[name$=btnAddHousingSearch]');
        ids.btnAddFurnitureOnlySearch = j('[name$=btnAddFurnitureOnlySearch]');
        ids.btnAddFurnitureOrder = j('[name$=btnAddFurnitureOrder]');
        ids.btnCreateQuote = j('[name$=btnCreateQuote]');
        ids.btnGenerateCreditCard = j('[name$=btnGenerateCreditCard]');
        
        // housingSearch field id's ***************
    
        ids.housingSearchId = j('[id$=housingSearchId]');
        ids.housingSearchPresentedToAdjuster = j('[id$=housingSearchPresentedToAdjuster]');
        ids.housingSearchPropertyType = j('[id$=housingSearchPropertyType]');
        ids.housingSearchFurnitureOption = j('[id$=housingSearchFurnitureOption]');
        ids.housingSearchPresentedDateTime = j('[id$=housingSearchPresentedDateTime]'); 
        ids.housingSearchLandlordId = j('[id$=housingSearchLandlord_lkid]');
        ids.housingSearchLandlordText = j('[id$=housingSearchLandlord]');
        ids.housingSearchStreetAddress1 = j('[id$=housingSearchStreetAddress1]');
        ids.housingSearchStreetAddress2 = j('[id$=housingSearchStreetAddress2]');
        ids.housingSearchCity = j('[id$=housingSearchCity]');
        ids.housingSearchState = j('[id$=housingSearchState]');
        ids.housingSearchZip = j('[id$=housingSearchZip]');
        ids.housingSearchCountry = j('[id$=housingSearchCountry]');
        ids.housingSearchDistanceFromDamagedProp = j('[id$=housingSearchDistanceFromDamagedProp]');
        ids.housingSearchForecloserCheck = j('[id$=housingSearchForecloserCheck]');
        ids.housingSearchPropertyDescription = j('[id$=housingSearchPropertyDescription]');
        ids.housingSearchTHCComments = j('[id$=housingSearchTHCComments]');
        ids.housingSearchDaysNoticeRequired = j('[id$=housingSearchDaysNoticeRequired]');
        ids.housingSearchInitialCheckDeliveryMethod = j('[id$=housingSearchInitialCheckDeliveryMethod]');
        ids.housingSearchSendCopyOfCheck = j('[id$=housingSearchSendCopyOfCheck]');
        ids.housingSearchSendCopyOfTrackingInformation = j('[id$=housingSearchSendCopyOfTrackingInformation]');
        ids.housingSearchInitialPaymentType = j('[id$=housingSearchInitialPaymentType]');
        ids.housingSearchBedrooms = j('[id$=housingSearchBedrooms]');
        ids.housingSearchNameOfComplex = j('[id$=housingSearchNameOfComplex]');
        ids.housingSearchUnit = j('[id$=housingSearchUnit]');
        ids.housingSearchInitialContactName = j('[id$=housingSearchInitialContactName]');
        ids.housingSearchInitialContactNumber = j('[id$=housingSearchInitialContactNumber]');
        ids.housingSearchBathrooms = j('[id$=housingSearchBathrooms]');
        ids.housingSearchSquareFeet = j('[id$=housingSearchSquareFeet]');
        ids.housingSearchPetsAllowed = j('[id$=housingSearchPetsAllowed]');
        ids.housingSearchWoodFloors = j('[id$=housingSearchWoodFloors]');
        ids.housingSearchElevatorReservationRequired = j('[id$=housingSearchElevatorReservationRequired]');
        ids.housingSearchExtensionIncrementDays = j('[id$=housingSearchExtensionIncrementDays]');
        ids.housingSearchRecurringPaymentType = j('[id$=housingSearchRecurringPaymentType]');
        ids.housingSearchNTVSendVia = j('[id$=housingSearchNTVSendVia]');
        ids.housingSearchNTVSendTo = j('[id$=housingSearchNTVSendTo_lkid]');
        ids.housingSearchPolicyholderAcceptedPropertyDate = j('[id$=housingSearchPolicyholderAcceptedPropertyDate]');
        ids.housingSearchPolicyholderDeclinedPropertyDate = j('[id$=housingSearchPolicyholderDeclinedPropertyDate]');
        ids.housingSearchPolicyholderDeclinedPropertyReason = j('[id$=housingSearchPolicyholderDeclinedPropertyReason]');
        ids.housingSearchOver5milesReason = j('[id$=housingSearchOver5milesReason]');
        ids.housingSearchLeaseTermApproveByAdj = j('[id$=housingSearchLeaseTermApproveByAdj]');
        ids.housingSearchFirstAvailableMoveInDate = j('[id$=housingSearchFirstAvailableMoveInDate]');
        ids.housingSearchTentativeMoveOutDate = j('[id$=housingSearchTentativeMoveOutDate]');
        ids.housingSearchRentFrequency = j('[id$=housingSearchRentFrequency]');
        ids.housingSearchFirstMonthProratedRentAmountDue = j('[id$=housingSearchFirstMonthProratedRentAmountDue]');
        ids.housingSearchWhatIsIncludedInTheProratedRent = j('[id$=housingSearchWhatIsIncludedInTheProratedRent]');
        ids.housingSearchRSD = j('[id$=housingSearchRSD]');
        ids.housingSearchResponsiblePartyForRSD = j('[id$=housingSearchResponsiblePartyForRSD]');
        ids.housingSearchSureDeposit = j('[id$=housingSearchSureDeposit]');
        ids.housingSearchApplicationFee = j('[id$=housingSearchApplicationFee]');
        ids.housingSearchTax = j('[id$=housingSearchTax]');
        ids.housingSearchCleaningFee = j('[id$=housingSearchCleaningFee]');
        ids.housingSearchAmenityFee = j('[id$=housingSearchAmenityFee]');
        ids.housingSearchAdministrationFee = j('[id$=housingSearchAdministrationFee]');
        ids.housingSearchReKeyingFee = j('[id$=housingSearchReKeyingFee]');
        ids.housingSearchBreakLeaseFee = j('[id$=housingSearchBreakLeaseFee]');
        ids.housingSearchGarageRemoteFee = j('[id$=housingSearchGarageRemoteFee]');
        ids.housingSearchFencingFee = j('[id$=housingSearchFencingFee]');
        ids.housingSearchNumberOfPetsAllowed = j('[id$=housingSearchNumberOfPetsAllowed]');
        ids.housingSearchTotalPetFees = j('[id$=housingSearchTotalPetFees]');
        ids.housingSearchPetRSD = j('[id$=housingSearchPetRSD]');
        ids.housingSearchDaysNoticeRequiredAfterILT = j('[id$=housingSearchDaysNoticeRequiredAfterILT]');
        ids.housingSearchRentIncreaseAfterILT = j('[id$=housingSearchRentIncreaseAfterILT]');
        ids.housingSearchRentIncreaseToAfterILT = j('[id$=housingSearchRentIncreaseToAfterILT]');
        ids.housingSearchProcessingTimeForApplication = j('[id$=housingSearchProcessingTimeForApplication]');
        ids.housingSearchRequirementsForQualification = j('[id$=housingSearchRequirementsForQualification]');
        ids.housingSearchUtilitiesPHIsResponsibleFor = j('[id$=housingSearchUtilitiesPHIsResponsibleFor]');
        ids.housingSearchAppliancesCRSNeedsToProvide = j('[id$=housingSearchAppliancesCRSNeedsToProvide]');
        ids.housingSearchApplianceHookUpGasElectric = j('[id$=housingSearchApplianceHookUpGasElectric]');
        ids.housingSearchUtilitySetUpFee = j('[id$=housingSearchUtilitySetUpFee]');
        ids.housingSearchBrokerFee = j('[id$=housingSearchBrokerFee]');
        ids.housingSearchWindowCoveringFee = j('[id$=housingSearchWindowCoveringFee]');
        ids.housingSearchCertificateOfOccupancyFee = j('[id$=housingSearchCertificateOfOccupancyFee]');
        ids.housingSearchParkingFee = j('[id$=housingSearchParkingFee]');
        ids.housingSearchOtherNonRefundableFee = j('[id$=housingSearchOtherNonRefundableFee]');
        ids.housingSearchPHAbatementAmount = j('[id$=housingSearchPHAbatementAmount]');
        ids.housingSearchStartDateForPHAbatement = j('[id$=housingSearchStartDateForPHAbatement]');
        ids.housingSearchResponsiblePartyForVendorEntry = j('[id$=housingSearchResponsiblePartyForVendorEntry]');
        ids.housingSearchPhoneNumberToConfirmVendorEntry = j('[id$=housingSearchPhoneNumberToConfirmVendorEntry]');
        ids.housingSearchPHViewed = j('[id$=housingSearchPHViewed]');
        ids.housingSearchRentersInsuranceRequired = j('[id$=housingSearchRentersInsuranceRequired]');
        ids.housingSearchDeclarationPageSufficient = j('[id$=housingSearchDeclarationPageSufficient]');
        ids.housingSearchRMUpdated = j('[id$=housingSearchRMUpdated]');
        ids.housingSearchRentalApplicationRequired = j('[id$=housingSearchRentalApplicationRequired]');
        ids.housingSearchUtilitiesIncludedInRent = j('[id$=housingSearchUtilitiesIncludedInRent]');
        ids.housingSearchHowUtilitiesAreToBeEstablished = j('[id$=housingSearchHowUtilitiesAreToBeEstablished]');
        ids.housingSearchLandscapingSnowRemovalHOAIncluded = j('[id$=housingSearchLandscapingSnowRemovalHOAIncluded]');
        ids.housingSearchAppliancesPresentInRentalProperty = j('[id$=housingSearchAppliancesPresentInRentalProperty]');
        ids.housingSearchWindowCoveringsPresent = j('[id$=housingSearchWindowCoveringsPresent]');
        ids.housingSearchPicturesAllowedOnWalls = j('[id$=housingSearchPicturesAllowedOnWalls]');
        ids.housingSearchFencedYard = j('[id$=housingSearchFencedYard]');
        ids.housingSearchCertificateOfOccupancyRequired = j('[id$=housingSearchCertificateOfOccupancyRequired]');
        ids.housingSearchFloorNumber = j('[id$=housingSearchFloorNumber]');
        ids.housingSearchRent = j('[id$=housingSearchRent]');
        ids.housingSearchWhatUtilitiesIncludedInRent = j('[id$=housingSearchWhatUtilitiesIncludedInRent]');


        // furnitureOnlySearch field id's ***************
      
        ids.furnitureOnlyId = j('[id$=furnitureOnlyId]');
        ids.furnitureOnlyPropertyType = j('[id$=furnitureOnlyPropertyType]');
        ids.furnitureOnlyPresentedDateTime = j('[id$=furnitureOnlyPresentedDateTime]'); 
        ids.furnitureOnlyStreetAddress1 = j('[id$=furnitureOnlyStreetAddress1]');
        ids.furnitureOnlyStreetAddress2 = j('[id$=furnitureOnlyStreetAddress2]');
        ids.furnitureOnlyCity = j('[id$=furnitureOnlyCity]');
        ids.furnitureOnlyState = j('[id$=furnitureOnlyState]');
        ids.furnitureOnlyZip = j('[id$=furnitureOnlyZip]');
        ids.furnitureOnlyCountry = j('[id$=furnitureOnlyCountry]');
        ids.furnitureOnlyDistanceFromDamagedProp = j('[id$=furnitureOnlyDistanceFromDamagedProp]');
        ids.furnitureOnlyPropertyDescription = j('[id$=furnitureOnlyPropertyDescription]');
        ids.furnitureOnlyDaysNoticeRequired = j('[id$=furnitureOnlyDaysNoticeRequired]');
        ids.furnitureOnlyBedrooms = j('[id$=furnitureOnlyBedrooms]');
        ids.furnitureOnlyNameOfComplex = j('[id$=furnitureOnlyNameOfComplex]');
        ids.furnitureOnlyUnit = j('[id$=furnitureOnlyUnit]');
        ids.furnitureOnlyBathrooms = j('[id$=furnitureOnlyBathrooms]');
        ids.furnitureOnlySquareFeet = j('[id$=furnitureOnlySquareFeet]');
        ids.furnitureOnlyWoodFloors = j('[id$=furnitureOnlyWoodFloors]');
        ids.furnitureOnlyElevatorReservationRequired = j('[id$=furnitureOnlyElevatorReservationRequired]');
        ids.furnitureOnlyExtensionIncrementDays = j('[id$=furnitureOnlyExtensionIncrementDays]');    
                  
          // cost field id's ***************
                
        ids.costId = j('[id$=costId]');
        ids.costRecordTypeId = j('[id$=costRecordTypeId]'); 
        ids.costAmount = j('[id$=costAmount]');
        ids.costType = j('[id$=costType]');
        ids.costTypeDescription = j('[id$=costTypeDescription]');
        ids.costBillableParty = j('[id$=costBillableParty_lkid]');
        ids.costPayableParty = j('[id$=costPayableParty_lkid]');
        ids.costProrateType = j('[id$=costProrateType]');
        ids.btnSaveCost = j('[id$=btnSaveCost]');
        
        // furniture order field id's ***************
          
        ids.furnitureOrderId = j('[id$=furnitureOrderId]');
        ids.furnitureOrderRequestedDeliveryDate = j('[id$=furnitureOrderRequestedDeliveryDate]');
        ids.furnitureOrderCost = j('[id$=furnitureOrderCost]');
        ids.furnitureOrderBillablePartyCost = j('[id$=furnitureOrderBillablePartyCost]');
        ids.furnitureOrderFurnitureCost = j('[id$=furnitureOrderFurnitureCost]');
        ids.furnitureOrderBillablePartyFurnitureCost = j('[id$=furnitureOrderBillablePartyFurnitureCost]');
        ids.furnitureOrderApplianceCost = j('[id$=furnitureOrderApplianceCost]');
        ids.furnitureOrderBillablePartyApplianceCost = j('[id$=furnitureOrderBillablePartyApplianceCost]');
        ids.furnitureOrderElectronicsCost = j('[id$=furnitureOrderElectronicsCost]');
        ids.furnitureOrderBillablePartyElectronicsCost = j('[id$=furnitureOrderBillablePartyElectronicsCost]');
        ids.furnitureOrderKitchenHousewaresCost = j('[id$=furnitureOrderKitchenHousewaresCost]');
        ids.furnitureOrderBillablePartyKitchenHousewaresCost = j('[id$=furnitureOrderBillablePartyKitchenHousewaresCost]');
        ids.furnitureOrderBedBathHousewaresCost = j('[id$=furnitureOrderBedBathHousewaresCost]');
        ids.furnitureOrderBillablePartyBedBathHousewaresCost = j('[id$=furnitureOrderBillablePartyBedBathHousewaresCost]');
        ids.furnitureOrderOtherHousewaresCost = j('[id$=furnitureOrderOtherHousewaresCost]');
        ids.furnitureOrderBillablePartyOtherHousewaresCost = j('[id$=furnitureOrderBillablePartyOtherHousewaresCost]');
        ids.furnitureOrderDeposit = j('[id$=furnitureOrderDeposit]');
        ids.furnitureOrderBillablePartyDeposit = j('[id$=furnitureOrderBillablePartyDeposit]');
        ids.furnitureOrderSetupFee = j('[id$=furnitureOrderSetupFee]');
        ids.furnitureOrderBillablePartySetupFee = j('[id$=furnitureOrderBillablePartySetupFee]');
        ids.furnitureOrderPetFee = j('[id$=furnitureOrderPetFee]');
        ids.furnitureOrderBillablePartyPetFee = j('[id$=furnitureOrderBillablePartyPetFee]');
        ids.furnitureOrderDeliveryFee = j('[id$=furnitureOrderDeliveryFee]');
        ids.furnitureOrderBillablePartyDeliveryFee = j('[id$=furnitureOrderBillablePartyDeliveryFee]');
        ids.furnitureOrderIsPartial = j('[id$=furnitureOrderIsPartial]');
        ids.furnitureOrderIsPartialRO = j('[id$=furnitureOrderIsPartialRO]');
        ids.furnitureOrderComments = j('[id$=furnitureOrderComments]');
        ids.furnitureOrderIncludePictures = j('[id$=furnitureOrderIncludePictures]');
        ids.furnitureOrderLevel = j('[id$=furnitureOrderLevel]');
        ids.furnitureOrderMasterBedroom = j('[id$=furnitureOrderMasterBedroom]');
        ids.furnitureOrderAdditionalBedroom1 = j('[id$=furnitureOrderAdditionalBedroom1]');
        ids.furnitureOrderAdditionalBedroom2 = j('[id$=furnitureOrderAdditionalBedroom2]');
        ids.furnitureOrderAdditionalBedroom3 = j('[id$=furnitureOrderAdditionalBedroom3]');
        ids.furnitureOrderAdditionalBedroom4 = j('[id$=furnitureOrderAdditionalBedroom4]');
        ids.furnitureOrderAdditionalBedroom5 = j('[id$=furnitureOrderAdditionalBedroom5]');
        ids.furnitureOrderAdditionalBedroom6 = j('[id$=furnitureOrderAdditionalBedroom6]');
        ids.furnitureOrderAdditionalBedroom7 = j('[id$=furnitureOrderAdditionalBedroom7]');
        ids.furnitureOrderAdditionalBedroom8 = j('[id$=furnitureOrderAdditionalBedroom8]');
        ids.furnitureOrderAdditionalBedroom9 = j('[id$=furnitureOrderAdditionalBedroom9]');
        ids.furnitureOrderAdditionalBedroom10 = j('[id$=furnitureOrderAdditionalBedroom10]');
        ids.furnitureOrderLivingRoom = j('[id$=furnitureOrderLivingRoom]');
        ids.furnitureOrderAdditionalLivingRoom = j('[id$=furnitureOrderAdditionalLivingRoom]');
        ids.furnitureOrderDiningRoom = j('[id$=furnitureOrderDiningRoom]');
        ids.furnitureOrderAdditionalDiningRoom = j('[id$=furnitureOrderAdditionalDiningRoom]');
        ids.furnitureOrderAppliances = j('[id$=furnitureOrderAppliances]');
        ids.furnitureOrderRefrigerator = j('[id$=furnitureOrderRefrigerator]');
        ids.furnitureOrderMicrowave = j('[id$=furnitureOrderMicrowave]');
        ids.furnitureOrderClothesWasher = j('[id$=furnitureOrderClothesWasher]');
        ids.furnitureOrderClothesDryer = j('[id$=furnitureOrderClothesDryer]');
        ids.furnitureOrderDryerType = j('[id$=furnitureOrderDryerType]');
        ids.furnitureOrderRange = j('[id$=furnitureOrderRange]');
        ids.furnitureOrderRangeType = j('[id$=furnitureOrderRangeType]');
        ids.furnitureOrderHousewares = j('[id$=furnitureOrderHousewares]');
        ids.furnitureOrderBedroomsNeedingHousewares = j('[id$=furnitureOrderBedroomsNeedingHousewares]');
        ids.furnitureOrderBathroomsNeedingHousewares = j('[id$=furnitureOrderBathroomsNeedingHousewares]');
        ids.furnitureOrderReadyForVSS = j('[id$=furnitureOrderReadyForVSS]');
        ids.furnitureOrderCreatedAfterMoveIn = j('[id$=furnitureOrderCreatedAfterMoveIn]');
                 
        // quote field id's
        
        ids.quoteId = j('[id$=quoteId]');
        ids.quoteBillingPreferences = j('[id$=quoteBillingPreferences]');
        ids.quoteMarkup = j('[id$=quoteMarkup]');
        ids.quoteMarkupAdjustment = j('[id$=quoteMarkupAdjustment]');
        ids.quoteMarkupAdjustmentReason = j('[id$=quoteMarkupAdjustmentReason]');
        ids.quoteMarkupTotal = j('[id$=quoteMarkupTotal]');
        ids.quoteMarkupAuthorizedBy = j('[id$=quoteMarkupAuthorizedBy_lkid]');
        ids.quoteSpecialInstructions = j('[id$=quoteSpecialInstructions]');
                 
        // placement field id's
       
        ids.placementMoveInDate = j('[id$=placementMoveInDate]');
        ids.placementMoveOutDate = j('[id$=placementMoveOutDate]');
        ids.placementApprovedThroughDate = j('[id$=placementApprovedThroughDate]');
        ids.placementTHCSignedDateTime = j('[id$=placementTHCSignedDateTime]');
        ids.placementTHASignedDateTime = j('[id$=placementTHASignedDateTime]');
        ids.placementHistoryPBS = j('[id$=placementHistoryPBS]');
        ids.placementDocumentLinksPBS = j('[id$=placementDocumentLinksPBS]');
        ids.placementProrateAdjustment = j('[id$=placementProrateAdjustment]');
        ids.placementProrate = j('[id$=placementProrate]');
        ids.placementRentHoldReason = j('[id$=placementRentHoldReason]'); 
        ids.placementInvoiceHoldReason = j('[id$=placementInvoiceHoldReason]'); 
      
        // service request field id's
        
        ids.serviceRequestStatus = j('[id$=serviceRequestStatus]');
        ids.serviceRequestOpportunity = j('[id$=serviceRequestOpportunity]').text();
        ids.serviceRequestDWOReasonCode = j('[id$=serviceRequestDWOReasonCode]');
       
                  
        // hidden id's
        
        ids.hasSelectedHousingSearch = j('[id$=hdnHasSelectedHousingSearch]');
        ids.selectedHousingSearchFurnitureOption = j('[id$=hdnSelectedHousingSearchFurnitureOption]');
        ids.selectedHousingSearchForeclosureCheck = j('[id$=hdnSelectedHousingSearchForeclosureCheck]');
        ids.activeFurnitureOrderStatus = j('[id$=hdnActiveFurnitureOrderStatus]');
        ids.hasFurnitureOrder = j('[id$=hdnHasFurnitureOrder]');
        ids.hasFurnitureOrderCost = j('[id$=hdnHasFurnitureOrderCost]'); 
        ids.hasActiveQuote = j('[id$=hdnHasActiveQuote]');   
        ids.hasQuote = j('[id$=hdnHasQuote]'); 
        ids.hasCompletedClaim = j('[id$=hdnHasCompletedClaim]');
        ids.isServiceRequest = j('[id$=isServiceRequest]');
        ids.isPlacementMovedOut = j('[id$=hdnIsPlacementMovedOut]');
        ids.isPlacementCancelled = j('[id$=hdnIsPlacementCancelled]');
        ids.isBillingSpecialist = j('[id$=hdnIsBillingSpecialist]');
                                
        ids.placementStatus = j('[id$=placementStatus]');
        ids.placementHSASigned = j('[id$=placementHSASigned]');
                                       
        ids.saveHousingSearchButton = j('[id$=saveHousingSearchButton]');
        ids.placementHR = j('[id$=placementHR]');
        
        ids.itemId = j('[id$=itemId]');

        function clientSaveServiceRequest()
        {
          var isValid = true;
          var errorList = j('#serviceRequest-error-list');
          var housingSearchField = j('[id$=hdnHasSelectedHousingSearch]');
          
                                     
          var serviceRequestDWOReasonCode = j(ids.serviceRequestDWOReasonCode.selector).val();
          var serviceRequestStatus = j(ids.serviceRequestStatus.selector).text();
          var srOnHold = j('[id$=serviceRequestHold]').attr('checked');
                                                
          errorList.empty();
            
          // begin validations
          if (jQuery.trim(serviceRequestDWOReasonCode) != '' && srOnHold == true)
          {
            isValid = false;
            errorList.append('<li>You cannot LO this Service Request while it is on hold</li>');
           j(ids.serviceRequestDWOReasonCode.selector).val('');
          }  

          if (jQuery.trim(serviceRequestDWOReasonCode) == '' && serviceRequestStatus == 'Lost Opportunity' )
          {
            isValid = false;
            errorList.append('<li>Please enter a DWO Reason Code</li>');
          }  
          
          if (isValid === true)
          {
            processing();
            if (jQuery.trim(serviceRequestDWOReasonCode) != '')
            {
              j('.selectedHouse').attr('disabled', 'disabled');   
            }
            saveServiceRequest();
          }
          else
          {
             return false;
          }
        } 
          
        function clientUpdatePlacement()
        {
          var isValid = true;
                var errorList = j('#placement-error-list');
                var placementMoveInDate = j(ids.placementMoveInDate.selector).val();
                var placementMoveOutDate = j(ids.placementMoveOutDate.selector).val();
            var placementApprovedThroughDate = j(ids.placementApprovedThroughDate.selector).val();
            var placementTHCSignedDateTime = j(ids.placementTHCSignedDateTime.selector).val();
            var placementTHASignedDateTime = j(ids.placementTHASignedDateTime.selector).val();
            var placementProrateAdjustment = j(ids.placementProrateAdjustment.selector).val();
            var placementProrate = j(ids.placementProrate.selector).text();
          var placementRentHoldReason = j(ids.placementRentHoldReason.selector).val();
          var placementInvoiceHoldReason = j(ids.placementInvoiceHoldReason.selector).val();
          var selectedHousingSearchFurnitureOption = j('[id$=hdnSelectedHousingSearchFurnitureOption]').text();
         
          var placementNTVSendTo = j('[id$=placementNTVSendTo]').val();
          var placementStatus = j('[id$=placementStatus]').text();
             
            if (jQuery.trim(placementTHCSignedDateTime) != '' && jQuery.trim(placementMoveInDate) != '' && jQuery.trim(placementApprovedThroughDate) != '')
              {
                  j('#serviceRequest-error-list').empty();   
                }
             
                j('[id$=mainMessages]').empty();
                j('[id$=pageMessages]').empty();
             
                var dateTimePattern = /^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$/;
               

           errorList.empty();
             
                // begin validations
          if (jQuery.trim(placementMoveInDate) != '' && placementMoveInDate.match(dateTimePattern) == null)
          {
            isValid = false;
            errorList.append('<li>Please enter a valid Move In Date</li>');
          }
           
          if (jQuery.trim(placementApprovedThroughDate) != '' && placementApprovedThroughDate.match(dateTimePattern) == null)
          {
            isValid = false;
            errorList.append('<li>Please enter a valid Approved Through Date</li>');
          }             
           
          if (isValid == true)
          {  
            if (jQuery.trim(placementApprovedThroughDate) != '' && jQuery.trim(placementApprovedThroughDate).length >= 8 &&
               jQuery.trim(placementMoveInDate) != '' && jQuery.trim(placementMoveInDate).length >= 8 &&
               jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(placementApprovedThroughDate)) <= jQuery.datepicker.parseDate('mm/dd/yy',
               jQuery.trim(placementMoveInDate)))
            { 
              isValid = false;
              errorList.append('<li>The Approved Through Date must be greater than the Move In Date</li>');
            }
            }
            
            var date = new Date();           
            var currentDateString = (date.getMonth()+1) + "/" + date.getDate() + "/" + date.getFullYear();
            var currentDate = new Date(currentDateString);
            if (jQuery.trim(placementTHASignedDateTime) != '')
            {
            var placementTHASignedDate = new Date(placementTHASignedDateTime.substring(0,placementTHASignedDateTime.indexOf(" ")));
            if (placementTHASignedDate > currentDate)
            {
              isValid = false;
              errorList.append('<li>THA Signed Date cannot be a future date.</li>');
            }
          }
              
          if (jQuery.trim(placementTHCSignedDateTime) != '')
          {
            placementTHCSignedDate = new Date(placementTHCSignedDateTime.substring(0,placementTHCSignedDateTime.indexOf(" ")));
            if (placementTHCSignedDate > currentDate)
            {
                isValid = false;
                errorList.append('<li>THC Signed Date cannot be a future date.</li>');
            }
          }
                         
          if (jQuery.trim(placementProrateAdjustment) != '')
            { 
              var prorateAdjustmentPattern = /^-?(\d{1,3}(\,\d{3})*|(\d+))(\.\d{0,2})?$/;
              noCommasPlacementProrateAdjustment = placementProrateAdjustment;
                noCommasPlacementProrateAdjustment = noCommasPlacementProrateAdjustment.replace(/,/g, ''); 
                 
              if (noCommasPlacementProrateAdjustment.indexOf('.') == -1)
              {
                maxLength = 7
              }
              else
              { 
                maxLength = 10
              }
                    
                if (placementProrateAdjustment.match(prorateAdjustmentPattern) != null && jQuery.trim(noCommasPlacementProrateAdjustment).length <= maxLength)
                  {
                  noCommasPlacementProrate = placementProrate.replace('$', '');
                  noCommasPlacementProrate = noCommasPlacementProrate.replace(/,/g, '');  
                    
                    if ((Number(noCommasPlacementProrateAdjustment) + Number(noCommasPlacementProrate)).toFixed(2) < 0)
                    {
                        isValid = false;
                      errorList.append('<li>Please enter a valid Prorate Adjustment Amount (Prorate Total cannot be a negative amount)</li>');
                        }
                }
                else
                {
                    isValid = false;
                errorList.append('<li>Please enter a valid Prorate Adjustment Amount</li>');
              }
          }

          if (j('[id$=placementRentHold]:checked').val() == '1' && placementRentHoldReason == '')
          {
            isValid = false;
            errorList.append('<li>Please enter the Rent Hold Reason</li>');
          }  

          if (j('[id$=placementInvoiceHold]:checked').val() == '1' && placementInvoiceHoldReason == '')
          {
            isValid = false;
            errorList.append('<li>Please enter the Invoice Hold Reason</li>');
          } 

          if (placementStatus == 'Moved-In' && jQuery.trim(placementNTVSendTo) == '' && selectedHousingSearchFurnitureOption != 'Furniture Only')
          {
            isValid = false;
            errorList.append('<li>Please enter a valid NTV Send To</li>');
          }
     
          if (isValid == true)
          { 
            processing(); 
                updatePlacement();
            }
            else
            {
                return false;
            }        
        }

        function clientUpdatePlacementLandlord()
        {
          var isValid = true;
          var errorList = j('#placement-error-list');
          var placementLandlordId = j('[id$=placementLandlord_lkid]').val();
          var placementLandlordText = j('[id$=placementLandlord]').val();
          var placementStatus = j('[id$=placementStatus]').text();

          errorList.empty();

          if (placementStatus == 'Moved-In' && (jQuery.trim(placementLandlordId) == '000000000000000' || jQuery.trim(placementLandlordId) == '' || placementLandlordText == '')) 
          {
            isValid = false;
            errorList.append('<li>Please enter a valid Landlord</li>');
          } 

          if (isValid == true)
          { 
            j('[id$=placementNTVSendTo]').val(j('[id$=placementLandlord]').val());
            j('[id$=placementNTVSendTo_lkid]').val(j('[id$=placementLandlord_lkid]').val());
            processing(); 
            updatePlacement();
          }
          else
          {
            return false;
          }        
        }

        function clientBuildQuote() 
        {
            var isValid = true;
            var errorList = j('#serviceRequest-error-list');
            var claimNumberOfAdults = j('[id$=claimNumberOfAdults]').text();
            var claimNumberOfChildren = j('[id$=claimNumberOfChildren]').text();
            var claimClaimNumber = j('[id$=claimClaimNumber]').text();
            var placementTHCSignedDateTime = j(ids.placementTHCSignedDateTime.selector).val();
            var activeFurnitureOrderStatus = j('[id$=hdnActiveFurnitureOrderStatus]').text();
            var selectedHousingSearchFurnitureOption = j('[id$=hdnSelectedHousingSearchFurnitureOption]').text();
            var selectedHousingSearchForeclosureCheck = j('[id$=hdnSelectedHousingSearchForeclosureCheck]').text();
            var hasFurnitureOrderCost = j('[id$=hdnHasFurnitureOrderCost]').text();

            errorList.empty();
             
            if (selectedHousingSearchFurnitureOption != 'Furniture Only')
            {
              if (jQuery.trim(placementTHCSignedDateTime) == '')
              {
                 isValid = false;
                 errorList.append('<li>You cannot create a quote without a THC Signed Date</li>');
              }
              else
              {
                var date = new Date();           
                var currentDateString = (date.getMonth()+1) + "/" + date.getDate() + "/" + date.getFullYear();
                var currentDate = new Date(currentDateString);
                placementTHCSignedDate = new Date(placementTHCSignedDateTime.substring(0,placementTHCSignedDateTime.indexOf(" ")));
                if (placementTHCSignedDate > currentDate)
                {
                  isValid = false;
                  errorList.append('<li>You cannot create a quote without a valid THC Signed Date</li>');
                }
              }

              if (selectedHousingSearchForeclosureCheck == 'false')
              {
                  isValid = false;
                  errorList.append('<li>You cannot create a quote without a Foreclosure Check</li>');
              }
                           
              if (jQuery.trim(claimClaimNumber) == '')
              {
                  isValid = false;
                  errorList.append('<li>You cannot create a quote without a Claim # entered on the claim</li>');
              }
               
              if (jQuery.trim(claimNumberOfAdults) == '')
              {
                  isValid = false;
                  errorList.append('<li>You cannot create a quote without Number of Adults entered on the claim</li>');
              }
               
              if (jQuery.trim(claimNumberOfChildren) == '')
              {
                  isValid = false;
                  errorList.append('<li>You cannot create a quote without Number of Children entered on the claim</li>');
              }
                       
              if (activeFurnitureOrderStatus == 'Working')
              {
                  isValid = false;
                  errorList.append('<li>You cannot create a quote with a furniture order in Working status</li>');    
              }
            }
             
            if (selectedHousingSearchFurnitureOption == 'Furniture Only' && activeFurnitureOrderStatus != 'Completed')
            {
                isValid = false;
                errorList.append('<li>You must have a completed furniture order to quote a Furniture Only placement</li>');        
            }
           
            if (activeFurnitureOrderStatus == 'Completed' && hasFurnitureOrderCost == 'false')
            {
               isValid = false;
               errorList.append('<li>You must enter a cost on the completed furniture order to create a quote</li>');     
            }
           
            if (isValid)
            {
               processing();
               buildQuote(selectedHousingSearchFurnitureOption);
            }
            else
            {
               return false;
            }
       }
                    
       function clientUpdateQuote() 
       {
         var quoteMarkup = j(ids.quoteMarkup.selector).text();
           var quoteMarkupAdjustment = j(ids.quoteMarkupAdjustment.selector).val();
             var markupAdjustmentPattern = /^-?(\d{1,3}(\,\d{3})*|(\d+))(\.\d{0,2})?$/;
          
         noCommasQuoteMarkupAdjustment = quoteMarkupAdjustment;
         noCommasQuoteMarkupAdjustment = noCommasQuoteMarkupAdjustment.replace(/,/g, ''); 
         
        
         if (noCommasQuoteMarkupAdjustment.indexOf('.') == -1)
         {
           maxLength = 7
         }
         else
         { 
           maxLength = 10
         }
            
         if (quoteMarkupAdjustment.match(markupAdjustmentPattern) != null && jQuery.trim(noCommasQuoteMarkupAdjustment).length <= maxLength)
         {
           noCommasQuoteMarkup = quoteMarkup.replace('$', '');
           noCommasQuoteMarkup = noCommasQuoteMarkup.replace(/,/g, '');  
            
            var quoteMarkupTotal = (Number(noCommasQuoteMarkupAdjustment) + Number(noCommasQuoteMarkup)).toFixed(2);
        

               j(ids.quoteMarkupTotal.selector).text("$" + quoteMarkupTotal.replace(/\B(?=(\d{3})+(?!\d))/g, ","));

             }
             else
             {
               j(ids.quoteMarkupTotal.selector).text(quoteMarkup);
           }  
       }

       function clientClearPolicyholderDeclinedPropertyDateField()
       {
         if (j('[id$=housingSearchPolicyholderAcceptedPropertyDate]').val() != '' )
         {
           j('[id$=housingSearchPolicyholderDeclinedPropertyDate]').val('');
           clientTogglePolicyholderDeclinedPropertyReasonField()
         }
       }
          
           function clientToggleMarkupFields()
           {
             if (j('[id$=quoteMarkupAdjustment]').val().length > 0 )
             {
                 j('[id$=quoteMarkupAdjustmentReason]').attr("disabled","");
                   j('[id$=quoteMarkupAuthorizedBy]').attr("disabled","");
                   j('.lookupIcon').show();
           }
             else
             {
                   j('[id$=quoteMarkupAdjustmentReason]').val('');
                   j('[id$=quoteMarkupAdjustmentReason]').attr("disabled","disabled");
                   j('[id$=quoteMarkupAuthorizedBy]').val('');
                   j('[id$=quoteMarkupAuthorizedBy]').attr("disabled","disabled");
                   j('.lookupIcon').hide();
               }
           }

       function clientToggleReasonFields()
       {
         if (j('[id$=placementRentHold]:checked').val() == '1' || j('[id$=placementRentHoldRO]').is(":visible"))
         {
           if (j('[id$=placementRentHoldReason]').val() == '')
           { 
             j('.placementRentHoldReasonROSI').hide();  
             j('[id$=placementRentHoldReason]').attr("disabled","");
             toggleRequiredIndicator(j('[id$=placementRentHold]'), 'placementRentHoldReason');
           }
           else
           {
              j('.placementRentHoldReasonSI').hide();
           }
         }
         else
         {
           j('.placementRentHoldReasonROSI').hide(); 
           j('[id$=placementRentHoldReason]').val('');
           j('[id$=placementRentHoldReason]').attr("disabled","disabled");
         }

         if (j('[id$=placementInvoiceHold]:checked').val() == '1' || j('[id$=placementInvoiceHoldRO]').is(":visible"))
         {
           if (j('[id$=placementInvoiceHoldReason]').val() == '')
           { 
             j('.placementInvoiceHoldReasonROSI').hide(); 
             j('[id$=placementInvoiceHoldReason]').attr("disabled","");
             toggleRequiredIndicator(j('[id$=placementInvoiceHold]'), 'placementInvoiceHoldReason');
           }
           else
           {
              j('.placementInvoiceHoldReasonSI').hide();
           }
         }
         else
         {
           j('.placementInvoiceHoldReasonROSI').hide(); 
           j('[id$=placementInvoiceHoldReason]').val('');
           j('[id$=placementInvoiceHoldReason]').attr("disabled","disabled");
         }
       }
          
           function clientTogglePolicyholderDeclinedPropertyReasonField()
           {
             if (j('[id$=housingSearchPolicyholderDeclinedPropertyDate]').val() != '' )
             {
                 j('[id$=housingSearchPolicyholderDeclinedPropertyReason]').attr("disabled","");
         }
               else
               {
                   j('[id$=housingSearchPolicyholderDeclinedPropertyReason]').val('');
                   j('[id$=housingSearchPolicyholderDeclinedPropertyReason]').attr("disabled","disabled");
               }
           }

       function clientToggleTypeDescriptionField()
       {
         if (j('[id$=costType]').val() == 'Other' )
         {
           j('[id$=costTypeDescription]').attr("disabled","");
         }
         else
         {
           j('[id$=costTypeDescription]').val('');
           j('[id$=costTypeDescription]').attr("disabled","disabled");
         }
       }

       function clientToggleOver5milesReasonField()
       {
         if (parseFloat(j('[id$=housingSearchDistanceFromDamagedProp]').val()) > 5)
         {
           j('[id$=housingSearchOver5milesReason]').attr("disabled","");
         
           
         }
         else
         {
           j('[id$=housingSearchOver5milesReason]').val('');
           j('[id$=housingSearchOver5milesReason]').attr("disabled","disabled");
         }
       }

       function clientToggleWhatIsIncludedInTheProratedRentField()
       {
         if (j('[id$=housingSearchFirstMonthProratedRentAmountDue]').val() != '' )
         {
           j('[id$=housingSearchWhatIsIncludedInTheProratedRent]').attr("disabled","");
         }
         else
         {
           j('[id$=housingSearchWhatIsIncludedInTheProratedRent]').val('');
           j('[id$=housingSearchWhatIsIncludedInTheProratedRent]').attr("disabled","disabled");
         }
       }

       function clientTogglePetsAllowedPetFeeFields()
       {
         if (j('[id$=housingSearchPetsAllowed]:checked').val() == '1') 
         {
           j('[id$=housingSearchNumberOfPetsAllowed]').attr("disabled","");
           j('[id$=housingSearchTotalPetFees]').attr("disabled","");
           j('[id$=housingSearchPetRSD]').attr("disabled","");
         }        
         else
         {
           j('[id$=housingSearchNumberOfPetsAllowed]').val('');
           j('[id$=housingSearchNumberOfPetsAllowed]').attr("disabled","disabled");
           j('[id$=housingSearchTotalPetFees]').val('');
           j('[id$=housingSearchTotalPetFees]').attr("disabled","disabled");
           j('[id$=housingSearchPetRSD]').val('');
           j('[id$=housingSearchPetRSD]').attr("disabled","disabled");
         }
       }

       function clientToggleRentIncreaseToAfterILTField()
       {
         if (j('[id$=housingSearchRentIncreaseAfterILT]:checked').val() == '1') 
         {
            j('[id$=housingSearchRentIncreaseToAfterILT]').attr("disabled","");
         }
         else
         {
           j('[id$=housingSearchRentIncreaseToAfterILT]').val('');
           j('[id$=housingSearchRentIncreaseToAfterILT]').attr("disabled","disabled");
         }
       }

       function clientToggleWhatUtilitiesIncludedInRentField()
       {
         if (j('[id$=housingSearchUtilitiesIncludedInRent]:checked').val() == '1') 
         {
            j('[id$=housingSearchWhatUtilitiesIncludedInRent]').attr("disabled","");
         }
         else
         {
           j('[id$=housingSearchWhatUtilitiesIncludedInRent]').val('');
           j('[id$=housingSearchWhatUtilitiesIncludedInRent]').attr("disabled","disabled");
         }
       }

       function clientToggleAppliancesCRSNeedsToProvideField()
       {
         if (j('[id$=housingSearchAppliancesPresentInRentalProperty]:checked').val() == '1') 
         {
            j('[id$=housingSearchAppliancesCRSNeedsToProvide]').attr("disabled","");
         }
         else
         {
           j('[id$=housingSearchAppliancesCRSNeedsToProvide]').val('');
           j('[id$=housingSearchAppliancesCRSNeedsToProvide').attr("disabled","disabled");
         }
       }

       
       function clientToggleCertificateOfOccupancyFeeField()
       {
         if (j('[id$=housingSearchCertificateOfOccupancyRequired]:checked').val() == '1') 
         {
            j('[id$=housingSearchCertificateOfOccupancyFee]').attr("disabled","");
         }
         else
         {
           j('[id$=housingSearchCertificateOfOccupancyFee]').val('');
           j('[id$=housingSearchCertificateOfOccupancyFee').attr("disabled","disabled");
         }
       }

       function clientToggleNTVSendToField()
       {
         if (j('[id$=housingSearchLandlord]').val() != '')
         {
             j('[id$=housingSearchNTVSendTo]').attr("disabled","");
             j('[id$=housingSearchNTVSendTo]').parent().children().children().show()
         }
         else
         {
            j('[id$=housingSearchNTVSendTo]').val('');
            j('[id$=housingSearchNTVSendTo]').attr("disabled","disabled");
            j('[id$=housingSearchNTVSendTo]').parent().children().children().hide();
         }
       }

       function clientSetNTVSendToField()
       {
         if (j('[id$=housingSearchLandlord]').val() != '')
         {
            j('[id$=housingSearchNTVSendTo_lkid]').val(j('[id$=housingSearchLandlord_lkid]').val());
            j('[id$=housingSearchNTVSendTo]').val(j('[id$=housingSearchLandlord]').val()); 
            j('[id$=housingSearchNTVSendTo]').attr("disabled","");
            j('[id$=housingSearchNTVSendTo]').parent().children().children().show()
         }
         else
         {
            j('[id$=housingSearchNTVSendTo]').val('');
            j('[id$=housingSearchNTVSendTo]').attr("disabled","disabled");
            j('[id$=housingSearchNTVSendTo]').parent().children().children().hide();
         }
       }

       function toggleAddHousingSearchButtonVisibility(housingSearchField,serviceRequestDWOReasonCode,serviceRequestStatus,serviceRequestOpportunity, isPlacementMovedOut,srOnHold,button)
       {
         if (housingSearchField == 'false' && (serviceRequestDWOReasonCode == '' || serviceRequestDWOReasonCode == null) && serviceRequestStatus != 'Lost Opportunity' && isPlacementMovedOut == 'false' && serviceRequestOpportunity != '' && srOnHold == 'false')
         {
           button.show();
         }
         else
         {
           button.hide();
           if (serviceRequestStatus == 'Lost Opportunity')
           {
             j('.selectedHouse').attr('disabled','disabled') 
           }
           else
           {
             if (housingSearchField == 'true')
               {
                 j('.selectedHouse').not(':checked').attr('disabled', 'disabled')
               }
           }
         }
       }
      
      function toggleAddFurnitureOnlySearchButtonVisibility(housingSearchField,serviceRequestDWOReasonCode,serviceRequestStatus,serviceRequestOpportunity, isPlacementMovedOut,srOnHold,button)
      {
         if (housingSearchField == 'false' && (serviceRequestDWOReasonCode == '' || serviceRequestDWOReasonCode == null) && serviceRequestStatus != 'Lost Opportunity' && isPlacementMovedOut == 'false' && serviceRequestOpportunity != '' && srOnHold == 'false')
         {
            button.show();
         }
         else
         {
             button.hide();
            if (serviceRequestStatus == 'Lost Opportunity')
            {
                j('.selectedHouse').attr('disabled','disabled') 
            }
            else
            {
                if (housingSearchField == 'true')
                {
                   j('.selectedHouse').not(':checked').attr('disabled', 'disabled')
                }
            }
         }
      }
            
      function toggleAddFurnitureOrderButtonVisibility(placementStatus,activeFurnitureOrderStatus,hasActiveQuote,srOnHold,button)
      {
          if (activeFurnitureOrderStatus == '' && ((hasActiveQuote == 'false' && placementStatus == 'Pending Confirmation' || placementStatus == 'Searching' ||  placementStatus == 'Viewing') || placementStatus == 'Moved-In') && srOnHold == 'false')
          {
              button.show(); 
          }
          else
          {
              button.hide();
          }
      }
                     
      function toggleCreateQuoteButtonVisibility(placementStatus,hasActiveQuote,button)
      {
          if (placementStatus == 'Pending Confirmation' && hasActiveQuote == 'false')
          {
              button.show();
          }
          else
          {
              button.hide();
          }
      }

      function toggleGenerateCreditCardButtonVisibility(placementStatus,isBillingSpecialist,button)
      {
          if (j('[id$=placementCreditCardType]').text() == '' && (placementStatus == 'Searching' || placementStatus == 'Viewing' || placementStatus == 'Pending Confirmation' || placementStatus == 'Quote' || isBillingSpecialist == 'true')) 
          {
              button.show();
          }
          else
          {
              button.hide();   
          }
      }

      function toggleCommandButtons()
      {
          var housingSearchField = j('[id$=hdnHasSelectedHousingSearch]').text();
          var serviceRequestStatus = j(ids.serviceRequestStatus.selector).text();
          var placementStatus = j(ids.placementStatus.selector).text();
          var serviceRequestDWOReasonCode = j(ids.serviceRequestDWOReasonCode.selector).val();
          var serviceRequestOpportunity = ids.serviceRequestOpportunity;
          var isPlacementMovedOut = j('[id$=hdnIsPlacementMovedOut]').text();
          var activeFurnitureOrderStatus = j('[id$=hdnActiveFurnitureOrderStatus]').text();
          var hasActiveQuote = j('[id$=hdnHasActiveQuote]').text();
          var srOnHold = j('[id$=hdnSROnHold]').text();
          var isBillingSpecialist = j('[id$=hdnIsBillingSpecialist]').text();
                                                  
          toggleAddHousingSearchButtonVisibility(housingSearchField,serviceRequestDWOReasonCode,serviceRequestStatus,serviceRequestOpportunity,isPlacementMovedOut,srOnHold,ids.btnAddHousingSearch);
          toggleAddFurnitureOnlySearchButtonVisibility(housingSearchField,serviceRequestDWOReasonCode,serviceRequestStatus,serviceRequestOpportunity,isPlacementMovedOut,srOnHold,ids.btnAddFurnitureOnlySearch);
          toggleAddFurnitureOrderButtonVisibility(placementStatus,activeFurnitureOrderStatus,hasActiveQuote,srOnHold,ids.btnAddFurnitureOrder);
          toggleCreateQuoteButtonVisibility(placementStatus,hasActiveQuote,ids.btnCreateQuote);
          toggleGenerateCreditCardButtonVisibility(placementStatus,isBillingSpecialist,ids.btnGenerateCreditCard);
      }
      
      function togglePageBlockSections()
      {
          var hasSelectedHousingSearch = j('[id$=hdnHasSelectedHousingSearch]').text();
          var hasFurnitureOrder = j('[id$=hdnHasFurnitureOrder]').text();
          var hasQuote = j('[id$=hdnHasQuote]').text();
          var furnitureOrdersPBS = j('[id$=furnitureOrdersPBS]');
          var quotesPBS = j('[id$=quotesPBS]');
          var housingExtensionsPBS = j('[id$=housingExtensionsPBS]');
          var placementStatus = j('[id$=placementStatus]').text();
          var isHighPriority = j('[id$=serviceRequestHighPriority]:checked').val();
          var serviceRequestPBS2 =  j('[id$=serviceRequestPBS2]'); 
                              
          if (hasSelectedHousingSearch == 'true')
          {
             furnitureOrdersPBS.show();
             quotesPBS.show();
          }
          else
          {
             if (hasFurnitureOrder == 'true')
             {
                furnitureOrdersPBS.show();
             }
             else
             {
                furnitureOrdersPBS.hide();
             }
             if (hasQuote == 'true') 
             {
                quotesPBS.show();
             }
             else
             {
                quotesPBS.hide();
             }    
          }
          
          if (placementStatus == 'Moved-In' || placementStatus == 'Moved-Out')
          {
            housingExtensionsPBS.show();
            
          }
          else
          {
            housingExtensionsPBS.hide();
          }
          
          if (isHighPriority == '1')
          {
            serviceRequestPBS2.show();
          }
          else
          {
            serviceRequestPBS2.hide();
          }
      }   

      function clientToggleCostPageLayout()
      {
        var costRecordType = j(ids.costRecordTypeId.selector).text();
        var costId = j(ids.costId.selector).val();
        var costType = j(ids.costType.selector).val();
        var currentPolicyholder = j('[id$=housingSearchPolicyholderForCosts]').val();  
        var currentPolicyholderName = j('[id$=housingSearchPolicyholderNameForCosts]').val();
        var currentLandlord = j('[id$=housingSearchLandlordForCosts]').val();  
        var currentLandlordrName = j('[id$=housingSearchLandlordNameForCosts]').val(); 
        var currentAdjuster = j('[id$=housingSearchAdjusterForCosts]').val();  
        var currentAdjusterName = j('[id$=housingSearchAdjusterNameForCosts]').val();   

        if (costRecordType == 'Cost')
        {  
          if (jQuery.trim(costType) == 'Policyholder Rent')
          {
            j('[id$=costPayableParty]').val('');
            j('[id$=costPayableParty_lkid]').val('');
            j('[id$=costBillableParty]').val(currentPolicyholderName);
            j('[id$=costBillableParty_lkid]').val(currentPolicyholder.substring(0,15));

            j('[id$=costBillableParty]').attr("disabled","disabled");
            j('[id$=costPayableParty]').attr("disabled","disabled");
            j('[id$=costProrateType] option[value="Daily"]').remove();
            j('.lookupIcon').hide();
            if (costId != '')
            { 
              j('[id$=costType]').attr("disabled","disabled");   
            }
          }
          else
          {
            j('[id$=costBillableParty]').attr("disabled","");
            j('[id$=costPayableParty]').attr("disabled","");
            if (j('[id$=costProrateType]').children('option').length == 1 && jQuery.trim(costType) != 'PH Abatement')
            {  
              j('[id$=costProrateType]').prepend('<option value="Daily">Daily</option>');
            }
            j('.lookupIcon').show();
       
            if (costId == '')
            {  
              j('[id$=costPayableParty]').val(currentLandlordrName);
              j('[id$=costPayableParty_lkid]').val(currentLandlord.substring(0,15));
              j('[id$=costBillableParty]').val(currentAdjusterName);
              j('[id$=costBillableParty_lkid]').val(currentAdjuster.substring(0,15));
            }
            else
            {
              j('[id$=costType]').attr("disabled","disabled");
            }  
          }

          if (jQuery.trim(costType) == 'PH Abatement')
          {
            
            j('[id$=costProrateType] option[value="Daily"]').remove(); 
          }
          else
          {
            if (j('[id$=costProrateType]').children('option').length == 1 && jQuery.trim(costType) != 'Policyholder Rent')
            {  
              j('[id$=costProrateType]').prepend('<option value="Daily">Daily</option>');
            }
          }
        }
      }
                
            function clientSaveHousingSearch()
            {
              var isValid = true;
              var errorList = j('#housing-search-error-list');
              var housingSearchId = j(ids.housingSearchId.selector).val();
              var housingSearchPresentedToAdjuster = j(ids.housingSearchPresentedToAdjuster.selector).val();
              var housingSearchPropertyType = j(ids.housingSearchPropertyType.selector).val();
              var housingSearchFurnitureOption = j(ids.housingSearchFurnitureOption.selector).val();
              var housingSearchPresentedDateTime = j(ids.housingSearchPresentedDateTime.selector).val();
              var housingSearchLandlordId = j(ids.housingSearchLandlordId.selector).val();
              var housingSearchLandlordText = j(ids.housingSearchLandlordText.selector).val();
              var housingSearchStreetAddress1 = j(ids.housingSearchStreetAddress1.selector).val();
              var housingSearchStreetAddress2 = j(ids.housingSearchStreetAddress2.selector).val();
              var housingSearchCity = j(ids.housingSearchCity.selector).val();
              var housingSearchState = j(ids.housingSearchState.selector).val();
              var housingSearchZip = j(ids.housingSearchZip.selector).val();
              var housingSearchCountry = j(ids.housingSearchCountry.selector).val();
              var housingSearchDistanceFromDamagedProp = j(ids.housingSearchDistanceFromDamagedProp.selector).val();
              var housingSearchForecloserCheck = j('[id$=housingSearchForecloserCheck]').attr('checked');
              var housingSearchPropertyDescription = j(ids.housingSearchPropertyDescription.selector).val();
              var housingSearchTHCComments = j(ids.housingSearchTHCComments.selector).val();
              var housingSearchDaysNoticeRequired = j(ids.housingSearchDaysNoticeRequired.selector).val();
              var housingSearchInitialCheckDeliveryMethod = j(ids.housingSearchInitialCheckDeliveryMethod.selector).val();
              var housingSearchSendCopyOfCheck = j('[id$=housingSearchSendCopyOfCheck]').attr('checked');
              var housingSearchSendCopyOfTrackingInformation = j('[id$=housingSearchSendCopyOfTrackingInformation]').attr('checked');
              var housingSearchInitialPaymentType = j(ids.housingSearchInitialPaymentType.selector).val();
              var housingSearchBedrooms = j(ids.housingSearchBedrooms.selector).val();
              var housingSearchNameOfComplex = j(ids.housingSearchNameOfComplex.selector).val();
              var housingSearchUnit = j(ids.housingSearchUnit.selector).val();
              var housingSearchInitialContactName = j(ids.housingSearchInitialContactName.selector).val();
              var housingSearchInitialContactNumber = j(ids.housingSearchInitialContactNumber.selector).val();
              var housingSearchBathrooms = j(ids.housingSearchBathrooms.selector).val();
              var housingSearchSquareFeet = j(ids.housingSearchSquareFeet.selector).val();
              var housingSearchPetsAllowed = j('[id$=housingSearchPetsAllowed]').attr('checked');
              var housingSearchWoodFloors = j('[id$=housingSearchWoodFloors]').attr('checked');
              var housingSearchElevatorReservationRequired = j('[id$=housingSearchElevatorReservationRequired]').attr('checked');
              var housingSearchBedrooms = j(ids.housingSearchBedrooms.selector).val();
              var housingSearchExtensionIncrementDays = j(ids.housingSearchExtensionIncrementDays.selector).val();
              var housingSearchRecurringPaymentType = j(ids.housingSearchRecurringPaymentType.selector).val();
              var housingSearchNTVSendVia = j(ids.housingSearchNTVSendVia.selector).val();
              var housingSearchNTVSendTo = j(ids.housingSearchNTVSendTo.selector).val();
              var housingSearchPolicyholderAcceptedPropertyDate = j(ids.housingSearchPolicyholderAcceptedPropertyDate.selector).val();
              var housingSearchPolicyholderDeclinedPropertyDate = j(ids.housingSearchPolicyholderDeclinedPropertyDate.selector).val();
              var housingSearchPolicyholderDeclinedPropertyReason = j(ids.housingSearchPolicyholderDeclinedPropertyReason.selector).val();
              var housingSearchOver5milesReason = j(ids.housingSearchOver5milesReason.selector).val();
              var housingSearchLeaseTermApproveByAdj = j(ids.housingSearchLeaseTermApproveByAdj.selector).val();
              var housingSearchFirstAvailableMoveInDate = j(ids.housingSearchFirstAvailableMoveInDate.selector).val();
              var housingSearchTentativeMoveOutDate = j(ids.housingSearchTentativeMoveOutDate.selector).val();
              var housingSearchRentFrequency = j(ids.housingSearchRentFrequency.selector).val();
              var housingSearchFirstMonthProratedRentAmountDue = j(ids.housingSearchFirstMonthProratedRentAmountDue.selector).val();
              var housingSearchWhatIsIncludedInTheProratedRent = j(ids.housingSearchWhatIsIncludedInTheProratedRent.selector).val();
              var housingSearchRSD = j(ids.housingSearchRSD.selector).val();
              var housingSearchResponsiblePartyForRSD = j(ids.housingSearchResponsiblePartyForRSD.selector).val();
              var housingSearchSureDeposit = j(ids.housingSearchSureDeposit.selector).val();
              var housingSearchApplicationFee = j(ids.housingSearchApplicationFee.selector).val();
              var housingSearchTax = j(ids.housingSearchTax.selector).val();
              var housingSearchCleaningFee = j(ids.housingSearchCleaningFee.selector).val();
              var housingSearchAmenityFee = j(ids.housingSearchAmenityFee.selector).val();
              var housingSearchAdministrationFee = j(ids.housingSearchAdministrationFee.selector).val();
              var housingSearchReKeyingFee = j(ids.housingSearchReKeyingFee.selector).val();
              var housingSearchBreakLeaseFee = j(ids.housingSearchBreakLeaseFee.selector).val();
              var housingSearchGarageRemoteFee = j(ids.housingSearchGarageRemoteFee.selector).val();
              var housingSearchFencingFee = j(ids.housingSearchFencingFee.selector).val();
              var housingSearchNumberOfPetsAllowed = j(ids.housingSearchNumberOfPetsAllowed.selector).val();
              var housingSearchTotalPetFees = j(ids.housingSearchTotalPetFees.selector).val();
              var housingSearchPetRSD = j(ids.housingSearchPetRSD.selector).val();
              var housingSearchDaysNoticeRequiredAfterILT = j(ids.housingSearchDaysNoticeRequiredAfterILT.selector).val();
              var housingSearchRentIncreaseAfterILT = j('[id$=housingSearchRentIncreaseAfterILT]').attr('checked');
              var housingSearchRentIncreaseToAfterILT = j(ids.housingSearchRentIncreaseToAfterILT.selector).val();
              var housingSearchProcessingTimeForApplication = j(ids.housingSearchProcessingTimeForApplication.selector).val();
              var housingSearchRequirementsForQualification = j(ids.housingSearchRequirementsForQualification.selector).val();
              var housingSearchUtilitiesPHIsResponsibleFor = j(ids.housingSearchUtilitiesPHIsResponsibleFor.selector).val();
              var housingSearchAppliancesCRSNeedsToProvide = j(ids.housingSearchAppliancesCRSNeedsToProvide.selector).val();
              var housingSearchApplianceHookUpGasElectric = j(ids.housingSearchApplianceHookUpGasElectric.selector).val();
              var housingSearchUtilitySetUpFee = j(ids.housingSearchUtilitySetUpFee.selector).val();
              var housingSearchBrokerFee = j(ids.housingSearchBrokerFee.selector).val();
              var housingSearchWindowCoveringFee = j(ids.housingSearchWindowCoveringFee.selector).val();
              var housingSearchCertificateOfOccupancyFee = j(ids.housingSearchCertificateOfOccupancyFee.selector).val();
              var housingSearchParkingFee = j(ids.housingSearchParkingFee.selector).val();
              var housingSearchOtherNonRefundableFee = j(ids.housingSearchOtherNonRefundableFee.selector).val();
              var housingSearchPHAbatementAmount = j(ids.housingSearchPHAbatementAmount.selector).val();
              var housingSearchStartDateForPHAbatement = j(ids.housingSearchStartDateForPHAbatement.selector).val();
              var housingSearchResponsiblePartyForVendorEntry = j(ids.housingSearchResponsiblePartyForVendorEntry.selector).val();
              var housingSearchPhoneNumberToConfirmVendorEntry = j(ids.housingSearchPhoneNumberToConfirmVendorEntry.selector).val();
              var housingSearchPHViewed = j('[id$=housingSearchPHViewed]').attr('checked');
              var housingSearchRentersInsuranceRequired = j('[id$=housingSearchRentersInsuranceRequired]').attr('checked');
              var housingSearchDeclarationPageSufficient = j('[id$=housingSearchDeclarationPageSufficient]').attr('checked');
              var housingSearchRMUpdated = j('[id$=housingSearchRMUpdated]').attr('checked');
              var housingSearchRentalApplicationRequired = j('[id$=housingSearchRentalApplicationRequired]').attr('checked');
              var housingSearchUtilitiesIncludedInRent = j('[id$=housingSearchUtilitiesIncludedInRent]').attr('checked');
              var housingSearchHowUtilitiesAreToBeEstablished = j(ids.housingSearchHowUtilitiesAreToBeEstablished.selector).val();
              var housingSearchLandscapingSnowRemovalHOAIncluded = j('[id$=housingSearchLandscapingSnowRemovalHOAIncluded]').attr('checked');
              var housingSearchAppliancesPresentInRentalProperty = j('[id$=housingSearchAppliancesPresentInRentalProperty]').attr('checked');
              var housingSearchWindowCoveringsPresent = j('[id$=housingSearchWindowCoveringsPresent]').attr('checked');
              var housingSearchPicturesAllowedOnWalls = j('[id$=housingSearchPicturesAllowedOnWalls]').attr('checked');
              var housingSearchFencedYard = j('[id$=housingSearchFencedYard]').attr('checked');
              var housingSearchCertificateOfOccupancyRequired = j('[id$=housingSearchCertificateOfOccupancyRequired]').attr('checked');
              var housingSearchFloorNumber = j(ids.housingSearchFloorNumber.selector).val();
              var housingSearchRent = j(ids.housingSearchRent.selector).val();
              var housingSearchWhatUtilitiesIncludedInRent = j(ids.housingSearchWhatUtilitiesIncludedInRent.selector).val();
              

              var states = 'AL:AK:AZ:AR:CA:CO:CT:DE:DC:FL:GA:HI:ID:IL:IN:IA:KS:KY:LA:ME:MD:MA:MI:MN:MS:MO:MT:NE:NV:NH:NJ:NM:NY:NC:ND:OH:OK:OR:PA:RI:SC:SD:TN:TX:UT:VT:VA:WA:WV:WI:WY:VI:GU:PR';
              var provinces = 'ON:QC:NS:NB:MB:PE:NL:AB:BC:SK';
              var dateTimePattern = /^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$/;
                    var zipCodePattern = /^\d{5}([\-]\d{4})?$/;
              var postalCodePattern = /^[A-Z]\d[A-Z][ ]?\d[A-Z]\d$/;
              var sfPattern = /^(\d{1,3}(\,\d{3})*|(\d+))?$/;
              var dfdpPattern = /^(\d{1}(\,\d{3})*|(\d+))(\.\d{0,2})?$/;
              var icnPattern = /^([a-zA-Z ]{0,50})$/
              
              var dnrPattern = /^\d{1,2}?$/;
              var eidPattern = /^\d{1,3}?$/;
              var dnrILTPattern = /^\d{1,2}?$/;
              var amountPattern = /^(\d{1,3}(\,\d{3})*|(\d+))(\.\d{0,2})?$/;
                            
              errorList.empty();
              
              // begin validations

              if (jQuery.trim(housingSearchPolicyholderDeclinedPropertyReason) == '')
              {
                // This is not a declined search so we do all required feilds validation
                if (jQuery.trim(housingSearchPresentedDateTime) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Presented Date</li>');
                }

                if (jQuery.trim(housingSearchPropertyType) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please select a Property Type</li>');
                }
                
                if (jQuery.trim(housingSearchFurnitureOption) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please select a Furniture Option</li>');
                }
                
                if (jQuery.trim(housingSearchStreetAddress1) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Street Address</li>');
                }
                
                if (jQuery.trim(housingSearchCity) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a City</li>');
                }
                
                if (jQuery.trim(housingSearchState) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a State</li>');
                }
                
                if (jQuery.trim(housingSearchZip) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Zip</li>');
                }
                
                if (jQuery.trim(housingSearchCountry) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Country</li>');
                }

                if (jQuery.trim(housingSearchSquareFeet) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter Square Feet</li>');
                }

                if (jQuery.trim(housingSearchBedrooms) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter number of Bedrooms</li>');
                }

                if (jQuery.trim(housingSearchBathrooms) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter number of Bathrooms</li>');
                }

                if (jQuery.trim(housingSearchDistanceFromDamagedProp) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter Distance from Damaged Property</li>');
                }

                if (jQuery.trim(housingSearchLeaseTermApproveByAdj) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter Lease Term Approved by ADJ</li>');
                }

                if (jQuery.trim(housingSearchFirstAvailableMoveInDate) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter First Available Move in Date</li>');
                }

                if (jQuery.trim(housingSearchTentativeMoveOutDate) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Tentative Move out Date</li>');
                }

                if (jQuery.trim(housingSearchRent) == ''  && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Rent Amount</li>');
                }

                if (jQuery.trim(housingSearchRentFrequency) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Rent Frequency</li>');
                }

                if (jQuery.trim(housingSearchRSD) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a RSD</li>');
                }

                if (jQuery.trim(housingSearchSureDeposit) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Sure Deposit</li>');
                }

                if (jQuery.trim(housingSearchApplicationFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter an Application Fee</li>');
                }

                if (jQuery.trim(housingSearchTax) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter Tax if applicable</li>');
                }

                if (jQuery.trim(housingSearchOtherNonRefundableFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter Other Non-Refundable Fee</li>');
                }

                if (jQuery.trim(housingSearchCleaningFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Cleaning Fee</li>');
                }

                if (jQuery.trim(housingSearchAmenityFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter an Amenity Fee</li>');
                }

                if (jQuery.trim(housingSearchAdministrationFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter an Administration Fee</li>');
                }

                if (jQuery.trim(housingSearchReKeyingFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Re-Keying Fee</li>');
                }

                if (jQuery.trim(housingSearchBreakLeaseFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Break Lease Fee</li>');
                }

                if (jQuery.trim(housingSearchGarageRemoteFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Garage Remote Fee</li>');
                }

                if (jQuery.trim(housingSearchFencingFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Fencing Fee</li>');
                }

                if (jQuery.trim(housingSearchDaysNoticeRequiredAfterILT) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter Days Notice Required after ILT</li>');
                }

                if (jQuery.trim(housingSearchProcessingTimeForApplication) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Processing time for Application</li>');
                }

                if (jQuery.trim(housingSearchRequirementsForQualification) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter Requirements for Qualification</li>');
                }

                if (jQuery.trim(housingSearchHowUtilitiesAreToBeEstablished) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter How utilities are to be established</li>');
                }

                if (jQuery.trim(housingSearchUtilitiesPHIsResponsibleFor) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter Utilities PH is responsible for</li>');
                }

                if (jQuery.trim(housingSearchApplianceHookUpGasElectric) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter Appliances Hook-up Gas/Electric</li>');
                }

                if (jQuery.trim(housingSearchInitialContactName) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter an Initial Contact Name</li>');
                }
                
                if (jQuery.trim(housingSearchInitialContactNumber) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter an Initial Contact Number</li>');
                }

                if (jQuery.trim(housingSearchUtilitySetUpFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Utility Set Up Fee</li>');
                }

                if (jQuery.trim(housingSearchBrokerFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Broker Fee</li>');
                }

                if (jQuery.trim(housingSearchWindowCoveringFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Window Covering Fee</li>');
                }

                if (jQuery.trim(housingSearchParkingFee) == '' && housingSearchPresentedToAdjuster == 'false')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Parking Fee</li>');
                }

                if (jQuery.trim(housingSearchPHAbatementAmount) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a PH Abatement Amount</li>');
                }

                if (jQuery.trim(housingSearchResponsiblePartyForVendorEntry) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Responsible Party for Vendor Entry</li>');
                }

                if (jQuery.trim(housingSearchPhoneNumberToConfirmVendorEntry) == '')
                {
                   isValid = false;
                   errorList.append('<li>Please enter a Phone Number to confirm Vendor Entry</li>');
                }
              }  

              if (jQuery.trim(housingSearchPresentedDateTime) != '')
              {
                 if (housingSearchPresentedDateTime.match(dateTimePattern) == null)
                 {
                    isValid = false;
                    errorList.append('<li>Please enter a valid Presented Date</li>');
                 }
                 else
                 {
                    var housingSearchPresentedDate = new Date(housingSearchPresentedDateTime.substring(0,housingSearchPresentedDateTime.indexOf(" ")));
                    var date = new Date();           
                        var currentDateString = (date.getMonth()+1) + "/" + date.getDate() + "/" + date.getFullYear();
                      var currentDate = new Date(currentDateString);
                    if (housingSearchPresentedDate > currentDate)
                    {
                        isValid = false;
                        errorList.append('<li>Presented Date cannot be a future date.</li>');
                    }
                      }                 
              }

              if (jQuery.trim(housingSearchPolicyholderAcceptedPropertyDate) != '')
              {
                 if (housingSearchPolicyholderAcceptedPropertyDate.match(dateTimePattern) == null)
                 {
                  isValid = false;
                    errorList.append('<li>Please enter a valid Accepted Date</li>');
                 }
                 else
                 {
                  var housingSearchPolicyholderAcceptedPropertyDateOnly = new Date(housingSearchPolicyholderAcceptedPropertyDate.substring(0,housingSearchPolicyholderAcceptedPropertyDate.indexOf(" ")));
                  var date = new Date();           
                  var currentDateString = (date.getMonth()+1) + "/" + date.getDate() + "/" + date.getFullYear();
                  var currentDate = new Date(currentDateString);
                  if (housingSearchPolicyholderAcceptedPropertyDateOnly > currentDate)
                  {
                    isValid = false;
                    errorList.append('<li>Accepted Date cannot be a future date.</li>');
                  }
                }               
              }

              if (jQuery.trim(housingSearchPolicyholderDeclinedPropertyDate) != '')
              {
                 if (housingSearchPolicyholderDeclinedPropertyDate.match(dateTimePattern) == null)
                 {
                  isValid = false;
                    errorList.append('<li>Please enter a valid Declined Date</li>');
                 }
                 else
                 {
                  var housingSearchPolicyholderDeclinedPropertyDateOnly = new Date(housingSearchPolicyholderDeclinedPropertyDate.substring(0,housingSearchPolicyholderDeclinedPropertyDate.indexOf(" ")));
                  var date = new Date();           
                  var currentDateString = (date.getMonth()+1) + "/" + date.getDate() + "/" + date.getFullYear();
                  var currentDate = new Date(currentDateString);
                  if (housingSearchPolicyholderDeclinedPropertyDateOnly > currentDate)
                  {
                    isValid = false;
                    errorList.append('<li>Declined Date cannot be a future date.</li>');
                  }
                }               
              }

              if (jQuery.trim(housingSearchCountry) != '' && (jQuery.trim(j('[id$=housingSearchCountry]').val().toLowerCase())) != 'usa' && (jQuery.trim(j('[id$=housingSearchCountry]').val().toLowerCase())) != 'canada')
              {
                 isValid = false;
                 errorList.append('<li>Country must be must be USA or Canada</li>');
              }
              
              if (jQuery.trim(housingSearchState) != '' && jQuery.trim(housingSearchState).length == 2 && jQuery.trim(j('[id$=housingSearchCountry]').val().toLowerCase()) == 'usa' && states.indexOf(housingSearchState) == -1 || jQuery.trim(housingSearchState) != '' && jQuery.trim(housingSearchState).length != 2 && jQuery.trim(j('[id$=housingSearchCountry]').val().toLowerCase()) == 'usa')
              {
                isValid = false;
                errorList.append('<li>The current Billing State/Province is invalid for the current Billing Country. Valid states are AL,AK,AZ,AR,CA,CO,CT,DE,DC,FL,GA,HI,ID,IL,IN,IA,KS,KY,LA,ME,MD,MA,MI,MN,MS,MO,MT,NE,NV,NH,NJ,NM,NY,NC,ND,OH,OK,OR,PA,</br>RI,SC,SD,TN,TX,UT,VT,VA,WA,WV,WI,WY,VI,GU,PR</li>');
              }

              if (jQuery.trim(housingSearchState) != '' && jQuery.trim(housingSearchState).length == 2 && jQuery.trim(j('[id$=housingSearchCountry]').val().toLowerCase()) == 'canada' && provinces.indexOf(housingSearchState) == -1 || jQuery.trim(housingSearchState) != '' && jQuery.trim(housingSearchState).length != 2 && jQuery.trim(j('[id$=housingSearchCountry]').val().toLowerCase()) == 'canada')
              {
                isValid = false;
                errorList.append('<li>The current Billing State/Province is invalid for the current Billing Country. Valid provinces are ON,QC,NS,NB,MB,PE,NL,AB,BC,SK</li>');
              }
              
              if (jQuery.trim(housingSearchZip) != '' && jQuery.trim(j('[id$=housingSearchCountry]').val().toLowerCase()) == 'usa' && housingSearchZip.match(zipCodePattern) == null)
               {
                 isValid = false;
                 errorList.append('<li>Zip/Postal code must be in 99999 or 99999-9999 format.</li>');
              }
              
              if (jQuery.trim(housingSearchZip) != '' && jQuery.trim(j('[id$=housingSearchCountry]').val().toLowerCase()) == 'canada' && housingSearchZip.match(postalCodePattern) == null)
              {
                 isValid = false;
                 errorList.append('<li>Zip/Postal code must be in A9A 9A9 format.</li>');
              }

              noCommasSF = housingSearchSquareFeet.replace(/,/g, '');
                           
              if (jQuery.trim(housingSearchSquareFeet) != '' && housingSearchSquareFeet.match(sfPattern) == null || jQuery.trim(noCommasSF).length > 7)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid Square Feet value.</li>');
              }
              
              noCommasdfdp = housingSearchDistanceFromDamagedProp.replace(/,/g, '');
              if (noCommasdfdp.indexOf('.') == -1)
              {
                maxLength = 4
              }
              else
              {
                maxLength = 7
              }
              
              if (jQuery.trim(housingSearchDistanceFromDamagedProp) != '' && housingSearchDistanceFromDamagedProp.match(dfdpPattern) == null || jQuery.trim(noCommasdfdp).length > maxLength)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid Distance from Damaged Property</li>');
              }

              
              if (jQuery.trim(housingSearchFirstAvailableMoveInDate) != '' && housingSearchFirstAvailableMoveInDate.match(dateTimePattern) == null)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid First Available Move in Date</li>');
              }

              if (jQuery.trim(housingSearchTentativeMoveOutDate) != '' && housingSearchTentativeMoveOutDate.match(dateTimePattern) == null)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid Tentative Move out Date</li>');
              }

              if (housingSearchPresentedToAdjuster == 'false')
              {  
                noCommas = housingSearchRent.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }
                
                if (jQuery.trim(housingSearchRent) != '' && housingSearchRent.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Rent</li>');
                }
              }

              noCommas = housingSearchFirstMonthProratedRentAmountDue.replace(/,/g, '');
              if (noCommas.indexOf('.') == -1)
              {
                maxLength = 7
              }
              else
              {
                maxLength = 10
              }
              
              if (jQuery.trim(housingSearchFirstMonthProratedRentAmountDue) != '' && housingSearchFirstMonthProratedRentAmountDue.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid 1st Month Prorated Rent Amount Due</li>');
              }

              if (housingSearchPresentedToAdjuster == 'false')
              {  
                
                noCommas = housingSearchRSD.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }
                
                if (jQuery.trim(housingSearchRSD) != '' && housingSearchRSD.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid RSD</li>');
                }

                noCommas = housingSearchSureDeposit.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }
                
                if (jQuery.trim(housingSearchSureDeposit) != '' && housingSearchSureDeposit.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Sure Deposit</li>');
                }

                noCommas = housingSearchApplicationFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }
                
                if (jQuery.trim(housingSearchApplicationFee) != '' && housingSearchApplicationFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Application Fee</li>');
                }

                noCommas = housingSearchTax.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }
                
                if (jQuery.trim(housingSearchTax) != '' && housingSearchTax.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Tax if applicable</li>');
                }

                noCommas = housingSearchOtherNonRefundableFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }
                
                if (jQuery.trim(housingSearchOtherNonRefundableFee) != '' && housingSearchOtherNonRefundableFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Other Non-Refundable Fee</li>');
                }

                noCommas = housingSearchCleaningFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchCleaningFee) != '' && housingSearchCleaningFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Cleaning Fee</li>');
                }

                noCommas = housingSearchAmenityFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchAmenityFee) != '' && housingSearchAmenityFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Amenity Fee</li>');
                }

                noCommas = housingSearchAdministrationFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchAdministrationFee) != '' && housingSearchAdministrationFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Administration Fee</li>');
                }

                noCommas = housingSearchReKeyingFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchReKeyingFee) != '' && housingSearchReKeyingFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Re-Keying Fee</li>');
                }

                noCommas = housingSearchBreakLeaseFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchBreakLeaseFee) != '' && housingSearchBreakLeaseFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Break Lease Fee</li>');
                }

                noCommas = housingSearchGarageRemoteFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchGarageRemoteFee) != '' && housingSearchGarageRemoteFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Garage Remote Fee</li>');
                }

                noCommas = housingSearchFencingFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchFencingFee) != '' && housingSearchFencingFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Fencing Fee</li>');
                }

                noCommas = housingSearchTotalPetFees.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchTotalPetFees) != '' && housingSearchTotalPetFees.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Total Pet Fees</li>');
                }

                noCommas = housingSearchPetRSD.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchPetRSD) != '' && housingSearchPetRSD.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Pet RSD</li>');
                }
           
              }

            
              if (jQuery.trim(housingSearchDaysNoticeRequired) != '' && housingSearchDaysNoticeRequired .match(dnrPattern) == null)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid Days Notice Required</li>');
              }
              
              if (jQuery.trim(housingSearchExtensionIncrementDays) != '' && housingSearchExtensionIncrementDays.match(eidPattern) == null)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid Extension Increment Days value</li>');
              }

              if (jQuery.trim(housingSearchDaysNoticeRequiredAfterILT) != '' && housingSearchDaysNoticeRequiredAfterILT.match(dnrILTPattern) == null)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid Days Notice Required after ILT</li>');
              }

              if (jQuery.trim(housingSearchInitialContactName) != '' && housingSearchInitialContactName.match(icnPattern) == null)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid Initial Contact Name</li>');
              }


              if (housingSearchPresentedToAdjuster == 'false')
              {  

                noCommas = housingSearchUtilitySetUpFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchUtilitySetUpFee) != '' && housingSearchUtilitySetUpFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Utility Set Up Fee</li>');
                }

                noCommas = housingSearchBrokerFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchBrokerFee) != '' && housingSearchBrokerFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Broker Fee</li>');
                }

                noCommas = housingSearchWindowCoveringFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchWindowCoveringFee) != '' && housingSearchWindowCoveringFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Window Covering Fee</li>');
                }

                noCommas = housingSearchCertificateOfOccupancyFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchCertificateOfOccupancyFee) != '' && housingSearchCertificateOfOccupancyFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Certificate of Occupancy Fee</li>');
                }

                noCommas = housingSearchParkingFee.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchParkingFee) != '' && housingSearchParkingFee.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid Parking Fee</li>');
                }

                noCommas = housingSearchPHAbatementAmount.replace(/,/g, '');
                if (noCommas.indexOf('.') == -1)
                {
                  maxLength = 7
                }
                else
                {
                  maxLength = 10
                }        
                if (jQuery.trim(housingSearchPHAbatementAmount) != '' && housingSearchPHAbatementAmount.match(amountPattern) == null || jQuery.trim(noCommas).length > maxLength)
                {
                   isValid = false;
                   errorList.append('<li>Please enter a valid PH Abatement Amount</li>');
                }

              }    

              if (jQuery.trim(housingSearchStartDateForPHAbatement) != '' && housingSearchStartDateForPHAbatement.match(dateTimePattern) == null)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid Start Date for PH Abatement</li>');
              }
  
             
              if (jQuery.trim(housingSearchPolicyholderDeclinedPropertyDate) != '' && jQuery.trim(housingSearchPolicyholderDeclinedPropertyReason) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a Declined Reason</li>');
              }  

              if (parseFloat(housingSearchDistanceFromDamagedProp) > 5 && jQuery.trim(housingSearchOver5milesReason) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a Over 5 mi reason</li>');
              }

              if (jQuery.trim(housingSearchFirstMonthProratedRentAmountDue) != '' && jQuery.trim(housingSearchWhatIsIncludedInTheProratedRent) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter What is included in the Prorated Rent</li>');
              }

              if (jQuery.trim(housingSearchRSD) != '' && parseFloat(housingSearchRSD) != 0 && jQuery.trim(housingSearchResponsiblePartyForRSD) == '' && housingSearchPresentedToAdjuster == 'false')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a Responsible Party for RSD</li>');
              }

              if (housingSearchPetsAllowed == '1' && housingSearchPresentedToAdjuster == 'false' && jQuery.trim(housingSearchNumberOfPetsAllowed) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter Number of Pets allowed</li>');
              }  

              if (housingSearchPetsAllowed == '1' && housingSearchPresentedToAdjuster == 'false' && jQuery.trim(housingSearchTotalPetFees) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter Total Pet Fees</li>');
              }

              if (housingSearchPetsAllowed == '1' && housingSearchPresentedToAdjuster == 'false' && jQuery.trim(housingSearchPetRSD) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a Pet RSD</li>');
              } 

              if (housingSearchRentIncreaseAfterILT == '1' && jQuery.trim(housingSearchRentIncreaseToAfterILT) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter What will rent increase to after ILT</li>');
              }

             
              if (housingSearchUtilitiesIncludedInRent == '1' && jQuery.trim(housingSearchWhatUtilitiesIncludedInRent) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter What Utilities are included in Rent</li>');
              }

              if (housingSearchAppliancesPresentInRentalProperty == '1' && jQuery.trim(housingSearchAppliancesCRSNeedsToProvide) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter Appliances CRS needs to provide</li>');
              } 

              if (housingSearchCertificateOfOccupancyRequired == '1' && jQuery.trim(housingSearchCertificateOfOccupancyFee) == '' && housingSearchPresentedToAdjuster == 'false')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a Certificate of Occupancy Fee</li>');
              }

              if (jQuery.trim(housingSearchPHAbatementAmount) != '' && parseFloat(housingSearchPHAbatementAmount) != 0 && jQuery.trim(housingSearchStartDateForPHAbatement) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a Start Date for PH Abatement</li>');
              }

              if (housingSearchLandlordText == '')
              {
                housingSearchLandlordId = '000000000000000'
              }

              if (isValid === true)
              {
                 saveHousingSearch(housingSearchId,housingSearchPropertyType,housingSearchFurnitureOption,housingSearchPresentedDateTime,housingSearchLandlordId,housingSearchStreetAddress1,
                                   housingSearchStreetAddress2,housingSearchCity,housingSearchState,housingSearchZip,housingSearchCountry,housingSearchDistanceFromDamagedProp,
                                   housingSearchForecloserCheck,housingSearchPropertyDescription,housingSearchTHCComments,housingSearchDaysNoticeRequired,
                                   housingSearchInitialCheckDeliveryMethod,housingSearchSendCopyOfCheck,housingSearchSendCopyOfTrackingInformation,
                                   housingSearchInitialPaymentType,housingSearchBedrooms,housingSearchNameOfComplex,housingSearchUnit,housingSearchInitialContactName,
                                   housingSearchInitialContactNumber,housingSearchBathrooms,housingSearchSquareFeet,housingSearchPetsAllowed,housingSearchWoodFloors,
                                   housingSearchElevatorReservationRequired,housingSearchExtensionIncrementDays,housingSearchRecurringPaymentType,housingSearchNTVSendVia,
                                   housingSearchNTVSendTo,housingSearchPolicyholderAcceptedPropertyDate,housingSearchPolicyholderDeclinedPropertyDate,housingSearchPolicyholderDeclinedPropertyReason,
                                   housingSearchOver5milesReason,housingSearchLeaseTermApproveByAdj,housingSearchFirstAvailableMoveInDate,housingSearchTentativeMoveOutDate,housingSearchRentFrequency,
                                   housingSearchFirstMonthProratedRentAmountDue,housingSearchWhatIsIncludedInTheProratedRent,housingSearchRSD,
                                   housingSearchResponsiblePartyForRSD,housingSearchSureDeposit,housingSearchApplicationFee,housingSearchTax,housingSearchCleaningFee,
                                   housingSearchAmenityFee,housingSearchAdministrationFee,housingSearchReKeyingFee,housingSearchBreakLeaseFee,housingSearchGarageRemoteFee,
                                   housingSearchFencingFee,housingSearchNumberOfPetsAllowed,housingSearchTotalPetFees,housingSearchPetRSD,housingSearchDaysNoticeRequiredAfterILT,
                                   housingSearchRentIncreaseAfterILT,housingSearchRentIncreaseToAfterILT,
                                   housingSearchProcessingTimeForApplication,housingSearchRequirementsForQualification,housingSearchUtilitiesPHIsResponsibleFor,
                                   housingSearchAppliancesCRSNeedsToProvide,housingSearchApplianceHookUpGasElectric,housingSearchUtilitySetUpFee,housingSearchBrokerFee,
                                   housingSearchWindowCoveringFee,housingSearchCertificateOfOccupancyFee,housingSearchParkingFee,housingSearchOtherNonRefundableFee,
                                   housingSearchPHAbatementAmount,housingSearchStartDateForPHAbatement,housingSearchResponsiblePartyForVendorEntry,housingSearchPhoneNumberToConfirmVendorEntry,housingSearchPHViewed,housingSearchRentersInsuranceRequired,housingSearchDeclarationPageSufficient,housingSearchRMUpdated,housingSearchRentalApplicationRequired,housingSearchUtilitiesIncludedInRent,housingSearchHowUtilitiesAreToBeEstablished,housingSearchLandscapingSnowRemovalHOAIncluded,housingSearchAppliancesPresentInRentalProperty,housingSearchWindowCoveringsPresent,housingSearchPicturesAllowedOnWalls,housingSearchFencedYard,housingSearchCertificateOfOccupancyRequired,housingSearchFloorNumber,housingSearchRent,
                                   housingSearchWhatUtilitiesIncludedInRent);

             
              }
              else
              {
                 return false;
              }     
          }
          
          function clientSaveFurnitureOnlySearch()
          {
              var isValid = true;
              var errorList = j('#furnitureOnly-search-error-list');
              var furnitureOnlyId = j(ids.furnitureOnlyId.selector).val();
              var furnitureOnlyPropertyType = j(ids.furnitureOnlyPropertyType.selector).val();
              var furnitureOnlyPresentedDateTime = j(ids.furnitureOnlyPresentedDateTime.selector).val();
              var furnitureOnlyStreetAddress1 = j(ids.furnitureOnlyStreetAddress1.selector).val();
              var furnitureOnlyStreetAddress2 = j(ids.furnitureOnlyStreetAddress2.selector).val();
              var furnitureOnlyCity = j(ids.furnitureOnlyCity.selector).val();
              var furnitureOnlyState = j(ids.furnitureOnlyState.selector).val();
              var furnitureOnlyZip = j(ids.furnitureOnlyZip.selector).val();
              var furnitureOnlyCountry = j(ids.furnitureOnlyCountry.selector).val();
              var furnitureOnlyDistanceFromDamagedProp = j(ids.furnitureOnlyDistanceFromDamagedProp.selector).val();
              
              var furnitureOnlyPropertyDescription = j(ids.furnitureOnlyPropertyDescription.selector).val();
             
              var furnitureOnlyDaysNoticeRequired = j(ids.furnitureOnlyDaysNoticeRequired.selector).val();
              var furnitureOnlyBedrooms = j(ids.furnitureOnlyBedrooms.selector).val();
              var furnitureOnlyNameOfComplex = j(ids.furnitureOnlyNameOfComplex.selector).val();
              var furnitureOnlyUnit = j(ids.furnitureOnlyUnit.selector).val();
              var furnitureOnlyBathrooms = j(ids.furnitureOnlyBathrooms.selector).val();
              var furnitureOnlySquareFeet = j(ids.furnitureOnlySquareFeet.selector).val();
              var furnitureOnlyWoodFloors = j('[id$=furnitureOnlyWoodFloors]:checked').val();
              var furnitureOnlyElevatorReservationRequired = j('[id$=furnitureOnlyElevatorReservationRequired]:checked').val();
              var furnitureOnlyBedrooms = j(ids.furnitureOnlyBedrooms.selector).val();
              var furnitureOnlyExtensionIncrementDays = j(ids.furnitureOnlyExtensionIncrementDays.selector).val();
                           
              var states = 'AL:AK:AZ:AR:CA:CO:CT:DE:DC:FL:GA:HI:ID:IL:IN:IA:KS:KY:LA:ME:MD:MA:MI:MN:MS:MO:MT:NE:NV:NH:NJ:NM:NY:NC:ND:OH:OK:OR:PA:RI:SC:SD:TN:TX:UT:VT:VA:WA:WV:WI:WY:VI:GU:PR';
              var provinces = 'ON:QC:NS:NB:MB:PE:NL:AB:BC:SK';
              var dateTimePattern = /^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$/;
                    var zipCodePattern = /^\d{5}([\-]\d{4})?$/;
              var postalCodePattern = /^[A-Z]\d[A-Z][ ]?\d[A-Z]\d$/;
              var sfPattern = /^(\d{1,3}(\,\d{3})*|(\d+))?$/;
              var dfdpPattern = /^(\d{1}(\,\d{3})*|(\d+))(\.\d{0,2})?$/;
              var icnPattern = /^([a-zA-Z ]{0,50})$/
              var dnrPattern = /^\d{1,2}?$/;
              var eidPattern = /^\d{1,3}?$/;
                          
              errorList.empty();
              
              // begin validations
              if (jQuery.trim(furnitureOnlyPropertyType) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please select a Property Type</li>');
              }
              
              if (jQuery.trim(furnitureOnlyStreetAddress1) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a Street Address</li>');
              }
              
              if (jQuery.trim(furnitureOnlyCity) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a City</li>');
              }
              
              if (jQuery.trim(furnitureOnlyState) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a State</li>');
              }
              
              if (jQuery.trim(furnitureOnlyZip) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a Zip</li>');
              }
              
              if (jQuery.trim(furnitureOnlyCountry) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a Country</li>');
              }

              if (jQuery.trim(furnitureOnlyDistanceFromDamagedProp) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter the Distance from Damaged Property</li>');
              }

              if (jQuery.trim(furnitureOnlyBedrooms) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter the number of Bedrooms</li>');
              }

              if (jQuery.trim(furnitureOnlyBathrooms) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter the number of Bathrooms</li>');
              }              
                            
              if (jQuery.trim(furnitureOnlyPresentedDateTime) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a Presented Date</li>');
              }
              
              if (jQuery.trim(furnitureOnlyCountry) != '' && (jQuery.trim(j('[id$=furnitureOnlyCountry]').val().toLowerCase())) != 'usa' && (jQuery.trim(j('[id$=furnitureOnlyCountry]').val().toLowerCase())) != 'canada')
               {
                 isValid = false;
                 errorList.append('<li>Country must be must be USA or Canada</li>');
              }
              
              if (jQuery.trim(furnitureOnlyState) != '' && jQuery.trim(furnitureOnlyState).length == 2 && jQuery.trim(j('[id$=furnitureOnlyCountry]').val().toLowerCase()) == 'usa' && states.indexOf(furnitureOnlyState) == -1 || jQuery.trim(furnitureOnlyState) != '' && jQuery.trim(furnitureOnlyState).length != 2 && jQuery.trim(j('[id$=furnitureOnlyCountry]').val().toLowerCase()) == 'usa')
              {
                isValid = false;
                errorList.append('<li>The current Billing State/Province is invalid for the current Billing Country. Valid states are AL,AK,AZ,AR,CA,CO,CT,DE,DC,FL,GA,HI,ID,IL,IN,IA,KS,KY,LA,ME,MD,MA,MI,MN,MS,MO,MT,NE,NV,NH,NJ,NM,NY,NC,ND,OH,OK,OR,PA,</br>RI,SC,SD,TN,TX,UT,VT,VA,WA,WV,WI,WY,VI,GU,PR</li>');
              }

              if (jQuery.trim(furnitureOnlyState) != '' && jQuery.trim(furnitureOnlyState).length == 2 && jQuery.trim(j('[id$=furnitureOnlyCountry]').val().toLowerCase()) == 'canada' && provinces.indexOf(furnitureOnlyState) == -1 || jQuery.trim(furnitureOnlyState) != '' && jQuery.trim(furnitureOnlyState).length != 2 && jQuery.trim(j('[id$=furnitureOnlyCountry]').val().toLowerCase()) == 'canada')
              {
                isValid = false;
                errorList.append('<li>The current Billing State/Province is invalid for the current Billing Country. Valid provinces are ON,QC,NS,NB,MB,PE,NL,AB,BC,SK</li>');
              }

              if (jQuery.trim(furnitureOnlyZip) != '' && jQuery.trim(j('[id$=furnitureOnlyCountry]').val().toLowerCase()) == 'usa' && furnitureOnlyZip.match(zipCodePattern) == null)
              {
                 isValid = false;
                 errorList.append('<li>Zip/Postal code must be in 99999 or 99999-9999 format.</li>');
              }
              
              if (jQuery.trim(furnitureOnlyZip) != '' && jQuery.trim(j('[id$=furnitureOnlyCountry]').val().toLowerCase()) == 'canada' && furnitureOnlyZip.match(postalCodePattern) == null)
              {
                 isValid = false;
                 errorList.append('<li>Zip/Postal code must be in A9A 9A9 format.</li>');
              }
                           
              if (jQuery.trim(furnitureOnlyPresentedDateTime) != '')
              {
                 if (furnitureOnlyPresentedDateTime.match(dateTimePattern) == null)
                 {
                     isValid = false;
                   errorList.append('<li>Please enter a valid Presented Date</li>');
                 }
                 else
                 {
                     var furnitureOnlyPresentedDate = new Date(furnitureOnlyPresentedDateTime.substring(0,furnitureOnlyPresentedDateTime.indexOf(" ")));
                     var date = new Date();          
                         var currentDateString = (date.getMonth()+1) + "/" + date.getDate() + "/" + date.getFullYear();
                       var currentDate = new Date(currentDateString);
                     if (furnitureOnlyPresentedDate > currentDate)
                     {
                         isValid = false;
                         errorList.append('<li>Presented Date cannot be a future date.</li>');
                     }
                 }
              }
              
              noCommasSF = furnitureOnlySquareFeet.replace(/,/g, '');
                           
              if (jQuery.trim(furnitureOnlySquareFeet) != '' && furnitureOnlySquareFeet.match(sfPattern) == null || jQuery.trim(noCommasSF).length > 7)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid Square Feet value.</li>');
              }
              
              noCommasdfdp = furnitureOnlyDistanceFromDamagedProp.replace(/,/g, '');
              if (noCommasdfdp.indexOf('.') == -1)
              {
                maxLength = 4
              }
              else
              {
                maxLength = 7
              }
              
              if (jQuery.trim(furnitureOnlyDistanceFromDamagedProp) != '' && furnitureOnlyDistanceFromDamagedProp.match(dfdpPattern) == null || jQuery.trim(noCommasdfdp).length > maxLength)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid Distance from Damaged Property</li>');
              }
              
              if (jQuery.trim(furnitureOnlyDaysNoticeRequired) != '' && furnitureOnlyDaysNoticeRequired .match(dnrPattern) == null)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid Days Notice Required</li>');
              }
              
              if (jQuery.trim(furnitureOnlyExtensionIncrementDays) != '' && furnitureOnlyExtensionIncrementDays.match(eidPattern) == null)
              {
                 isValid = false;
                 errorList.append('<li>Please enter a valid Extension Increment Days value</li>');
              }
              
              if (isValid === true)
              {
                 saveFurnitureOnlySearch(furnitureOnlyId,furnitureOnlyPropertyType,furnitureOnlyPresentedDateTime,furnitureOnlyStreetAddress1,furnitureOnlyStreetAddress2,
                                         furnitureOnlyCity,furnitureOnlyState,furnitureOnlyZip,furnitureOnlyCountry,furnitureOnlyDistanceFromDamagedProp,
                                         furnitureOnlyPropertyDescription,furnitureOnlyDaysNoticeRequired,furnitureOnlyBedrooms,furnitureOnlyNameOfComplex,furnitureOnlyUnit,
                                         furnitureOnlyBathrooms,furnitureOnlySquareFeet,furnitureOnlyWoodFloors,furnitureOnlyElevatorReservationRequired,
                                         furnitureOnlyExtensionIncrementDays);
              }
              else
              {
                 return false;
              }     
          }
                
          function clientSaveCost()
          {
              var isValid = true;
              var errorList = j('#cost-error-list');
              var costId = j(ids.costId.selector).val();
              var costAmount = j(ids.costAmount.selector).val();
              var costType = j(ids.costType.selector).val();
              var costTypeDescription = j(ids.costTypeDescription.selector).val();
              var costBillableParty = j(ids.costBillableParty.selector).val();
              var costPayableParty = j(ids.costPayableParty.selector).val();
              var costProrateType = j(ids.costProrateType.selector).val();
              var currentLandlord = j('[id$=housingSearchLandlordForCosts]').val();

              var amountPattern = /^(\d{1,3}(\,\d{3})*|(\d+))(\.\d{0,2})?$/;
              var abatementAmountPattern = /^-(\d{1,3}(\,\d{3})*|(\d+))(\.\d{0,2})?$/;

             
              errorList.empty();
              
              // begin validations
              if (jQuery.trim(costAmount) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter an Amount</li>');
              }
              
              if (jQuery.trim(costType) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please select a Type</li>');
              }
              
              if (jQuery.trim(costBillableParty) == '000000000000000' || jQuery.trim(costBillableParty) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please select a Billable Party</li>');
              }
              
              if (jQuery.trim(costPayableParty) == '000000000000000' && costType != 'PH Abatement' && costType != 'Policyholder Rent' && costType != 'Utilities' || jQuery.trim(costPayableParty) == '' && costType != 'PH Abatement' && costType != 'Policyholder Rent' && costType != 'Utilities')
              {
                 isValid = false;
                 errorList.append('<li>Please select a Payable Party</li>');
              }
              
              noCommasAmount = costAmount.replace(/,/g, '');
              if (noCommasAmount.indexOf('.') == -1)
              {
                maxLength = 7
              }
              else
              {
                maxLength = 10
              }
              
              if (costType != 'PH Abatement')
              {  

                if (jQuery.trim(costAmount) != '' && costAmount.match(amountPattern) == null || jQuery.trim(noCommasAmount).length > maxLength)
                {
                  isValid = false;
                  errorList.append('<li>Please enter a valid Amount</li>');
                }
              }
              else
              {
                if (jQuery.trim(costAmount) != '' && costAmount.match(abatementAmountPattern) == null || jQuery.trim(noCommasAmount).length > maxLength + 1)
                {
                  isValid = false;
                  errorList.append('<li>Please enter a valid Amount.&nbsp;&nbsp;Must be negative for PH Abatement cost type</li>');
                }

                 if (jQuery.trim(costPayableParty) != '000000000000000' && jQuery.trim(costPayableParty) !== '' && jQuery.trim(costPayableParty) != currentLandlord.substring(0,15))
                 {
                   isValid = false;
                   errorList.append('<li>Payable party for cost type PH Abatement must be blank or the landlord assigned to this search</li>');
                 }
              }   
              
              if (jQuery.trim(costType) == 'Other' && jQuery.trim(costTypeDescription) == '')
              {
                 isValid = false;
                 errorList.append('<li>Please enter a Type Description</li>');
                  }
              
              if (isValid === true)
              {
                 saveCost(costAmount,costType,costTypeDescription,costBillableParty,costPayableParty,costProrateType); 
              }
              else
              {
                 return false;
              }     
          }
                
          function clientSaveFurnitureOrder()
          {
              var isValid = true;
              var errorList = j('#furnitureOrder-error-list');
              var furnitureOrderId = j(ids.furnitureOrderId.selector).val();
              if (j('[id$=furnitureOrderStatusRO]').text() != '')
              {
                 var furnitureOrderStatus = j('[id$=furnitureOrderStatusRO]').text();
              }
              else
              {
                 var furnitureOrderStatus = j('[id$=furnitureOrderStatus]').val();  
              }
              var furnitureOrderRequestedDeliveryDate = j(ids.furnitureOrderRequestedDeliveryDate.selector).val();
              var furnitureOrderIsPartial = j(ids.furnitureOrderIsPartial.selector).val();
              var furnitureOrderComments = j(ids.furnitureOrderComments.selector).val();
              var furnitureOrderIncludePictures = j('[id$=furnitureOrderIncludePictures]:checked').val();
              var furnitureOrderCost = j(ids.furnitureOrderCost.selector).val();
              var furnitureOrderBillablePartyCost = j(ids.furnitureOrderBillablePartyCost.selector).val();

              var furnitureOrderFurnitureCost = j(ids.furnitureOrderFurnitureCost.selector).val();
              var furnitureOrderBillablePartyFurnitureCost = j(ids.furnitureOrderBillablePartyFurnitureCost.selector).val();
              var furnitureOrderApplianceCost = j(ids.furnitureOrderApplianceCost.selector).val();
              var furnitureOrderBillablePartyApplianceCost = j(ids.furnitureOrderBillablePartyApplianceCost.selector).val();
              var furnitureOrderElectronicsCost = j(ids.furnitureOrderElectronicsCost.selector).val();
              var furnitureOrderBillablePartyElectronicsCost = j(ids.furnitureOrderBillablePartyElectronicsCost.selector).val();
              var furnitureOrderKitchenHousewaresCost = j(ids.furnitureOrderKitchenHousewaresCost.selector).val();
              var furnitureOrderBillablePartyKitchenHousewaresCost = j(ids.furnitureOrderBillablePartyKitchenHousewaresCost.selector).val();
              var furnitureOrderBedBathHousewaresCost = j(ids.furnitureOrderBedBathHousewaresCost.selector).val();
              var furnitureOrderBillablePartyBedBathHousewaresCost = j(ids.furnitureOrderBillablePartyBedBathHousewaresCost.selector).val();
              var furnitureOrderOtherHousewaresCost = j(ids.furnitureOrderOtherHousewaresCost.selector).val();
              var furnitureOrderBillablePartyOtherHousewaresCost = j(ids.furnitureOrderBillablePartyOtherHousewaresCost.selector).val();


              var furnitureOrderDeposit = j(ids.furnitureOrderDeposit.selector).val();
              var furnitureOrderBillablePartyDeposit = j(ids.furnitureOrderBillablePartyDeposit.selector).val();
              var furnitureOrderSetupFee = j(ids.furnitureOrderSetupFee.selector).val();
              var furnitureOrderBillablePartySetupFee = j(ids.furnitureOrderBillablePartySetupFee.selector).val();
              var furnitureOrderPetFee = j(ids.furnitureOrderPetFee.selector).val();
              var furnitureOrderBillablePartyPetFee = j(ids.furnitureOrderBillablePartyPetFee.selector).val();
              var furnitureOrderDeliveryFee = j(ids.furnitureOrderDeliveryFee.selector).val();
              var furnitureOrderBillablePartyDeliveryFee = j(ids.furnitureOrderBillablePartyDeliveryFee.selector).val();
              var furnitureOrderLevel = j(ids.furnitureOrderLevel.selector).val();
              var furnitureOrderMasterBedroom = j(ids.furnitureOrderMasterBedroom.selector).val();
              var furnitureOrderAdditionalBedroom1 = j(ids.furnitureOrderAdditionalBedroom1.selector).val();
              var furnitureOrderAdditionalBedroom2 = j(ids.furnitureOrderAdditionalBedroom2.selector).val();
              var furnitureOrderAdditionalBedroom3 = j(ids.furnitureOrderAdditionalBedroom3.selector).val();
              var furnitureOrderAdditionalBedroom4 = j(ids.furnitureOrderAdditionalBedroom4.selector).val();
              var furnitureOrderAdditionalBedroom5 = j(ids.furnitureOrderAdditionalBedroom5.selector).val();
              var furnitureOrderAdditionalBedroom6 = j(ids.furnitureOrderAdditionalBedroom6.selector).val();
              var furnitureOrderAdditionalBedroom7 = j(ids.furnitureOrderAdditionalBedroom7.selector).val();
              var furnitureOrderAdditionalBedroom8 = j(ids.furnitureOrderAdditionalBedroom8.selector).val();
              var furnitureOrderAdditionalBedroom9 = j(ids.furnitureOrderAdditionalBedroom9.selector).val();
              var furnitureOrderAdditionalBedroom10 = j(ids.furnitureOrderAdditionalBedroom10.selector).val();
              var furnitureOrderLivingRoom = j(ids.furnitureOrderLivingRoom.selector).val();
              var furnitureOrderAdditionalLivingRoom = j(ids.furnitureOrderAdditionalLivingRoom.selector).val();
              var furnitureOrderDiningRoom = j(ids.furnitureOrderDiningRoom.selector).val();
              var furnitureOrderAdditionalDiningRoom = j(ids.furnitureOrderAdditionalDiningRoom.selector).val();
              var furnitureOrderAppliances = j(ids.furnitureOrderAppliances.selector).val();
              var furnitureOrderRefrigerator = j(ids.furnitureOrderRefrigerator.selector).val();
              var furnitureOrderMicrowave = j(ids.furnitureOrderMicrowave.selector).val();
              var furnitureOrderClothesWasher = j(ids.furnitureOrderClothesWasher.selector).val();
              var furnitureOrderClothesDryer = j(ids.furnitureOrderClothesDryer.selector).val();
              var furnitureOrderDryerType = j(ids.furnitureOrderDryerType.selector).val();
              var furnitureOrderRange = j(ids.furnitureOrderRange.selector).val();
              var furnitureOrderRangeType = j(ids.furnitureOrderRangeType.selector).val();
              var furnitureOrderHousewares = j(ids.furnitureOrderHousewares.selector).val();
              var furnitureOrderBedroomsNeedingHousewares = j(ids.furnitureOrderBedroomsNeedingHousewares.selector).val();
              var furnitureOrderBathroomsNeedingHousewares = j(ids.furnitureOrderBathroomsNeedingHousewares.selector).val();
              var furnitureOrderReadyForVSS = j(ids.furnitureOrderReadyForVSS.selector).val();
              var furnitureOrderCreatedAfterMoveIn = j(ids.furnitureOrderCreatedAfterMoveIn.selector).val();
                                            
              var amountPattern = /^(\d{1,3}(\,\d{3})*|(\d+))(\.\d{0,2})?$/;
              var dateTimePattern = /^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$/;
             
                         
              errorList.empty();
              
              // begin validations
              
              if (furnitureOrderStatus != 'Cancelled')
              {
                  if (furnitureOrderCreatedAfterMoveIn == 'false')
                  {
                      if (jQuery.trim(furnitureOrderDeposit) < 0 || jQuery.trim(furnitureOrderDeposit) == '')
                      {
                         isValid = false;
                         errorList.append('<li>Please enter a valid Deposit Amount (Must be 0 or greater)');
                      }
                      
                      if (jQuery.trim(furnitureOrderBillablePartyDeposit) == '')
                      {
                         isValid = false;
                         errorList.append('<li>Please enter a Deposit Billable Party');
                      }
                  }
                      
                  if (furnitureOrderReadyForVSS == 'false')
                  {        
                      if (jQuery.trim(furnitureOrderIsPartial) == '')
                      {
                         isValid = false;
                         errorList.append('<li>Please enter a value for partial order');
                      }
                      
                      if (jQuery.trim(furnitureOrderRequestedDeliveryDate) == '')
                      {
                         isValid = false;
                         errorList.append('<li>Please enter a Requested Delivery Date');
                      }
                      
                      if (furnitureOrderIsPartial == 'No' && jQuery.trim(furnitureOrderLevel) == '')
                      {
                         isValid = false;
                         errorList.append('<li>Please enter a Furniture Level');
                      }
                      
                      if (furnitureOrderIsPartial == 'Yes' && jQuery.trim(furnitureOrderComments) == '')
                      {
                         isValid = false;
                         errorList.append('<li>Please enter Furniture Comments');
                      }
                  }
              
                  if (furnitureOrderStatus == 'Completed')
                  {
                      if (furnitureOrderIsPartial == 'No' && furnitureOrderReadyForVSS == 'false')
                      {
                      
                          if (jQuery.trim(furnitureOrderMasterBedroom) == '')
                          {
                            isValid = false;
                            errorList.append('<li>You must enter a Master Bedroom to save a completed furniture order');
                          }
                          
                          if (jQuery.trim(furnitureOrderLivingRoom) == '')
                          {
                            isValid = false;
                            errorList.append('<li>You must enter a Living Room to save a completed furniture order');
                          }
                          
                          if (jQuery.trim(furnitureOrderDiningRoom) == '')
                          {
                            isValid = false;
                            errorList.append('<li>You must enter a Dining Room to save a completed furniture order');
                          }
                          
                          if (jQuery.trim(furnitureOrderAppliances) == '')
                          {
                            isValid = false;
                            errorList.append('<li>You must enter a value for Applicances to save a completed furniture order');
                          }
                          
                          if (jQuery.trim(furnitureOrderHousewares) == '')
                          {
                            isValid = false;
                            errorList.append('<li>You must enter a value for Housewares to save a completed furniture order');
                          }
                      }
                  }
                  
                  if (furnitureOrderCreatedAfterMoveIn == 'false')
                  {
                  
                      noCommasCost = furnitureOrderCost.replace(/,/g, '');
                      if (noCommasCost.indexOf('.') == -1)
                      {
                        maxLength = 7
                      }
                      else
                      {
                        maxLength = 10
                      }
                      
                      if (jQuery.trim(furnitureOrderCost) != '')
                      {
                          if (furnitureOrderCost.match(amountPattern) == null || jQuery.trim(noCommasCost).length > maxLength)
                          {
                             isValid = false;
                             errorList.append('<li>Please enter a valid Cost amount</li>');
                          }
                          else
                          {
                             if (jQuery.trim(furnitureOrderBillablePartyCost) == '')
                             {
                                isValid = false;
                                errorList.append('<li>Please enter a Cost Billable Party');
                             }
                          } 
                        }

                  if (jQuery.trim(furnitureOrderFurnitureCost) != '')
                  {
                    if (furnitureOrderFurnitureCost.match(amountPattern) == null || jQuery.trim(noCommasCost).length > maxLength)
                    {
                       isValid = false;
                       errorList.append('<li>Please enter a valid Furniture Cost amount</li>');
                    }
                    else
                    {
                       if (jQuery.trim(furnitureOrderBillablePartyFurnitureCost) == '')
                         {
                        isValid = false;
                        errorList.append('<li>Please enter a Furniture Cost Billable Party');
                         }
                    } 
                  }

                  if (jQuery.trim(furnitureOrderApplianceCost) != '')
                  {
                    if (furnitureOrderApplianceCost.match(amountPattern) == null || jQuery.trim(noCommasCost).length > maxLength)
                    {
                       isValid = false;
                       errorList.append('<li>Please enter a valid Appliance Cost amount</li>');
                    }
                    else
                    {
                       if (jQuery.trim(furnitureOrderBillablePartyApplianceCost) == '')
                         {
                        isValid = false;
                        errorList.append('<li>Please enter a Appliance Cost Billable Party');
                         }
                    } 
                  }

                  if (jQuery.trim(furnitureOrderElectronicsCost) != '')
                  {
                    if (furnitureOrderElectronicsCost.match(amountPattern) == null || jQuery.trim(noCommasCost).length > maxLength)
                    {
                       isValid = false;
                       errorList.append('<li>Please enter a valid Electronics Cost amount</li>');
                    }
                    else
                    {
                       if (jQuery.trim(furnitureOrderBillablePartyElectronicsCost) == '')
                         {
                        isValid = false;
                        errorList.append('<li>Please enter a Electronics Cost Billable Party');
                         }
                    } 
                  }

                  if (jQuery.trim(furnitureOrderKitchenHousewaresCost) != '')
                  {
                    if (furnitureOrderKitchenHousewaresCost.match(amountPattern) == null || jQuery.trim(noCommasCost).length > maxLength)
                    {
                       isValid = false;
                       errorList.append('<li>Please enter a valid Kitchen Housewares Cost amount</li>');
                    }
                    else
                    {
                       if (jQuery.trim(furnitureOrderBillablePartyKitchenHousewaresCost) == '')
                         {
                        isValid = false;
                        errorList.append('<li>Please enter a Kitchen Housewares Cost Billable Party');
                         }
                    } 
                  }

                  if (jQuery.trim(furnitureOrderBedBathHousewaresCost) != '')
                  {
                    if (furnitureOrderBedBathHousewaresCost.match(amountPattern) == null || jQuery.trim(noCommasCost).length > maxLength)
                    {
                       isValid = false;
                       errorList.append('<li>Please enter a valid Bed & Bath Housewares Cost amount</li>');
                    }
                    else
                    {
                       if (jQuery.trim(furnitureOrderBillablePartyBedBathHousewaresCost) == '')
                         {
                        isValid = false;
                        errorList.append('<li>Please enter a Bed & Bath Housewares Cost Billable Party');
                         }
                    } 
                  }

                  if (jQuery.trim(furnitureOrderOtherHousewaresCost) != '')
                  {
                    if (furnitureOrderOtherHousewaresCost.match(amountPattern) == null || jQuery.trim(noCommasCost).length > maxLength)
                    {
                       isValid = false;
                       errorList.append('<li>Please enter a valid Other Housewares Cost amount</li>');
                    }
                    else
                    {
                       if (jQuery.trim(furnitureOrderBillablePartyOtherHousewaresCost) == '')
                         {
                        isValid = false;
                        errorList.append('<li>Please enter a Other Housewares Cost Billable Party');
                         }
                    } 
                  }

                            noCommasDeposit = furnitureOrderDeposit.replace(/,/g, '');
                      if (noCommasDeposit.indexOf('.') == -1)
                      {
                        maxLength = 7
                      }
                      else
                      {
                        maxLength = 10
                      }
                      
                      if (jQuery.trim(furnitureOrderDeposit) != '')
                      {
                        if (furnitureOrderDeposit.match(amountPattern) == null || jQuery.trim(noCommasDeposit).length > maxLength)
                          {
                             isValid = false;
                             errorList.append('<li>Please enter a valid Deposit amount</li>');
                          }
                        }    
                                      
                      noCommasSetupFee = furnitureOrderSetupFee.replace(/,/g, '');
                      if (noCommasSetupFee.indexOf('.') == -1)
                      {
                        maxLength = 7
                      }
                      else
                      {
                        maxLength = 10
                      }
                                      
                      if (jQuery.trim(furnitureOrderSetupFee) != '')
                      {
                          if (furnitureOrderSetupFee.match(amountPattern) == null || jQuery.trim(noCommasSetupFee).length > maxLength)
                          {
                             isValid = false;
                             errorList.append('<li>Please enter a valid Setup Fee amount</li>');
                          }
                          else
                          {
                             if (jQuery.trim(furnitureOrderBillablePartySetupFee) == '')
                             {
                                isValid = false;
                                errorList.append('<li>Please enter a Setup Fee Billable Party');
                             }
                          }  
                        }
                      
                        noCommasPetFee = furnitureOrderPetFee.replace(/,/g, '');
                      if (noCommasPetFee.indexOf('.') == -1)
                      {
                        maxLength = 7
                      }
                      else
                      {
                        maxLength = 10
                      }
                      
                      if (jQuery.trim(furnitureOrderPetFee) != '')
                      {
                      if (furnitureOrderPetFee.match(amountPattern) == null || jQuery.trim(noCommasPetFee).length > maxLength)
                      {
                        isValid = false;
                        errorList.append('<li>Please enter a valid Pet Fee amount</li>');
                      }
                      else
                      {
                          if (jQuery.trim(furnitureOrderBillablePartyPetFee) == '')
                        {
                              isValid = false;
                              errorList.append('<li>Please enter a Pet Fee Billable Party');
                        }
                        }  
                      }    
                      
                      noCommasDeliveryFee = furnitureOrderDeliveryFee.replace(/,/g, '');
                      if (noCommasDeliveryFee.indexOf('.') == -1)
                      {
                        maxLength = 7
                      }
                      else
                      {
                        maxLength = 10
                      }
                      
                      if (jQuery.trim(furnitureOrderDeliveryFee) != '')
                      {
                        if (furnitureOrderDeliveryFee.match(amountPattern) == null || jQuery.trim(noCommasDeliveryFee).length > maxLength)
                        {
                          isValid = false;
                          errorList.append('<li>Please enter a valid Delivery Fee amount</li>');
                        }
                        else
                        {
                            if (jQuery.trim(furnitureOrderBillablePartyDeliveryFee) == '')
                          {
                                isValid = false;
                                errorList.append('<li>Please enter a Delivery Fee Billable Party');
                          }
                          }  
                      }
                    }
                                
                      
                  if (furnitureOrderReadyForVSS == 'false')
              {        
                    if (jQuery.trim(furnitureOrderRequestedDeliveryDate) != '' && furnitureOrderRequestedDeliveryDate.match(dateTimePattern) == null)
                {
                  isValid = false;
                  errorList.append('<li>Please enter a valid Requested Delivery Date</li>');
                }
                  }
              }
              
              if (isValid === true)
              {
                if (jQuery.trim(furnitureOrderCost) != '' && (jQuery.trim(furnitureOrderFurnitureCost) != '' || 
                    jQuery.trim(furnitureOrderApplianceCost) != '' || jQuery.trim(furnitureOrderElectronicsCost) != '' || 
                    jQuery.trim(furnitureOrderKitchenHousewaresCost) != '' || jQuery.trim(furnitureOrderBedBathHousewaresCost) != '' || 
                    jQuery.trim(furnitureOrderOtherHousewaresCost) != ''))
                { 
                  isValid = false;
                  errorList.append('<li>You cannot enter Total Cost along with broken out Costs</li>'); 
                }              
              }


              if (isValid === true)
              {
                saveFurnitureOrder(furnitureOrderId,furnitureOrderStatus,furnitureOrderRequestedDeliveryDate,furnitureOrderIsPartial,
                                   furnitureOrderComments,furnitureOrderIncludePictures,furnitureOrderCost,furnitureOrderBillablePartyCost,
                                   furnitureOrderFurnitureCost,furnitureOrderBillablePartyFurnitureCost,
                                   furnitureOrderApplianceCost,furnitureOrderBillablePartyApplianceCost,
                                   furnitureOrderElectronicsCost,furnitureOrderBillablePartyElectronicsCost,
                                   furnitureOrderKitchenHousewaresCost,furnitureOrderBillablePartyKitchenHousewaresCost,
                                   furnitureOrderBedBathHousewaresCost,furnitureOrderBillablePartyBedBathHousewaresCost,
                                   furnitureOrderOtherHousewaresCost,furnitureOrderBillablePartyOtherHousewaresCost,
                                   furnitureOrderDeposit,furnitureOrderBillablePartyDeposit,furnitureOrderSetupFee,
                                   furnitureOrderBillablePartySetupFee,furnitureOrderPetFee,furnitureOrderBillablePartyPetFee,
                                   furnitureOrderDeliveryFee,furnitureOrderBillablePartyDeliveryFee,furnitureOrderLevel,
                                   furnitureOrderMasterBedroom,furnitureOrderAdditionalBedroom1,furnitureOrderAdditionalBedroom2,
                                   furnitureOrderAdditionalBedroom3,furnitureOrderAdditionalBedroom4,furnitureOrderAdditionalBedroom5,
                                   furnitureOrderAdditionalBedroom6,furnitureOrderAdditionalBedroom7,furnitureOrderAdditionalBedroom8,
                                   furnitureOrderAdditionalBedroom9,furnitureOrderAdditionalBedroom10,furnitureOrderLivingRoom,
                                   furnitureOrderAdditionalLivingRoom,furnitureOrderDiningRoom,furnitureOrderAdditionalDiningRoom,
                                   furnitureOrderAppliances,furnitureOrderRefrigerator,furnitureOrderMicrowave,furnitureOrderClothesWasher,
                                   furnitureOrderClothesDryer,furnitureOrderDryerType,furnitureOrderRange,furnitureOrderRangeType,
                                   furnitureOrderHousewares,furnitureOrderBedroomsNeedingHousewares,furnitureOrderBathroomsNeedingHousewares) 
              }
              else
              {
                return false;
              }
          }
          
                
          function clientSaveQuote()
          {
            var isValid = true;
            var errorList = j('#quote-error-list');
            var selectedHousingSearchFurnitureOption = j('[id$=hdnSelectedHousingSearchFurnitureOption]').text();
            var placementTHASignedDateTime = j(ids.placementTHASignedDateTime.selector).val();
            var quoteId = j(ids.quoteId.selector).val();
            if (j('[id$=quoteStatusRO]').text() != '')
            {
                var quoteStatus = j('[id$=quoteStatusRO]').text();
            }
            else
            {
                var quoteStatus = j('[id$=quoteStatus]').val();
            }
                    
            var quoteBillingPreferences = j(ids.quoteBillingPreferences.selector).val();
            var quoteMarkupAdjustment = j(ids.quoteMarkupAdjustment.selector).val();
            var quoteMarkupAdjustmentReason = j(ids.quoteMarkupAdjustmentReason.selector).val();
            var quoteMarkupAuthorizedBy = j(ids.quoteMarkupAuthorizedBy.selector).val();
            var quoteMarkupTotal = j(ids.quoteMarkupTotal.selector).text();
            var quoteSpecialInstructions = j(ids.quoteSpecialInstructions.selector).val();
            
            errorList.empty();
            
            var markupAdjustmentPattern = /^-?(\d{1,3}(\,\d{3})*|(\d+))(\.\d{0,2})?$/;
                
            // begin validations
            
                   
            if (quoteId == null && selectedHousingSearchFurnitureOption != 'Furniture Only')
            {            
                if (jQuery.trim(quoteMarkupAdjustment) != '')
                { 
                    if (quoteMarkupTotal.indexOf('-') != -1)
                    {
                        isValid = false;
                        errorList.append('<li>Please enter a valid Markup Adjustment Amount (Total Markup cannot be a negative amount)</li>');
                    } 
                    else
                    {
                        if (quoteMarkupAdjustment.match(markupAdjustmentPattern) == null || jQuery.trim(noCommasQuoteMarkupAdjustment).length > maxLength)
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a valid Markup Adjustment Amount</li>');
                        }
                        else
                        {
                            if (jQuery.trim(quoteMarkupAdjustmentReason) == '')
                            {
                                isValid = false;
                                errorList.append('<li>Please enter a Markup Adjustment Reason</li>');
                            }
                            
                            if (jQuery.trim(quoteMarkupAuthorizedBy) == '000000000000000' || jQuery.trim(quoteMarkupAuthorizedBy) == '')
                            {
                                isValid = false;
                                errorList.append('<li>Please enter a Markup Adjustment Authorized By User</li>');
                            }       
                        }
                     }
                 }
            }

            if (selectedHousingSearchFurnitureOption == 'Furniture Only')
            {
                if (quoteStatus == 'Approved' &&  jQuery.trim(placementTHASignedDateTime) == '')
                {
                    isValid = false;
                    errorList.append('<li>You cannot approve a Furniture Only Quote without a THA signed date</li>');
                }
                else
                {
                    if (jQuery.trim(quoteMarkupAdjustment) != '')
                    { 
                        if (quoteMarkupTotal.indexOf('-') != -1)
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a valid Markup Adjustment Amount (Total Markup cannot be a negative amount)</li>');
                        } 
                        else
                        {
                            if (quoteMarkupAdjustment.match(markupAdjustmentPattern) == null || jQuery.trim(noCommasQuoteMarkupAdjustment).length > maxLength)
                            {
                                isValid = false;
                                errorList.append('<li>Please enter a valid Markup Adjustment Amount</li>');
                            }
                            else
                            {
                                if (jQuery.trim(quoteMarkupAdjustmentReason) == '')
                                {
                                    isValid = false;
                                    errorList.append('<li>Please enter a Markup Adjustment Reason</li>');
                                }
                                
                                if (jQuery.trim(quoteMarkupAuthorizedBy) == '000000000000000' || jQuery.trim(quoteMarkupAuthorizedBy) == '')
                                {
                                    isValid = false;
                                    errorList.append('<li>Please enter a Markup Adjustment Authorized By User</li>');
                                }       
                            }
                        }
                    }
                } 
            }
            
            
            if (isValid === true)
            {
               saveQuote(quoteId,quoteStatus,quoteBillingPreferences,quoteMarkupAdjustment,quoteMarkupAdjustmentReason,quoteMarkupAuthorizedBy,quoteSpecialInstructions);
            }
            else
            {
               return false;
            }   
          }
                
      </script> 
    </apex:pageBlock>
    
    
    <script type="text/javascript">
        
      function clientSetupHousingSearch()
      {
        j('[id$=btnCancelHousingSearch]').show();
        j('[id$=btnExitHousingSearch]').hide();
        j('[id$=housingSearchFurnitureOption] option[value="Furniture Only"]').remove();
        ;ids.housingSearchCostsPanel.hide() 
      }
            
      function clientUpdateSelectedHousingSearch(housingSearchFurnitureOption,housingSearchLandlordStatus,housingSearchDistanceFromDamagedProp,housingSearchBedrooms,
                                                 housingSearchBathrooms,housingSearchLandlord,housingSearchInitialPaymentType,housingSearchInitialCheckDeliveryMethod,
                                                 housingSearchRecurringPaymentType,housingSearchDayNoticeRequired,housingSearchExtensionIncrementDays,housingSearchNTVSendVia,housingSearchNTVSendTo,
                                                 housingSearchForeclosureCheck,housingSearchPolicyholderAcceptedPropertyDate,housingSearchName,hasPayableLandlordCost,undeclinedSearchNames)
      {
         
         
         var isValid = true;
         var errorList = j('#housingSearches-error-list');
         var placementMoveInDate = j(ids.placementMoveInDate.selector).val();
         var placementApprovedThroughDate = j(ids.placementApprovedThroughDate.selector).val();
         var placementTHCSignedDateTime = j(ids.placementTHCSignedDateTime.selector).val();
                           
         errorList.empty();
        
         if (j('.selectedHouse:checked').val() == '1')
         {
            // begin validations
        
           if (jQuery.trim(housingSearchBedrooms) == '')
           {
                isValid = false
                errorList.append('<li>Number of Bedrooms must be entered before housing search ' + housingSearchName + ' can be selected</li>');
           }
           if (jQuery.trim(housingSearchBathrooms) == '')
           {
                isValid = false
                errorList.append('<li>Number of Bathrooms must be entered before housing search ' + housingSearchName + ' can be selected</li>');
           }
           if (housingSearchFurnitureOption != 'Furniture Only')
           { 
             if (hasPayableLandlordCost == 0)
             {
                isValid = false
                errorList.append('<li>A cost that is payable to the landlord must be entered before housing search ' + housingSearchName + ' can be selected</li>');
             }

             if (jQuery.trim(housingSearchDistanceFromDamagedProp) == '')
             {
                  isValid = false
                  errorList.append('<li>Distance From Damaged Property must be entered before housing search ' + housingSearchName + ' can be selected</li>');
             }
             if (jQuery.trim(housingSearchLandlord) == '000000000000000' || jQuery.trim(housingSearchLandlord) == '') 
             {
                isValid = false;
                errorList.append('<li>A Landlord must be entered before housing search ' + housingSearchName + ' can be selected</li>');
             } 
             if (jQuery.trim(housingSearchInitialPaymentType) == '')
             {
                  isValid = false
                  errorList.append('<li>Initial Payment Type must be entered before housing search ' + housingSearchName + ' can be selected</li>');
             }
             if (jQuery.trim(housingSearchInitialCheckDeliveryMethod) == '')
             {
                  isValid = false
                  errorList.append('<li>Initial Check Delivery Method must be entered before housing search ' + housingSearchName + ' can be selected</li>');
             }
             if (jQuery.trim(housingSearchRecurringPaymentType) == '')
             {
                  isValid = false
                  errorList.append('<li>Recurring Payment Type must be entered before housing search ' + housingSearchName + ' can be selected</li>');
             }
             if (jQuery.trim(housingSearchNTVSendVia) == '')
             {
                  isValid = false
                  errorList.append('<li>NTV Send Via must be entered before housing search ' + housingSearchName + ' can be selected</li>');
             }
             if (jQuery.trim(housingSearchNTVSendTo) == '')
             {
                isValid = false
                errorList.append('<li>NTV Send To must be entered before housing search ' + housingSearchName + ' can be selected</li>');
             }
             if (jQuery.trim(housingSearchForeclosureCheck) == 'false')   
             {
                 isValid = false
                 errorList.append('<li>Foreclosure Check must be selected before housing search ' + housingSearchName + ' can be selected</li>');
             }
             if (jQuery.trim(housingSearchPolicyholderAcceptedPropertyDate) == '')
             {
                isValid = false
                errorList.append('<li>Accepted Date must be entered before housing search ' + housingSearchName + ' can be selected</li>');
             }
           }
           if (jQuery.trim(housingSearchDayNoticeRequired) == '')
           {
                isValid = false
                errorList.append('<li>Days Notice Required must be entered before housing search ' + housingSearchName + ' can be selected</li>');
           }
           if (jQuery.trim(housingSearchExtensionIncrementDays) == '')
           {
                isValid = false
                errorList.append('<li>Extension Increment Days must be entered before housing search ' + housingSearchName + ' can be selected</li>');
           }

           var undeclinedSearchNamesArray = JSON.parse(undeclinedSearchNames);
           for(var i=0;i<undeclinedSearchNamesArray.length;i++) 
           {
              if (undeclinedSearchNamesArray[i] != '' && undeclinedSearchNamesArray[i] != housingSearchName)
              {
                isValid = false
                errorList.append('<li>You must enter a declined date for search ' + undeclinedSearchNamesArray[i] + ' before you can select search ' + housingSearchName + '</li>');
              }
           }
            
           if (isValid == false)
           {
              j('.selectedHouse:checked').removeAttr('checked');
              return false;
           }

           if (jQuery.trim(placementMoveInDate) == '' || jQuery.trim(placementApprovedThroughDate) == '')
           {
              isValid = false
                errorList.append('<li>Move In Date, and Approved Through Date must be entered before housing search ' + housingSearchName + ' can be selected</li>');
              j('.selectedHouse:checked').removeAttr('checked');
              return false;
           }
           else
           {
             if (jQuery.trim(placementApprovedThroughDate) != '' && jQuery.trim(placementApprovedThroughDate).length >= 8 &&
                 jQuery.trim(placementMoveInDate) != '' && jQuery.trim(placementMoveInDate).length >= 8 &&
                 jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(placementApprovedThroughDate)) <= jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(placementMoveInDate)))
               { 
                 isValid = false;
                 errorList.append('<li>The Approved Through Date must be greater than the Move In Date before housing search ' + housingSearchName + ' can be selected</li>');
                 j('.selectedHouse:checked').removeAttr('checked');
                 return false;
               }
           }
         }
         processing();
         var selected_id = j('.selectedHouse:checked').prev().val();
         updateSelectedHousingSearch(selected_id,housingSearchFurnitureOption,housingSearchLandlordStatus);     
      }

    function clientUpdateHousingSearch(el,housingSearchId)
    {
       processing();
       var presentedToAdjuster = el.checked;
       updateHousingSearch(housingSearchId,presentedToAdjuster);    
    }

    function clientGenerateCreditCard()
    {
         ids.paymentSelectionPanel.dialog('open')
         j('body').css('overflow','hidden');
    }

    function clientGetNewCreditCard()
    {
       var placementPaymentType = j('[id$=placementPaymentType]').val();
       getNewCreditCard(placementPaymentType);
    }
      
    function clientRefreshPage()
    {
         window.top.location='/{!ServiceRequest__c.id}';
    }
      
      function clearDescendantFormElements(elementId)
      {
        // note: can have :hidden selector also. (input:hidden)?
        // var p = j(ids.newhotelRoomPBS.selector + ' :input');
        var x = j(ids.newhotelRoomPBS.selector + ' :input').not(':submit, :reset, :button');
        x.val('').removeAttr('checked').removeAttr('selected');
      }

      function radioButtonCheckBox(element, className)
      {
        var checkboxes = j('.' + className);
                        
        checkboxes.each
        ( 
            j.proxy( function( i, checkbox ) {
                    if (this.id != checkbox.id && j(checkbox).is(':checked') == true )
            {
              j(checkbox).removeAttr('checked');
            }
            }
            , element )
        );       
      }

      function toggleDisabledFormElements() 
      {
         j('.disabled').attr('disabled', true);
      }
      
      function toggleWarningMessages(adjuster,contact,srHold) 
      {
        var adjusterMessage = j('[id$=adjusterMessage]');
        var contactMessage = j('[id$=contactMessage]');
        var srOnHoldMessage = j('[id$=srOnHoldMessage]');
        
        if (adjuster == "")
        {       
            adjusterMessage.show();
        }
        else
        {
            adjusterMessage.hide();
        }
        
        if (contact == "")
        {       
            contactMessage.show();
        }
        else
        {
            contactMessage.hide();
        }
       
        if (srHold == 'true')
        {       
            srOnHoldMessage.show();
        }    
        else
        {
            srOnHoldMessage.hide();
        }
      }
      
      function jqRequiredField()
      {  
        j('.jqRequiredField').wrap('<div class="requiredInput" />').before('<div class="requiredBlock"></div>');
      }

      function jqDateField()
      {  
        j('.jqDateField').wrap('<div/>').before('<div class="requiredBlock"></div>');
      }

        function jqRequiredFieldLookup()
      {  
        j('[id$=costPayableParty]').parent().wrap('<div class="requiredInput" />').before('<div class="requiredBlock"></div>');
        j('[id$=costBillableParty]').parent().wrap('<div class="requiredInput" />').before('<div class="requiredBlock"></div>');
      } 
        
          
      function jqRequiredFieldBySelector(className)
      {
        if ( j('.' + className).parents('div.requiredInput').length == 0 )
        {
            j('.' + className).wrap('<div class="requiredInput" />').before('<div class="requiredBlock"></div>');
        }
      }
          
      function jqUndoRequiredFieldBySelector(className)
      {
        if ( j('.' + className).parents('div.requiredInput').length > 0 )
        {
            j('.' + className).parents('div.requiredInput').children('div.requiredBlock').remove();
            j('.' + className).unwrap('div.requiredInput');
        }
      }  
          
     function toggleRequiredIndicator(el,className)
     {
        hasContent = false;
        elements = j(el);  
        elements.each(function(index){ var t = j(el); if (j.trim(t.val()).length > 0) { hasContent = true; }});
        
        if (hasContent == true)
        {
            jqRequiredFieldBySelector(className);
        }
        else
        {
           jqUndoRequiredFieldBySelector(className);
        }
      }

      function toggleRequiredIndicatorCB(el,className)
     {
        if (el.attr('checked') == true)
        {
            jqRequiredFieldBySelector(className);
        }
        else
        {
           jqUndoRequiredFieldBySelector(className);
        }
      }
      
     function toggleRequiredIndicatorWithClear(el,className)
     {
        hasContent = false;
        elements = j(el);  
        elements.each(function(index){ var t = j(el); if (j.trim(t.val()).length > 0) { hasContent = true; }});
        
        if (hasContent == true)
        {
            jqRequiredFieldBySelector(className);
        }
        else
        {
           jqUndoRequiredFieldBySelector(className);
           j('.' + className).val('');  
        }
      }
      
     function toggleRequiredIndicatorOnValue(el,className,value)
     {
        hasValue = false;
        elements = j(el);  
        elements.each(function(index){ var t = j(el); if (j.trim(t.val()) == value) { hasValue = true; }});
        
        if (hasValue == true)
        {
            jqRequiredFieldBySelector(className);
        }
        else
        {
           jqUndoRequiredFieldBySelector(className);
            }
      }

     function toggleLookupRequiredIndicatorOnValue(el1,el2,value1)
     {
        hasValue = false;
        elements = j(el1);  
        elements.each(function(index){ var t = j(el1); if (j.trim(t.val()) == value1) { hasValue = true; }});
        
        if (hasValue == true)
        {
            j(el2).parent().unwrap('<div class="requiredInput" />').before('<div class="requiredBlock"></div>');
        }
        else
        {
           if (j(el2).parent().parent().attr('class') != 'requiredInput')
           {  
              j(el2).parent().wrap('<div class="requiredInput" />').before('<div class="requiredBlock"></div>');
           }    
        }
      }

     function toggleLookupRequiredIndicatorOnValue(el1,el2,value1,value2)
     {
        hasValue = false;
        elements = j(el1);  
        elements.each(function(index){ var t = j(el1); if (j.trim(t.val()) == value1 || j.trim(t.val()) == value2) { hasValue = true; }});
        
        if (hasValue == true)
        {
            j(el2).parent().unwrap('<div class="requiredInput" />').before('<div class="requiredBlock"></div>');
        }
        else
        {
           if (j(el2).parent().parent().attr('class') != 'requiredInput')
           {  
              j(el2).parent().wrap('<div class="requiredInput" />').before('<div class="requiredBlock"></div>');
           }    
        }
      }

       function toggleLookupRequiredIndicatorOnValue(el1,el2,value1,value2,value3)
     {
        hasValue = false;
        elements = j(el1);  
        elements.each(function(index){ var t = j(el1); if (j.trim(t.val()) == value1 || j.trim(t.val()) == value2 || j.trim(t.val()) == value3) { hasValue = true; }});
        
        if (hasValue == true)
        {
            j(el2).parent().unwrap('<div class="requiredInput" />').before('<div class="requiredBlock"></div>');
        }
        else
        {
           if (j(el2).parent().parent().attr('class') != 'requiredInput')
           {  
              j(el2).parent().wrap('<div class="requiredInput" />').before('<div class="requiredBlock"></div>');
           }    
        }
      }

        function toggleRequiredIndicatorNotOnValue(el,className,value)
     {
        hasValue = true;
        elements = j(el);  
        elements.each(function(index){ var t = j(el); if (j.trim(t.val()) == value) { hasValue = false; }});
        
        if (hasValue == true)
        {
            jqRequiredFieldBySelector(className);
        }
        else
        {
           jqUndoRequiredFieldBySelector(className);
        }
      }

     function toggleRequiredIndicatorOver5milesReason(el,className)
     {
        if (parseFloat(j(el).val()) > 5)
        {
            jqRequiredFieldBySelector(className);
        }
        else
        {
           jqUndoRequiredFieldBySelector(className);
        }
      }

      function clientMakeReadOnly()
      { 
        j('[id$=placementHSASigned]').parent('.dateInput').children('.dateFormat').hide();
        j('[id$=placementHSASigned]').attr("disabled","disabled");
        j('[id$=placementHSASigned]').css({backgroundColor:'transparent',borderStyle:'none',color:'black',fontSize:'inherit'});
        j('[id$=placementHR]').hide();
      }
      
      function checkPlacementStatus()
      { 
        var isPlacementMovedOut = j('[id$=hdnIsPlacementMovedOut]').text();
        var placementStatus = j(ids.placementStatus.selector).text();
        var hasActiveQuote = j('[id$=hdnHasActiveQuote]').text();      
        
        if (placementStatus == 'Quote' && hasActiveQuote == 'false')
        {
            updatePlacementStatus('Pending Confirmation');
        }
        
        if(isPlacementMovedOut == 'true')
        {
            clientMakeReadOnly(); 
        }
      }
      
      function clientOpenCostPanel(rentcosts,phRentcosts,phAbatementcosts,utilitiescosts)
      {
        var costRecordType = j(ids.costRecordTypeId.selector).text();
        switch(costRecordType){
            case "Cost":
                ids.costPanel.dialog('option', 'title', 'Cost');
                j('[id$=btnSaveCost]').val('Save Cost');
                j('[id$=costProrateType] option[value=""]').remove();
                if (rentcosts > 0 && j('[id$=costType]').val() != 'Rent')
                {
                    j('[id$=costType] option[value="Rent"]').remove();
                }
                if (phRentcosts > 0 && j('[id$=costType]').val() != 'Policyholder Rent')
                {
                  j('[id$=costType] option[value="Policyholder Rent"]').remove();
                }
                if (phAbatementcosts > 0 && j('[id$=costType]').val() != 'PH Abatement')
                {
                  j('[id$=costType] option[value="PH Abatement"]').remove();
                }
                if (utilitiescosts > 0 && j('[id$=costType]').val() != 'Utilities')
                {
                  j('[id$=costType] option[value="Utilities"]').remove();
                }
                ids.costPanel.dialog('open')
            break;
            case "Fee":
                ids.costPanel.dialog('option', 'title', 'Fee');
                j('[id$=btnSaveCost]').val('Save Fee');
                ids.costPanel.dialog('open')
            break;
            case "Deposit":
                ids.costPanel.dialog('option', 'title', 'Deposit');
                j('[id$=btnSaveCost]').val('Save Deposit');
                ids.costPanel.dialog('open')
            break;
        }
      }
      
      function clientSetupFurnitureOrderPicklists(hasSelectedHousingSearch)
      {
        j('[id$=furnitureOrderStatus] option[value=""]').remove();
        if (j('[id$=furnitureOrderName]').val() != '')
        {
            j('[id$=furnitureOrderStatus] option[value="Cancelled"]').remove();
        }
        if (hasSelectedHousingSearch == "false" && j('[id$=furnitureOrderStatus]').val() == "Working")
        {
            j('[id$=furnitureOrderStatus] option[value="Completed"]').remove(); 
        } 
        if (j('[id$=furnitureOrderIsPartial]').val() == "No")
        {
            j('[id$=furnitureOrderLevel] option[value=""]').hide();
        }
        if (j('[id$=furnitureOrderIsPartial]').val() != "")
        {
            j('[id$=furnitureOrderIsPartial] option[value=""]').hide();
        }
        clientToggleFurnitureOrderDependentPicklists();
      }
      
      function clientToggleFurnitureOrderDependentPicklists()
      {
        if (j('[id$=furnitureOrderLevel]').val() == '' || j('[id$=furnitureOrderIsPartial]').val() != "No")
        {
            j('.furnitureDetail').val('');
            j('.furnitureAppliances').val('');
            j('.furnitureHousewares').val('');
            
            if (j('[id$=furnitureOrderIsPartial]').val() != "No")
            { 
                j('[id$=furnitureOrderLevel]').val('')  
                j('[id$=furnitureOrderLevel]').attr('disabled', 'disabled')
            }
            else
            {
                j('[id$=furnitureOrderLevel]').attr('disabled', '') 
            }   
            j('[id$=furnitureOrderRefrigerator]').val('');
            j('[id$=furnitureOrderRefrigerator]').attr('disabled', 'disabled');
            j('[id$=furnitureOrderMicrowave]').val('');
            j('[id$=furnitureOrderMicrowave]').attr('disabled', 'disabled');
            j('[id$=furnitureOrderRange]').val('');
            j('[id$=furnitureOrderRange]').attr('disabled', 'disabled');
            j('[id$=furnitureOrderRangeType]').val('');
            j('[id$=furnitureOrderRangeType]').attr('disabled', 'disabled');
            j('[id$=furnitureOrderClothesWasher]').val('');
            j('[id$=furnitureOrderClothesWasher]').attr('disabled', 'disabled');
            j('[id$=furnitureOrderClothesDryer]').val('');
            j('[id$=furnitureOrderClothesDryer]').attr('disabled', 'disabled');
            j('[id$=furnitureOrderDryerType]').val('');
            j('[id$=furnitureOrderDryerType]').attr('disabled', 'disabled');
            j('[id$=furnitureOrderBedroomsNeedingHousewares]').val('');
            j('[id$=furnitureOrderBedroomsNeedingHousewares]').attr('disabled', 'disabled');
            j('[id$=furnitureOrderBathroomsNeedingHousewares]').val('');
            j('[id$=furnitureOrderBathroomsNeedingHousewares]').attr('disabled', 'disabled');
            
            j('.furnitureDetail').attr('disabled', 'disabled');
            j('.furnitureAppliances').attr('disabled', 'disabled');
            j('.furnitureHousewares').attr('disabled', 'disabled');
        }
        else
        {
            j('[id$=furnitureOrderLevel]').attr('disabled', '') 
            
            if (j('[id$=furnitureOrderLevel]').val() == "Level 1" || j('[id$=furnitureOrderLevel]').val() == "Level 3")
            {
                updateBedroomSelections("King Upgrade");
                j('.furnitureDetail option[value="King Upgrade"]').hide();
                j('.furnitureDetail option[value="King Bed w/ Headboard"]').show();
                j('.furnitureDetail').attr('disabled', '');
                j('.furnitureAppliances').attr('disabled', '');
                j('.furnitureHousewares').attr('disabled', '');
            }
            else
            {
                if (j('[id$=furnitureOrderLevel]').val() == "Level 2")
                {
                    updateBedroomSelections("King Bed w/ Headboard");               
                    j('.furnitureDetail option[value="King Bed w/ Headboard"]').hide();
                    j('.furnitureDetail option[value="King Upgrade"]').show();
                    j('.furnitureDetail').attr('disabled', '');
                    j('.furnitureAppliances').attr('disabled', '');
                    j('.furnitureHousewares').attr('disabled', '');
                }
            }
            if (j('[id$=furnitureOrderLevel]').val() == "Level 1" || j('[id$=furnitureOrderLevel]').val() == "Level 2")
            {
                updateDiningRoomSelections("Dining Chairs (4)");
                updateDiningRoomSelections("Dining Chairs (6) (Default)");
                j('[id$=furnitureOrderDiningRoom] option[value="Dining Chairs (4)"]').hide();
                j('[id$=furnitureOrderDiningRoom] option[value="Dining Chairs (6) (Default)"]').hide();
                j('[id$=furnitureOrderDiningRoom] option[value="Dining Chairs (4) (Default)"]').show();
                j('[id$=furnitureOrderDiningRoom] option[value="Dining Chairs (6)"]').show();
                
            }
            else
            {
                if (j('[id$=furnitureOrderLevel]').val() == "Level 3")
                {
                    updateDiningRoomSelections("Dining Chairs (4) (Default)");
                    updateDiningRoomSelections("Dining Chairs (6)");
                    j('[id$=furnitureOrderDiningRoom] option[value="Dining Chairs (4) (Default)"]').hide();
                    j('[id$=furnitureOrderDiningRoom] option[value="Dining Chairs (6)"]').hide();
                    j('[id$=furnitureOrderDiningRoom] option[value="Dining Chairs (4)"]').show();
                    j('[id$=furnitureOrderDiningRoom] option[value="Dining Chairs (6) (Default)"]').show();
                }
            }
         }  
      }
      
      function updateBedroomSelections(selectedValue)
      {
        if (j('[id$=furnitureOrderMasterBedroom]').val() == selectedValue)
        {
            j('[id$=furnitureOrderMasterBedroom]').val('');     
        }
        if (j('[id$=furnitureOrderAdditionalBedroom1]').val() == selectedValue)
        {
            j('[id$=furnitureOrderAdditionalBedroom1]').val('');    
        }
        if (j('[id$=furnitureOrderAdditionalBedroom2]').val() == selectedValue)
        {
            j('[id$=furnitureOrderAdditionalBedroom2]').val('');    
        }
        if (j('[id$=furnitureOrderAdditionalBedroom3]').val() == selectedValue)
        {
            j('[id$=furnitureOrderAdditionalBedroom3]').val('');    
        }
        if (j('[id$=furnitureOrderAdditionalBedroom4]').val() == selectedValue)
        {
            j('[id$=furnitureOrderAdditionalBedroom4]').val('');    
        }
        if (j('[id$=furnitureOrderAdditionalBedroom5]').val() == selectedValue)
        {
            j('[id$=furnitureOrderAdditionalBedroom5]').val('');    
        }
        if (j('[id$=furnitureOrderAdditionalBedroom6]').val() == selectedValue)
        {
            j('[id$=furnitureOrderAdditionalBedroom6]').val('');    
        }
        if (j('[id$=furnitureOrderAdditionalBedroom7]').val() == selectedValue)
        {
            j('[id$=furnitureOrderAdditionalBedroom7]').val('');    
        }
        if (j('[id$=furnitureOrderAdditionalBedroom8]').val() == selectedValue)
        {
            j('[id$=furnitureOrderAdditionalBedroom8]').val('');    
        }
        if (j('[id$=furnitureOrderAdditionalBedroom9]').val() == selectedValue)
        {
            j('[id$=furnitureOrderAdditionalBedroom9]').val('');    
        }
        if (j('[id$=furnitureOrderAdditionalBedroom10]').val() == selectedValue)
        {
            j('[id$=furnitureOrderAdditionalBedroom10]').val('');   
        }
      }
      
      function updateDiningRoomSelections(selectedValue)
      {
        if (j('[id$=furnitureOrderDiningRoom]').val() == selectedValue)
          {
               j('[id$=furnitureOrderDiningRoom]').val('');     
          }
      }
      
      function toggleFurnitureOrderFormElements() 
    {
         var furnitureOrderName = j('[id$=furnitureOrderName]').text();
         if (j('[id$=furnitureOrderStatusRO]').text() != '')
       {
          var furnitureOrderStatus = j('[id$=furnitureOrderStatusRO]').text();
       }
       else
       {
          var furnitureOrderStatus = j('[id$=furnitureOrderStatus]').val();
       }
         var furnitureOrderIsPartial = j(ids.furnitureOrderIsPartialRO.selector).text();
       var furnitureOrderPBS3 = j('[id$=furnitureOrderPBS3]');
       var furnitureOrderPBS4 = j('[id$=furnitureOrderPBS4]');
       var furnitureOrderPBS5 = j('[id$=furnitureOrderPBS5]');
       var appliancesPBS1 = j('[id$=appliancesPBS1]');
       var appliancesPBS2 = j('[id$=appliancesPBS2]');
       var appliancesPBS3 = j('[id$=appliancesPBS3]');
       var housewaresPBS1 = j('[id$=housewaresPBS1]');
         var btnSaveFurnitureOrder = j('[id$=btnSaveFurnitureOrder]');
         var btnCancelFurnitureOrder = j('[id$=btnCancelFurnitureOrder]');
         var btnExitFurnitureOrder = j('[id$=btnExitFurnitureOrder]');
         var hasActiveQuote = j('[id$=hdnHasActiveQuote]').text();
         var furnitureOrderCreatedAfterMoveIn = j(ids.furnitureOrderCreatedAfterMoveIn.selector).val();
         var placementStatus = j(ids.placementStatus.selector).text();
         
         if (furnitureOrderStatus != 'Working')
         {
            if (furnitureOrderStatus == 'Completed' && (hasActiveQuote == 'false' && furnitureOrderCreatedAfterMoveIn == 'false' || furnitureOrderCreatedAfterMoveIn == 'true' && placementStatus == 'Moved-In'))   
            {
                btnSaveFurnitureOrder.show();
                btnCancelFurnitureOrder.hide();
                btnExitFurnitureOrder.show();
            }
            else
            {
                btnSaveFurnitureOrder.hide();
                btnCancelFurnitureOrder.hide();
                btnExitFurnitureOrder.show();
            }

          if (furnitureOrderIsPartial == 'Yes')
          {
            furnitureOrderPBS3.hide();
            furnitureOrderPBS4.hide();
            furnitureOrderPBS5.hide();
            appliancesPBS1.hide();
            appliancesPBS2.hide();
            appliancesPBS3.hide();
            housewaresPBS1.hide();
          }
          else
          {
            furnitureOrderPBS3.show();
            furnitureOrderPBS4.show();
            furnitureOrderPBS5.show();
            appliancesPBS1.show();
            appliancesPBS2.show();
            appliancesPBS3.show();
            housewaresPBS1.show();
          }     
         }
         else
         {  
            if (furnitureOrderName == '')
            {
                btnSaveFurnitureOrder.show();
                btnCancelFurnitureOrder.show();
                btnExitFurnitureOrder.hide();
              }
              else
              {
                btnSaveFurnitureOrder.show();
                btnCancelFurnitureOrder.hide();
                btnExitFurnitureOrder.show();
              }
         }
         toggleFurnitureOrderFormBillableParty();

      }
      
      function toggleFurnitureOrderFormBillableParty() 
      {
         if (j('[id$=furnitureOrderStatusRO]').text() != '')
         {
            var furnitureOrderStatus = j('[id$=furnitureOrderStatusRO]').text();
         }
         else
         {
            var furnitureOrderStatus = j('[id$=furnitureOrderStatus]').val();
         }
         var furnitureOrderCost = j(ids.furnitureOrderCost.selector).val();
         var furnitureOrderFurnitureCost = j(ids.furnitureOrderFurnitureCost.selector).val();
         var furnitureOrderApplianceCost = j(ids.furnitureOrderApplianceCost.selector).val();
         var furnitureOrderElectronicsCost = j(ids.furnitureOrderElectronicsCost.selector).val();
         var furnitureOrderKitchenHousewaresCost = j(ids.furnitureOrderKitchenHousewaresCost.selector).val();
         var furnitureOrderBedBathHousewaresCost = j(ids.furnitureOrderBedBathHousewaresCost.selector).val();
         var furnitureOrderOtherHousewaresCost = j(ids.furnitureOrderOtherHousewaresCost.selector).val();
         var furnitureOrderSetupFee = j(ids.furnitureOrderSetupFee.selector).val();
         var furnitureOrderPetFee = j(ids.furnitureOrderPetFee.selector).val();
         var furnitureOrderDeliveryFee = j(ids.furnitureOrderDeliveryFee.selector).val();
         
         
         if (furnitureOrderCost != "")
           {
             j('[id$=furnitureOrderBillablePartyCost] option[value="Adjuster"]').show();
               j('[id$=furnitureOrderBillablePartyCost] option[value="Policyholder"]').show();
           }
           else
           {
               j('[id$=furnitureOrderBillablePartyCost] option[value="Adjuster"]').hide();
               j('[id$=furnitureOrderBillablePartyCost] option[value="Policyholder"]').hide();
           }
           toggleRequiredIndicatorWithClear(j(ids.furnitureOrderCost.selector), 'furnitureOrderBillablePartyCost')

         if (furnitureOrderFurnitureCost != "")
         {
           j('[id$=furnitureOrderBillablePartyFurnitureCost] option[value="Adjuster"]').show();
           j('[id$=furnitureOrderBillablePartyFurnitureCost] option[value="Policyholder"]').show();
           if (j('[id$=furnitureOrderBillablePartyFurnitureCost]').val() == "")
           { 
              j('[id$=furnitureOrderBillablePartyFurnitureCost] option[value="Adjuster"]').attr('selected','selected');
           }
         }
         else
         {
           j('[id$=furnitureOrderBillablePartyFurnitureCost] option[value="Adjuster"]').hide();
           j('[id$=furnitureOrderBillablePartyFurnitureCost] option[value="Policyholder"]').hide();
         }
         toggleRequiredIndicatorWithClear(j(ids.furnitureOrderFurnitureCost.selector), 'furnitureOrderBillablePartyFurnitureCost')

         if (furnitureOrderApplianceCost != "")
         {
           j('[id$=furnitureOrderBillablePartyApplianceCost] option[value="Adjuster"]').show();
           j('[id$=furnitureOrderBillablePartyApplianceCost] option[value="Policyholder"]').show();
           if (j('[id$=furnitureOrderBillablePartyApplianceCost]').val() == "")
           { 
              j('[id$=furnitureOrderBillablePartyApplianceCost] option[value="Adjuster"]').attr('selected','selected');
           }
         }
         else
         {
           j('[id$=furnitureOrderBillablePartyApplianceCost] option[value="Adjuster"]').hide();
           j('[id$=furnitureOrderBillablePartyApplianceCost] option[value="Policyholder"]').hide();
         }
         toggleRequiredIndicatorWithClear(j(ids.furnitureOrderApplianceCost.selector), 'furnitureOrderBillablePartyApplianceCost')

          if (furnitureOrderElectronicsCost != "")
         {
           j('[id$=furnitureOrderBillablePartyElectronicsCost] option[value="Adjuster"]').show();
           j('[id$=furnitureOrderBillablePartyElectronicsCost] option[value="Policyholder"]').show();
           if (j('[id$=furnitureOrderBillablePartyElectronicsCost]').val() == "")
           { 
              j('[id$=furnitureOrderBillablePartyElectronicsCost] option[value="Adjuster"]').attr('selected','selected');
           }
         }
         else
         {
           j('[id$=furnitureOrderBillablePartyElectronicsCost] option[value="Adjuster"]').hide();
           j('[id$=furnitureOrderBillablePartyElectronicsCost] option[value="Policyholder"]').hide();
         }
         toggleRequiredIndicatorWithClear(j(ids.furnitureOrderElectronicsCost.selector), 'furnitureOrderBillablePartyElectronicsCost')

         if (furnitureOrderKitchenHousewaresCost != "")
         {
           j('[id$=furnitureOrderBillablePartyKitchenHousewaresCost] option[value="Adjuster"]').show();
           j('[id$=furnitureOrderBillablePartyKitchenHousewaresCost] option[value="Policyholder"]').show();
           if (j('[id$=furnitureOrderBillablePartyKitchenHousewaresCost]').val() == "")
           { 
              j('[id$=furnitureOrderBillablePartyKitchenHousewaresCost] option[value="Adjuster"]').attr('selected','selected');
           }
         }
         else
         {
           j('[id$=furnitureOrderBillablePartyKitchenHousewaresCost] option[value="Adjuster"]').hide();
           j('[id$=furnitureOrderBillablePartyKitchenHousewaresCost] option[value="Policyholder"]').hide();
         }
         toggleRequiredIndicatorWithClear(j(ids.furnitureOrderKitchenHousewaresCost.selector), 'furnitureOrderBillablePartyKitchenHousewaresCost')

         if (furnitureOrderBedBathHousewaresCost != "")
         {
           j('[id$=furnitureOrderBillablePartyBedBathHousewaresCost] option[value="Adjuster"]').show();
           j('[id$=furnitureOrderBillablePartyBedBathHousewaresCost] option[value="Policyholder"]').show();
           if (j('[id$=furnitureOrderBillablePartyBedBathHousewaresCost]').val() == "")
           { 
              j('[id$=furnitureOrderBillablePartyBedBathHousewaresCost] option[value="Adjuster"]').attr('selected','selected');
           }
         }
         else
         {
           j('[id$=furnitureOrderBillablePartyBedBathHousewaresCost] option[value="Adjuster"]').hide();
           j('[id$=furnitureOrderBillablePartyBedBathHousewaresCost] option[value="Policyholder"]').hide();
         }
         toggleRequiredIndicatorWithClear(j(ids.furnitureOrderBedBathHousewaresCost.selector), 'furnitureOrderBillablePartyBedBathHousewaresCost')

         if (furnitureOrderOtherHousewaresCost != "")
         {
           j('[id$=furnitureOrderBillablePartyOtherHousewaresCost] option[value="Adjuster"]').show();
           j('[id$=furnitureOrderBillablePartyOtherHousewaresCost] option[value="Policyholder"]').show();
           if (j('[id$=furnitureOrderBillablePartyOtherHousewaresCost]').val() == "")
           { 
              j('[id$=furnitureOrderBillablePartyOtherHousewaresCost] option[value="Adjuster"]').attr('selected','selected');
           }
         }
         else
         {
           j('[id$=furnitureOrderBillablePartyOtherHousewaresCost] option[value="Adjuster"]').hide();
           j('[id$=furnitureOrderBillablePartyOtherHousewaresCost] option[value="Policyholder"]').hide();
         }
         toggleRequiredIndicatorWithClear(j(ids.furnitureOrderOtherHousewaresCost.selector), 'furnitureOrderBillablePartyOtherHousewaresCost')
         
             if (furnitureOrderSetupFee != "")
           {
               j('[id$=furnitureOrderBillablePartySetupFee] option[value="Adjuster"]').show();
               j('[id$=furnitureOrderBillablePartySetupFee] option[value="Policyholder"]').show();
            
             if (j('[id$=serviceRequestAdjusterToPay]').val() == 'Deposits and Fees' || j('[id$=serviceRequestAdjusterToPay]').val() == 'Fees')
             {
                    j('[id$=furnitureOrderBillablePartySetupFee] option[value="Adjuster"]').attr('selected','selected');    
             }
             else
             {
                    if (j('[id$=serviceRequestPolicyholderToPay]').val() == 'Deposits and Fees' || j('[id$=serviceRequestPolicyholderToPay]').val() == 'Fees')
                    {
                        j('[id$=furnitureOrderBillablePartySetupFee] option[value="Policyholder"]').attr('selected','selected');    
                    }
             }
           }
           else
           {
               j('[id$=furnitureOrderBillablePartySetupFee] option[value="Adjuster"]').hide();
               j('[id$=furnitureOrderBillablePartySetupFee] option[value="Policyholder"]').hide();  
           }
           toggleRequiredIndicatorWithClear(j(ids.furnitureOrderSetupFee.selector), 'furnitureOrderBillablePartySetupFee')
         
         if (furnitureOrderPetFee != "")
           {
                 j('[id$=furnitureOrderBillablePartyPetFee] option[value="Adjuster"]').show();
                 j('[id$=furnitureOrderBillablePartyPetFee] option[value="Policyholder"]').show();
                
                 if (j('[id$=serviceRequestAdjusterToPay]').val() == 'Deposits and Fees' || j('[id$=serviceRequestAdjusterToPay]').val() == 'Fees')
                 {
                     j('[id$=furnitureOrderBillablePartyPetFee] option[value="Adjuster"]').attr('selected','selected'); 
                 }
             else
             {
                    if (j('[id$=serviceRequestPolicyholderToPay]').val() == 'Deposits and Fees' || j('[id$=serviceRequestPolicyholderToPay]').val() == 'Fees')
                    {
                        j('[id$=furnitureOrderBillablePartyPetFee] option[value="Policyholder"]').attr('selected','selected');  
                    }
             }      
           }
           else
           {
               j('[id$=furnitureOrderBillablePartyPetFee] option[value="Adjuster"]').hide();
               j('[id$=furnitureOrderBillablePartyPetFee] option[value="Policyholder"]').hide();
           }
           toggleRequiredIndicatorWithClear(j(ids.furnitureOrderPetFee.selector), 'furnitureOrderBillablePartyPetFee')
         
         if (furnitureOrderDeliveryFee != "")
           {
               j('[id$=furnitureOrderBillablePartyDeliveryFee] option[value="Adjuster"]').show();
               j('[id$=furnitureOrderBillablePartyDeliveryFee] option[value="Policyholder"]').show();
            
               if (j('[id$=serviceRequestAdjusterToPay]').val() == 'Deposits and Fees' || j('[id$=serviceRequestAdjusterToPay]').val() == 'Fees')
               {
                   j('[id$=furnitureOrderBillablePartyDeliveryFee] option[value="Adjuster"]').attr('selected','selected');  
               }
               else
               {
                   if (j('[id$=serviceRequestPolicyholderToPay]').val() == 'Deposits and Fees' || j('[id$=serviceRequestPolicyholderToPay]').val() == 'Fees')
                   {
                       j('[id$=furnitureOrderBillablePartyDeliveryFee] option[value="Policyholder"]').attr('selected','selected');  
                   }
               }        
           }
           else
           {
               j('[id$=furnitureOrderBillablePartyDeliveryFee] option[value="Adjuster"]').hide();
               j('[id$=furnitureOrderBillablePartyDeliveryFee] option[value="Policyholder"]').hide();
           }
           toggleRequiredIndicatorWithClear(j(ids.furnitureOrderDeliveryFee.selector), 'furnitureOrderBillablePartyDeliveryFee')
      } 
      
      function toggleQuoteFormElements() 
      {
         if (j('[id$=quoteStatusRO]').text() != '')
         {
            var quoteStatus = j('[id$=quoteStatusRO]').text();
         }
         else
         {
            var quoteStatus = j('[id$=quoteStatus]').val();
            j('[id$=quoteStatus] option[value=""]').remove();
         }
         var btnSaveQuote = j('[id$=btnSaveQuote]');
         var btnCancelQuote = j('[id$=btnCancelQuote]');
         var btnExitQuote = j('[id$=btnExitQuote]');
         if (quoteStatus == '') 
         {
            btnSaveQuote.show();
            btnCancelQuote.show();
            btnExitQuote.hide();
         }
         else
         {
            if (quoteStatus == 'Rejected')
            {
                btnSaveQuote.hide();
                btnCancelQuote.hide();
                btnExitQuote.show();
            }
            else
            {
                if (quoteStatus == 'Approved')
                {
                    btnSaveQuote.hide();
                }
                else
                {
                    btnSaveQuote.show();
                }
                btnCancelQuote.hide();
                btnExitQuote.show();
            }
         }
         
         j('[id$=quoteBillingPreferences] option[value=""]').remove();
         
         j('[id$=quoteMarkupAdjustmentReason]').attr("disabled","disabled");
         j('[id$=quoteMarkupAuthorizedBy]').attr("disabled","disabled");
         j('.lookupIcon').hide();
         
      }
      
      function setZIndexForDatepicker(el)
      {
        var e = j(el);
        var zindex = e.css('z-index');
        j('#datePicker').css('z-index', 500000);
      }
      
      function lookupPick(a, b, c, d, e, f, g, j)  
      {
        b = {
        parentIdElement: getElementsByNameCS(b)[0],parentEditElement: getElementsByNameCS(c)[0],
        parentEditOldValueElement: getElementsByNameCS(c + "_lkold")[0],
        relatedFieldElement: getElementsByNameCS(d)[0],
        extraNameElement: getElementsByNameCS(j)[0],
        modElement: getElementsByNameCS(c + "_mod")[0]};
        return doLookupPick(a, b, e, f, false, true, g)
      }
    
      function lookupPick2(a, b, c, d, e, f, g, j, l, h) 
      {
        b = { 
        parentIdElement: getElementsByNameCS(b)[0],
        parentEditElement: getElementsByNameCS(c)[0],
        parentEditOldValueElement: getElementsByNameCS(c + "_lkold")[0],
        extraNameElement: getElementsByNameCS(f)[0],
        extraIdElement: getElementsByNameCS(j)[0],
        extraEditOldValueElement: getElementsByNameCS(f + "_lkold")[0],
        modElement: getElementsByNameCS(c + "_mod")[0]};
        return doLookupPick(a, b, d, e, h, false, null, g, l)
      } 
      
      function noenter(ev)  
      {
         // checks to see if enter key was pressed.  If so call the refresh action function so the page gets refreshed. 
         if (window.event && window.event.keyCode == 13 || ev.which == 13) 
         {
            clientUpdatePlacement();
            return false;
         } 
         else 
         {
            return true;
         }
      }
      
      function setupServiceRequestSection() 
      {
        j('[id$=serviceRequestAdjusterToPay] option[value=""]').remove();
      }
      
      function setupPlacementSection() 
      {
        j('[id$=placementReturnDepositTo] option[value=""]').remove();
        j('[id$=placementRecurringPaymentType] option[value=""]').remove();
        j('[id$=placementNTVSendVia] option[value=""]').remove();
        clientToggleReasonFields();
      } 
      
      function processing()
      {
        j.blockUI({ message: '<h1><img src={!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')} /> Processing...</h1>' }); 
      }
      
      function stopProcessing()
      {
        j.unblockUI(); 
      }
      
      function openConga(URL) 
      { 
        window.open(URL, '','scrollbars=yes,menubar=no,height=600,width=800,resizable=yes, toolbar=no,location=no,status=yes'); 
      }
      
      function printElement(elem, append, delimiter) 
      {
        var domClone = elem.cloneNode(true);

        var $printSection = document.getElementById("printSection");

        if (!$printSection) 
        {
            var $printSection = document.createElement("div");
            $printSection.id = "printSection";
            document.body.appendChild($printSection);
        }

        if (append !== true) 
        {
            $printSection.innerHTML = "";
        }
        else if (append === true) 
        {
            if (typeof (delimiter) === "string") 
            {
                $printSection.innerHTML += delimiter;
            }
            else if (typeof (delimiter) === "object") 
            {
                $printSection.appendChlid(delimiter);
            }
        }
        $printSection.appendChild(domClone);
        
        window.print();
      }            
            
      j(document).ready(function() 
      {
          ids.housingSearchPanel.dialog({autoOpen: false,title: "Housing Search", resizable: false, closeOnEscape: true, modal: true, height: 735, width: 1200});
          ids.furnitureOnlySearchPanel.dialog({autoOpen: false,title: "Furniture Only Search", resizable: false, closeOnEscape: true, modal: true, height: 580, width: 1000});
          ids.housingSearchCostsPanel.dialog({autoOpen: false,title: "Costs", resizable: false, closeOnEscape: true, modal: true, height: 285, width: 1000});
          ids.costPanel.dialog({autoOpen: false,title: "Cost", resizable: false, closeOnEscape: true, modal: true, height: 300, width: 1000, position: ['center',100]});
          ids.furnitureOrderPanel.dialog({autoOpen: false,title: "Furniture Order", resizable: false, closeOnEscape: true, modal: true, height: 800, width: 1200});
          ids.quotePanel.dialog({autoOpen: false,title: "Housing Quote", resizable: false, closeOnEscape: true, modal: true, height: 600, width: 1300});
          ids.newLandlordAccountPanel.dialog({autoOpen: false,title: "Landlord Account", closeOnEscape: true, modal: true, height: 750, width: 650});
          ids.pageRefreshPanel.dialog({autoOpen: false,title: "Page Error", resizable: false, closeOnEscape: false, modal: true, height: 300, width: 500});
          j(ids.pageRefreshPanel).dialog("widget").find(".ui-dialog-titlebar-close").hide(); 
          ids.paymentSelectionPanel.dialog({autoOpen: false,title: "Credit Card Selection", resizable: false, closeOnEscape: true, modal: true, height: 300, width: 300});   
                                                     
          toggleCommandButtons();
          togglePageBlockSections();
          toggleDisabledFormElements();
          jqRequiredField();
          checkPlacementStatus();
          setupServiceRequestSection();
          setupPlacementSection();
          toggleWarningMessages('{!claim.Adjuster__c}','{!claim.Policyholder__c}','{!ServiceRequest.Hold__c}')
          j('.countable3').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800});
          j('.countable5').jqEasyCounter({'maxChars': 255,'maxCharsWarning': 225});
      });
        
    </script>
        
   </apex:form>
   <apex:relatedList subject="{!Placement}" list="NotesAndAttachments" id="placementNotesAndAttachments"/> 
   <apex:relatedList subject="{!ServiceRequest}" list="OpenActivities" id="serviceRequestOpenActivities"/>  
   <apex:relatedList subject="{!ServiceRequest}" list="ActivityHistories" id="serviceRequestActivityHistories"/>  
</apex:page>