<apex:page standardController="ServiceRequest__c" extensions="HotelServiceRequestControllerExtension" showHeader="true" sidebar="true" tabStyle="ServiceRequest__c" title="Hotel Entry Page">
    <script type="text/javascript" src="https://code.jquery.com/jquery-1.10.2.js"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.jQuery142, 'jQuery1.4.2/js/jquery-1.4.2.min.js')}"></script>
    <apex:stylesheet value="{!URLFOR($Resource.jQuery142, 'jQuery1.4.2/css/ui-lightness/jquery-ui-1.8.custom.css')}" />
    <script type="text/javascript" src="{!URLFOR($Resource.jQuery142, 'jQuery1.4.2/js/jquery-ui-1.8.custom.min.js')}"></script>
    <script src="{!URLFOR($Resource.CharCounter)}" type="text/javascript"></script>
    <script src="{!URLFOR($Resource.BlockUI)}" type="text/javascript"></script>
    
    <link type="text/css" rel="stylesheet" href="{!URLFOR($Resource.HotelEntryCss)}" />  

    <script type="text/javascript"> 
        var j = jQuery.noConflict();  
     
        function jq(myid)  
        {     
                return '#' + myid.replace(/(:|\.)/g,'\\\$1'); 
        }
    
            var ids = new Object();
            
            //keeps datePicker widget from rendering on page load. 
            function setFocusOnLoad() {}
    </script> 
    
  <apex:pageMessage id="adjusterMessage" 
                                    severity="warning" 
                                    strength="1"
                                    rendered="{!claim.Adjuster__c == null}"
                                    summary="An adjuster must be added to the claim before Hotel Quote documents can be generated"
                                    />
  <apex:pageMessage id="contactMessage" 
                                    severity="warning" 
                                    strength="1"
                                    rendered="{!claim.Policyholder__c == null}"
                                    summary="A policyholder must be added to the claim before Hotel Quote documents can be generated"
                                    /> 
 
  <apex:messages id="mainMessages"></apex:messages> 
 
  <apex:sectionHeader title="Enter Hotel Information" subtitle="{!ServiceRequest__c.Opportunity__r.name}"></apex:sectionHeader>
  <chatter:feedWithFollowers entityId="{!ServiceRequest__c.Id}" showHeader="true"/>
  <apex:form id="hotelEntryForm">
      <apex:pageBlock title="" mode="maindetail" id="mainPageBlock">
        <apex:pageBlockButtons location="top" id="mainPageButtons">
            <apex:actionStatus id="mainPageStatus" >
                    <apex:facet name="stop">
                        <apex:outputPanel >
                            <apex:commandButton value="Add Hotel Option" 
                                            onclick="addHotelOption();return false;" 
                                            id="btnAddHotelSearch" 
                                            style="display:none"/>
                            <apex:commandButton value="Add Hotel Room" 
                                            onclick="addHotelRoom();return false;" 
                                            id="btnAddHotelRoom" 
                                            style="display:none" />
                            <apex:commandButton value="Billing Completed" 
                                            onclick="billingCompletedFunc();return false;" 
                                            id="btnBillingCompleted" 
                                            style="display:none" />
                            <apex:commandButton value="Undo Billing Completed" 
                                            onclick="undoBillingCompletedFunc();return false;" 
                                            id="btnUndoBillingCompleted" 
                                            style="display:none" />
                        </apex:outputPanel>                        
                    </apex:facet>
                    <apex:facet name="start">
                        <apex:outputPanel >
                            <apex:image url="{!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')}"></apex:image>
                            <apex:outputText ><b>Processing...</b></apex:outputText>
                        </apex:outputPanel> 
                    </apex:facet>    
           </apex:actionStatus> 
           <apex:CommandLink onclick="window.open('/apex/ActivityTimeLine?claimId={!ServiceRequest__c.Opportunity__c}')" styleClass="btn" style="text-decoration:none;padding:4px;" >Activity Timeline</apex:commandLink> 
       </apex:pageBlockButtons>
       
       <div id="serviceRequest-errors" class="jqError">
           <ul id="serviceRequest-error-list"></ul>
       </div>
     
     <apex:pageBlockSection title="Service Request" columns="2" id="serviceRequestPBS1" collapsible="false">
         <apex:facet name="header"><img src="/img/icon/desk16.png"/><font size="2"> Service Request</font></apex:facet>
          <apex:outputField value="{!ServiceRequest__c.Name}" id="serviceRequestName"/>
          <apex:inputField value="{!ServiceRequest__c.High_Priority__c}" id="serviceRequestHighPriority" onchange="clientSaveServiceRequest()"/>
          <apex:outputField value="{!ServiceRequest__c.Opportunity__c}" id="serviceRequestOpportunity"/>
          <apex:outputField value="{!ServiceRequest__c.Status__c}" id="serviceRequestStatus"/>
          <apex:outputField value="{!ServiceRequest__c.Opportunity__r.Reports_TeamNumber__c}" id="serviceRequestClaimTeam"/>
          <apex:pageBlockSectionItem >                  
              <apex:outputLabel >Initial Call being worked by</apex:outputLabel>              
              <apex:outputPanel id="userbuttonsId">               
                  
                  <apex:inputField value="{!ServiceRequest__c.Initial_SR_being_worked_by__c}" rendered="{!IF((ServiceRequest__c.Initial_SR_being_worked_by__c == null || $Profile.Name == 'Operations Manager' || (ServiceRequest__c.Initial_SR_being_worked_by__c != null && ServiceRequest__c.Initial_SR_being_worked_by__c == $User.Id)) && !ServiceRequest__c.Hold__c, true, false)}" id="InitialSRAssigned" onchange="clientSaveServiceRequest()"/>                
                  <apex:outputField value="{!ServiceRequest__c.Initial_SR_being_worked_by__c}" rendered="{!IF((ServiceRequest__c.Initial_SR_being_worked_by__c != null && $Profile.Name != 'Operations Manager' && ServiceRequest__c.Initial_SR_being_worked_by__c != $User.Id) || ServiceRequest__c.Hold__c, true, false)}"  />
                  <apex:inputField style="display:none;" value="{!ServiceRequest__c.Initial_SR_being_worked_by__c}" id="lockInitialSRAssigned" />
                  
                  &nbsp;                
                  <apex:commandButton rendered="{!IF((ServiceRequest__c.Initial_SR_being_worked_by__c == null || $Profile.Name == 'Operations Manager' || (ServiceRequest__c.Initial_SR_being_worked_by__c != null && ServiceRequest__c.Initial_SR_being_worked_by__c == $User.Id)) && !ServiceRequest__c.Hold__c, true, false)}" onclick="currentUserUpdateOnSRWorkedByFun()" value="Click here if you're working on this Initial Call" reRender="serviceRequestPBS1,userbuttonsId,hiddenBooleanFlag" />                
                  <apex:inputText style="display:none;" id="hiddenBooleanFlag" value="{!SRBeingWorkedBy}" />                                  
              </apex:outputPanel>               
          </apex:pageBlockSectionItem>            
          <apex:pageBlockSectionItem ></apex:pageBlockSectionItem>
          <apex:outputField value="{!ServiceRequest__c.Initial_Call_Date__c}" id="serviceRequestInitialCallDateRO" rendered="{!hasSelectedHotelSearch && isOperationsDirector == false}"/>
          <apex:inputField value="{!ServiceRequest__c.Initial_Call_Date__c}" id="serviceRequestInitialCallDate" rendered="{!hasSelectedHotelSearch==false || isOperationsDirector}" onchange="clientSaveServiceRequest()"/>
          <apex:inputField value="{!ServiceRequest__c.DWO_Reason_Code__c}" id="serviceRequestDWOReasonCode" rendered="{!hasSelectedHotelSearch==false}" onchange="clientSaveServiceRequest()"/>
          <apex:pageBlockSectionItem rendered="{!hasSelectedHotelSearch}">&nbsp;</apex:pageBlockSectionItem>
          <apex:outputField value="{!ServiceRequest__c.Initial_Contact_Date__c}" id="serviceRequestInitialContactDateRO" rendered="{!hasSelectedHotelSearch && isOperationsDirector == false}"/>
          <apex:inputField value="{!ServiceRequest__c.Initial_Contact_Date__c}" id="serviceRequestInitialContactDate" rendered="{!hasSelectedHotelSearch==false || isOperationsDirector}" onchange="clientSaveServiceRequest()"/>
          <apex:outputField value="{!ServiceRequest__c.DWO_Date__c}" rendered="{!ServiceRequest.Status__c == 'Lost Opportunity'}"/>
          <apex:pageBlockSectionItem rendered="{!ServiceRequest.Status__c != 'Lost Opportunity'}"><apex:outputText >&nbsp;</apex:outputText></apex:pageBlockSectionItem>
          <apex:outputField value="{!ServiceRequest__c.First_Property_Presented__c}" id="firstPropertyPresentedRO" rendered="{!!ISBLANK(ServiceRequest__c.First_Property_Presented__c) && isOperationsDirector == false}"/>
          <apex:inputField value="{!ServiceRequest__c.First_Property_Presented__c}" id="firstPropertyPresented" rendered="{!ISBLANK(ServiceRequest__c.First_Property_Presented__c) || isOperationsDirector}" onclick="setZIndexForDatepicker(this);" onchange="clientSaveServiceRequest()"/>
          <apex:outputField value="{!ServiceRequest__c.Opportunity__r.Alerts__c}" id="serviceRequestClaimAlerts"/>
          <apex:outputField value="{!ServiceRequest__c.Hold__c}" id="serviceRequestHoldRO" rendered="{!ServiceRequest.Status__c == 'Lost Opportunity'}"/>
          <apex:inputField value="{!ServiceRequest__c.Hold__c}" id="serviceRequestHold" rendered="{!ServiceRequest.Status__c != 'Lost Opportunity'}" onchange="clientSaveServiceRequest()"/>
          <apex:pageBlockSectionItem ></apex:pageBlockSectionItem>              
          <!--<apex:outputField value="{!ServiceRequest__c.Hold_Follow_Up_Date__c}" id="serviceRequestHoldFollowupdateRO" rendered="{!ServiceRequest.Status__c == 'Lost Opportunity'}"/>-->             
          <apex:inputField value="{!ServiceRequest__c.Hold_Follow_Up_Date__c }" id="serviceRequestHoldFollowupdate" onchange="clientSaveServiceRequest()"/>
          <apex:pageBlockSectionItem />
          <apex:pageBlockSectionItem />
      </apex:pageBlockSection>
      
      <apex:pageblockSection id="serviceRequestPBS2" columns="1">
          <apex:pageBlockSectionItem >
             <apex:outputText >High Priority Notes</apex:outputText>
             <apex:inputTextArea value="{!ServiceRequest__c.High_Priority_Notes__c}" cols="170" rows="3" id="serviceRequestHighPriorityNotes" styleclass="countable2" style="color:red" onchange="clientSaveServiceRequest()"/>
          </apex:pageBlockSectionItem>
      </apex:pageblockSection>
      
      <apex:pageBlockSection columns="2" id="serviceRequestPBS3" collapsible="false">
          <apex:outputField value="{!ServiceRequest__c.CreatedById}"></apex:outputField>
          <apex:outputField value="{!ServiceRequest__c.CreatedDate}"></apex:outputField>
      </apex:pageBlockSection>  
      
      <apex:actionFunction name="pcSaveServiceRequest"
                           rerender="hdnHasPlacement"
                           oncomplete="clientSaveServiceRequest()">
      </apex:actionFunction>
       <!-- Apostletech Code Changes -->
      <apex:actionFunction name="saveServiceRequest"
                           action="{!saveServiceRequest}"
                           status="mainPageStatus"
                           rerender="mainPageButtons,mainMessages,serviceRequestPBS1,serviceRequestPBS2,placementPBS1,hotelRoomPBS,mainbuttonsPanel,btnAddHotelSearch,relatedid"
                           oncomplete="DisableOnHold();stopProcessing();toggleCommandButtons();togglePageBlockSections();toggleWarningMessages('{!claim.Adjuster__c}','{!claim.Policyholder__c}');j('.countable1').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800});j('.countable2').jqEasyCounter({'maxChars': 255,'maxCharsWarning': 225})">
      
      </apex:actionFunction>
      
      <!-- APostletech Code Changes -->             
      <apex:actionFunction name="currentUserUpdateOnSRWorkedBy"             
                           action="{!currentUserUpdateOnSRWorkedBy}"                
                           status="mainPageStatus"              
                           rerender="mainPageButtons,mainMessages,serviceRequestPBS1,serviceRequestPBS2,placementPBS1,hotelRoomPBS,relatedid"               
                           oncomplete="DisableOnHold();stopProcessing();toggleCommandButtons();togglePageBlockSections();toggleWarningMessages('{!claim.Adjuster__c}','{!claim.Policyholder__c}');j('.countable1').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800});j('.countable2').jqEasyCounter({'maxChars': 255,'maxCharsWarning': 225})">              
                        
      </apex:actionFunction>
      
      </apex:pageblock>
           
      <apex:pageblock mode="maindetail" id="mainDetailPB">

      <apex:pageBlockSection id="hotelSearchesPBS" title="Hotel Searches">
         <apex:facet name="header"><img src="/img/icon/telescope16.png"/><font size="2"> Hotel Options</font></apex:facet>
      </apex:pageBlockSection>
      <div id="hotelSearches-errors" class="jqError">
         <ul id="hotelSearches-error-list"></ul>
      </div>
      <apex:pageblockSection id="hotelSearchesPBS1" columns="1">   
        <apex:outputText rendered="{!hotelSearches.size = 0 && ServiceRequest.Status__c!='Lost Opportunity'}">No Hotel Options created yet. Please click on the 'Add Hotel Option' button above to add some.</apex:outputText>
        <apex:pageBlockTable value="{!hotelSearches}" var="newHotelSearch" id="hotelSearches" rendered="{!hotelSearches.size > 0}"> 
          <apex:column value="{!newHotelSearch.Sequence_Number__c}" headerClass="clsCenter" style="width:80px;text-align:center"/>
          <apex:column value="{!newHotelSearch.Name}" style="width:100px"/>
          <apex:column value="{!newHotelSearch.Hotel__c}"/>
          <apex:column value="{!newHotelSearch.Hotel_Name__c}"/>
          <apex:column value="{!newHotelSearch.Hotel_Phone__c}"/> 
          <apex:column headerValue="Distance from Damaged Property" rendered="{!!hasSelectedHotelSearch}" style="width:200px">
          <apex:inputField id="hotelSearchDistance" value="{!newHotelSearch.Distance_from_Damaged_Property__c}" rendered="{!!hasSelectedHotelSearch}" onchange="clientUpdateSearchDistanceToDamagedProp(this, '{!newHotelSearch.Id}')" style="width:70px;text-align:right"/>
          </apex:column>
          <apex:column headerValue="Distance from Damaged Property" value="{!newHotelSearch.Distance_from_Damaged_Property__c}" rendered="{!hasSelectedHotelSearch}" headerClass="clsRight" style="width:200px;text-align:right"/> 
          <apex:column headerValue="Selected" headerClass="clsCenter" style="width:200px;text-align:center"> 
         
          <apex:inputHidden value="{!newHotelSearch.Id}"/>
          <apex:inputField value="{!newHotelSearch.Selected__c}" 
                                styleClass="selectedHotel {! IF(hasHotelRooms , 'disabled', IF(hasCompletedClaim , '', 'disabled'))}" 
                                onclick="radioButtonCheckBox(this, 'selectedHotel');clientValidateSelectedHotelSearch('{!newHotelSearch.Distance_from_Damaged_Property__c}')"/>
          </apex:column>
        </apex:pageBlockTable>
        </apex:pageBlockSection> 
        
        <apex:actionFunction name="pcSelectedHotelSearch"
                             rerender="hdnHasPlacement,hdnHasHotelRooms"
                             oncomplete="clientUpdateSelectedHotelSearch();j('.selectedHotel:checked').removeAttr('checked')">
        </apex:actionFunction>
        
        <apex:actionFunction name="updateSelectedHotelSearch"
                             action="{!updateSelectedHotelSearch}"
                             status="paymentSelectionStatus"
                             rerender="hdnSelectedHotelSearch,hdnHasPlacement,hdnHasHotelRooms,hdnHasUnbilledRooms,hdnIsBillingSpecialist,hdnIsBillingCompleted,hdnIsPlacementCheckedOut,placementHotelLookup,placementPBS1,placementDocumentLinksPBS,
                             placementLinksPBS,placementHistoryPBS,serviceRequestPBS1,mainMessages,mainPageButtons"
                             oncomplete="clientGetNewCreditCard()">
                    <apex:param name="hotelSearchId" value=""/>
                    <apex:param name="placementPaymentType" value=""/>
        </apex:actionFunction>
       
        <apex:actionFunction name="getNewCreditCard"
                          action="{!getNewCreditCard}"
                          status="paymentSelectionStatus"
                          rerender="hdnSelectedHotelSearch,hdnHasPlacement,hdnHasHotelRooms,hdnHasUnbilledRooms,hotelSearches,placementPBS1,placementLinksPBS,placementDocumentLinksPBS,placementHistoryPBS,serviceRequestPBS1,mainMessages,mainPageButtons"
                          oncomplete="toggleCommandButtons();togglePageBlockSections();j('.selectedHotel').not(':checked').attr('disabled', 'disabled');ids.paymentSelectionPanel.dialog('close');j('body').css('overflow','scroll');j('.countable1').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800})">
        </apex:actionFunction> 
        
         <apex:actionFunction name="updateUnSelectedHotelSearch"
                             action="{!updateSelectedHotelSearch}"
                             status="mainPageStatus"
                             rerender="hdnSelectedHotelSearch,hdnHasPlacement,hdnHasHotelRooms,hdnHasUnbilledRooms,hdnIsBillingSpecialist,hdnIsBillingCompleted,hdnIsPlacementCheckedOut,placementHotelLookup,hotelSearches,placementPBS1,placementDocumentLinksPBS,placementLinksPBS,placementHistoryPBS,serviceRequestPBS1,mainMessages,mainPageButtons"
                             oncomplete="stopProcessing();toggleCommandButtons();togglePageBlockSections()">
                    <apex:param name="hotelSearchId" value=""/>
                    <apex:param name="placementPaymentType" value=""/>
        </apex:actionFunction>
        
      
        <apex:actionFunction name="updateSearchDistanceToDamagedProp"
                              action="{!updateSearchDistanceToDamagedProp}"
                              rerender="hotelSearchesPBS1"
                              oncomplete="stopProcessing();toggleDisabledFormElements()">
             <apex:param name="hotelSearchId" value="" />
             <apex:param name="hotelsearchDistance" value="" />
             
         </apex:actionFunction>
     
      <apex:pageBlockSection id="placementDocumentLinksPBS" columns="1" collapsible="false">
         <apex:facet name="header"><img src="/img/icon/documents16.png"/><font size="2"> Hotel Documents</font></apex:facet>
           <apex:panelGrid columns="7" border="0" width="100%"> 
           
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Adjuster_Housing_Agreement,ServiceRequest__c.Id)}')" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim  && Placement.Credit_Card_Type__c!='Check'}">Adjuster Housing Agreement</apex:outputLink>  

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Authorization_to_Omit,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Checked-In'}">Authorization to Omit</apex:outputLink>

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.PayNet_ID_Copy,ServiceRequest__c.Id)}')" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && Placement.Credit_Card_Type__c=='PayNet ID Copy' && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim}">PayNet ID Copy</apex:outputLink> 
          
            <apex:outputLink value="https://www.placetrakforce.com/ratecalendar/{!instanceName}/Documents/CCAuthForm.aspx?Id={!Placement.Id}&UserId={!$User.Id}&DisplayMode=1" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && Placement.Credit_Card_Type__c!='Direct Bill' && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim}">CRS CC Auth (Hotel)</apex:outputLink>

            <apex:outputLink value="https://www.placetrakforce.com/ratecalendar/{!instanceName}/Documents/CCAuthForm.aspx?Id={!Placement.Id}&UserId={!$User.Id}&noIATA=1&DisplayMode=1" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && Placement.Credit_Card_Type__c!='Direct Bill' && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim}">CRS CC Auth (Hotel - Non Commissionable)</apex:outputLink> 

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.CRS_CO_Folio_Request_Hotel,ServiceRequest__c.Id)}')" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim}">CRS CO/Folio Request (Hotel)</apex:outputLink>

            <apex:outputLink value="https://www.placetrakforce.com/ratecalendar/{!instanceName}/Documents/CCAuthForm.aspx?Id={!Placement.Id}&UserId={!$User.Id}&DisplayMode=1" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && Placement.Credit_Card_Type__c=='Direct Bill' && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim}">CRS Direct Bill Auth (Hotel)</apex:outputLink>  
         
            <apex:outputLink value="https://www.placetrakforce.com/ratecalendar/{!instanceName}/Documents/CCAuthForm.aspx?Id={!Placement.Id}&UserId={!$User.Id}&noIATA=1&DisplayMode=1" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && Placement.Credit_Card_Type__c=='Direct Bill' && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim}">CRS Direct Bill Auth (Hotel--Allstate)</apex:outputLink>

            <apex:outputLink value="https://www.placetrakforce.com/ratecalendar/{!instanceName}/Documents/hotelconfirmation.aspx?Id={!Placement.Id}&UserId={!$User.Id}&DisplayMode=1" rendered="{!Placement.Status__c == 'Checked-In'}">CRS Hotel Confirmation (Adjuster)</apex:outputLink> 
        
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Credit_Card_Authorization_Hotel,ServiceRequest__c.Id)}')" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim}">Credit Card Authorization</apex:outputLink>  
            
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Demand_Letter,ServiceRequest__c.Id)}')" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' &&  Placement.Status__c == 'Checked-Out'}">Demand Letter</apex:outputLink>  

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Liberty_Mutual_Cost_Benefit_Analysis,ServiceRequest__c.Id)}')" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim}">Liberty Mutual Cost Benefit Analysis</apex:outputLink>   
        
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.MasterCard_w_ID,ServiceRequest__c.Id)}')" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && Placement.Credit_Card_Type__c=='Mastercard' && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim}">Mastercard with ID</apex:outputLink>

            <apex:outputLink value="https://www.placetrakforce.com/ratecalendar/{!instanceName}/Documents/petboardingconfirmation.aspx?Id={!Placement.Id}&UserId={!$User.Id}&DisplayMode=1" rendered="{!Placement.Status__c == 'Checked-In'}">Pet Boarding Confirmation</apex:outputLink>
          
            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Salesforce_CRS_Ext_Auth_Hotel,ServiceRequest__c.Id)}')" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && (Placement.Credit_Card_Type__c=='Direct Bill' || Placement.Credit_Card_Type__c=='Check') && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim}">Salesforce - CRS Ext. Auth. (Hotel)</apex:outputLink>

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Temporary_Housing_Agreement_English,ServiceRequest__c.Id)}')" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim}">Temporary Housing Agreement English</apex:outputLink> 

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Temporary_Housing_Agreement_Spanish,ServiceRequest__c.Id)}')" rendered="{!Placement.Status__c == 'Pending Check-In' || Placement.Status__c == 'Checked-In' || Placement.Status__c == 'Checked-Out' }">Temporary Housing Agreement Spanish</apex:outputLink>   

            <apex:outputLink onclick="openConga('{!URLFOR($Action.Placement__c.Visa_Card_with_ID,ServiceRequest__c.Id)}')" rendered="{!ServiceRequest.Status__c!='Lost Opportunity' && Placement.Credit_Card_Type__c=='Visa' && !isBillingCompleted && !isPlacementCheckedOut && hasCompletedClaim}">Visa Card with ID</apex:outputLink>  
          
          </apex:panelGrid>
      </apex:pageBlockSection> 
      

      <apex:pageBlockSection id="placementLinksPBS" columns="1" collapsible="false">
          <apex:facet name="header"><img src="/img/icon/custom51_100/globe16.png"/><font size="2"> Links</font></apex:facet>
          <apex:panelGrid columns="5" border="0" width="100%" columnClasses="linksCols,linksCols,linksCols,linksCols,linkCols">
            <apex:outputLink target="_blank" value="http://www.maps.google.com/?q={!claim.Damaged_Property_Full_Address__c}">Google Map</apex:outputLink>
            <apex:outputlink target="_blank" value="https://www.placetrakforce.com/mulligan/{!instanceName}/placements/details/{!Placement.Id}">Documents 
            <apex:param name="OrgId" value="{!hash}"/>
            </apex:outputlink>
            <apex:outputlink />
            <apex:outputlink />
            <apex:outputlink />           
          </apex:panelGrid>
      </apex:pageBlockSection>  
           
      </apex:pageblock> 
      
      <apex:pageblock mode="edit">

          
      <apex:pageBlockSection id="placementPBS" title="Placement">
      <apex:facet name="header"><img src="/img/icon/custom51_100/keys16.png"/><font size="2"> Placement</font></apex:facet>
      </apex:pageBlockSection>
        <div id="hotel-placement-error" class="jqError">
               <ul id="hotel-placement-error-list"></ul>
       </div>
        <apex:pageblockSection id="placementPBS1" columns="2" > 
        <apex:outputPanel rendered="{!Placement.Id==null && ServiceRequest.Status__c!='Lost Opportunity'}">
            <apex:outputText >A placement will be created after a Hotel Option is selected.</apex:outputText>
        </apex:outputPanel>
            <apex:outputField value="{!Placement.Name}" id="placementName" rendered="{!Placement.Id!=null}" />
            <apex:outputField value="{!Placement.Status__c}" id="placementStatus" rendered="{!Placement.Id!=null}" />
            <apex:outputField value="{!Placement.Hotel_Account_Lookup__c}" id="placementHotelLookup" rendered="{!Placement.Id!=null}" />
            <apex:outputField value="{!Claim.Policy_Type__c}" rendered="{!Placement.Id!=null}" />
            <apex:inputField value="{!Placement.IATA_Number_Provided__c}" id="placementIATANumberProvided" rendered="{!Placement.Id!=null}" onchange="clientUpdatePlacement()"/>
            <apex:inputField value="{!Placement.IATA_Commission_Paid__c}" id="placementIATACommissionPaid" rendered="{!Placement.Id!=null}" onchange="clientUpdatePlacement()"/>
            <apex:inputField value="{!Placement.IATA_Closed__c}" id="placementIATAClosed" rendered="{!isManagerOrDirector && Placement.Id!=null}" onchange="clientUpdatePlacement()"/>
            <apex:outputField value="{!Placement.IATA_Closed__c}" rendered="{!!isManagerOrDirector && Placement.Id!=null}"/>
            <apex:inputTextArea value="{!Placement.IATA_Closed_Notes__c}" id="placementIATAClosedNotes" cols="60" rows="4" styleclass="countable2" rendered="{!isManagerOrDirector &&   Placement.Id!=null}" onchange="clientUpdatePlacement()"/>
            <apex:outputField value="{!Placement.IATA_Closed_Notes__c}" rendered="{!!isManagerOrDirector && Placement.Id!=null}"/>
          
            <apex:outputField value="{!Placement.Invoice_from_folio__c}" rendered="{!Placement.Id!=null}" />
            <apex:outputField value="{!Placement.Move_In_Docs_Missing__c}" id="placementMoveInDocsMissingRO" rendered="{!Placement.Id!=null && ServiceRequest.Status__c!='Lost Opportunity' && Placement.Status__c != 'Searching'}"/>
            <apex:inputField value="{!Placement.HSA_Signed__c}" id="placementHSASigned" rendered="{!Placement.Id!=null}" onchange="clientUpdatePlacement()"/>
            <apex:outputField value="{!Placement.Credit_Card_Type__c}" id="placementCreditCardType" rendered="{!Placement.Id!=null}"/>
            <apex:outputField value="{!Placement.serviceRequest__r.opportunity__r.ALE_Limit_Amount__c}" rendered="{!Placement.Id!=null}"/>
            <apex:outputField value="{!Placement.Credit_Card_Number__c}" rendered="{!Placement.Id!=null && Placement.Credit_Card_Type__c!='Direct Bill' && Placement.Credit_Card_Type__c!='Check'}"/>
            <apex:outputText rendered="{!Placement.Id!=null && (Placement.Credit_Card_Type__c=='Direct Bill' || Placement.Credit_Card_Type__c=='Check')}">&nbsp;</apex:outputText>
            <apex:outputText >&nbsp;</apex:outputText>

            <apex:outputField value="{!Placement.Credit_Card_Expiration__c}" rendered="{!Placement.Id!=null && Placement.Credit_Card_Type__c!='Direct Bill' && Placement.Credit_Card_Type__c!='Check'}" />
            
            <apex:outputText rendered="{!Placement.Id!=null && (Placement.Credit_Card_Type__c!='Direct Bill' && Placement.Credit_Card_Type__c!='Check')}">&nbsp;</apex:outputText>
            <apex:outputField value="{!Placement.Credit_Card_CID__c}" rendered="{!Placement.Id!=null && Placement.Credit_Card_Type__c!='Direct Bill' && Placement.Credit_Card_Type__c!='Check'}" /> 
            <apex:outputText rendered="{!Placement.Id!=null && (Placement.Credit_Card_Type__c=='Direct Bill' || Placement.Credit_Card_Type__c=='Check')}">&nbsp;</apex:outputText>
            <apex:outputText rendered="{!Placement.Id!=null && (Placement.Credit_Card_Type__c!='Direct Bill' && Placement.Credit_Card_Type__c!='Check')}">&nbsp;</apex:outputText>
            <apex:outputText rendered="{!Placement.Id!=null && (Placement.Credit_Card_Type__c!='Direct Bill' && Placement.Credit_Card_Type__c!='Check')}">&nbsp;</apex:outputText>
                      
            <apex:outputField value="{!Placement.Special_Instructions__c}" id="placementSpecialInstructionsRO" rendered="{!Placement.Id!=null && isBillingCompleted}"/>
            <apex:pageBlockSectionItem rendered="{!Placement.Id!=null && !isBillingCompleted}">
            <apex:outputText rendered="{!Placement.Id!=null && !isBillingCompleted}">Special Instructions</apex:outputText>
            <apex:inputTextArea value="{!Placement.Special_Instructions__c}" cols="60" rows="4" id="placementSpecialInstructions" styleclass="countable1" rendered="{!Placement.Id!=null && !isBillingCompleted}" onchange="clientUpdatePlacement()"/>
            </apex:pageBlockSectionItem>
            <apex:outputField value="{!Placement.Accounting_Instructions__c}" id="placementAccountingInstructionsRO" rendered="{!Placement.Id!=null && isBillingCompleted && isBillingSpecialist}"/>
            <apex:pageBlockSectionItem rendered="{!Placement.Id!=null && !isBillingCompleted && isBillingSpecialist}">
            <apex:outputText rendered="{!Placement.Id!=null && !isBillingCompleted && isBillingSpecialist}">Accounting Instructions</apex:outputText>
            <apex:inputTextArea value="{!Placement.Accounting_Instructions__c}" cols="60" rows="4" id="placementAccountingInstructions" styleclass="countable1" rendered="{!Placement.Id!=null && !isBillingCompleted && isBillingSpecialist}" onchange="clientUpdatePlacement()"/>
            </apex:pageBlockSectionItem>
            <apex:outputText rendered="{!!isBillingSpecialist}">&nbsp;</apex:outputText>
            <apex:outputField value="{!Placement.Check_In_Date__c}" rendered="{!Placement.Id!=null}" />
            <apex:outputField value="{!Placement.Check_Out_Date__c}" rendered="{!Placement.Id!=null}" />
            <apex:outputText rendered="{!Placement.Id!=null && Placement.Status__c=='Checked-Out'}">&nbsp;</apex:outputText>
            <apex:inputField value="{!Placement.Reason_For_Leaving__c}" id="placementReasonForLeaving" rendered="{!Placement.Id!=null && Placement.Status__c=='Checked-Out'}" onchange="clientUpdatePlacement()" styleClass="jqRequiredField"/>
         </apex:pageBlockSection>
            
        <apex:actionFunction name="updatePlacement"
                         action="{!updatePlacement}"
                         status="mainPageStatus"
                         rerender="hdnHasPlacement,hdnIsBillingCompleted,placementPBS1,placementHistoryPBS"
                         oncomplete="stopProcessing();if(j('[id$=hdnHasPlacement]').val() == 'false'){ids.pageRefreshPanel.dialog('open')}else{jqRequiredField();checkBillingCompleted();j('.countable1').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800});j('.countable2').jqEasyCounter({'maxChars': 255,'maxCharsWarning': 225})}">
                         <apex:param name="placementIATANumberProvided" value=""/>
                         <apex:param name="placementIATACommissionPaid" value=""/>
                         <apex:param name="placementIATAClosed" value=""/>
                         <apex:param name="placementIATAClosedNotes" value=""/>
                         <apex:param name="placementHSASigned" value=""/>
                         <apex:param name="placementSpecialInstructions" value=""/>
                         <apex:param name="placementAccountingInstructions" value=""/>
                         <apex:param name="placementReasonForLeaving" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="setBillingCompleted"
                         action="{!setBillingCompleted}"
                         status="mainPageStatus"
                         rerender="hdnIsBillingCompleted,hotelRoomPBS,placementPBS1,placementDocumentLinksPBS"
                         oncomplete="stopProcessing();toggleCommandButtons();checkBillingCompleted();jqRequiredField()"> 
        </apex:actionFunction>
        <apex:actionFunction name="undoBillingCompleted"
                         action="{!undoBillingCompleted}"
                         status="mainPageStatus"
                         rerender="hdnIsBillingCompleted,hotelRoomPBS,placementPBS1,placementDocumentLinksPBS"
                         oncomplete="stopProcessing();toggleCommandButtons();checkBillingCompleted();jqRequiredField()">
        </apex:actionFunction>
  
       </apex:pageBlock>
      
       <apex:pageBlock mode="maindetail">  
            
       <apex:pageBlockSection id="hotelRoomPBS" title="Hotel Rooms" columns="1" collapsible="false">
        <apex:facet name="header"><img src="/img/icon/building16.png"/><font size="2"> Hotel Rooms</font></apex:facet>
        <apex:outputText rendered="{!placement.Hotel_Rooms__r.size = 0 && ServiceRequest.Status__c!='Lost Opportunity'}">No Hotel Rooms have been created yet. After a Hotel Option has been selected click on the 'Add Hotel Room' button above to create some.</apex:outputText>
        <apex:pageBlockTable value="{!placement.Hotel_Rooms__r}" var="hotelRoom" id="hotelRoomsPBT" rendered="{!placement.Hotel_Rooms__r.size > 0}">
            <apex:column >
                  <apex:commandLink value="RC" rendered="{!hotelRoom.Cancellation_del__c == null || isBillingSpecialist}" onclick="processing();clientSetupRateCalendar('{!hotelRoom.Id}'); return false;" />
            </apex:column>
            <apex:column >
                <apex:commandLink value="Edit" rendered="{!hotelRoom.Cancellation_del__c == null && !isPlacementCheckedOut && !isBillingCompleted || isBillingSpecialist && !isBillingCompleted}" onclick="processing();clientClearHotelRoom();clientEditHotelRoom('{!hotelRoom.Id}');return false;"/>
            </apex:column>
            <apex:column headerValue="Hotel Room">
                <apex:outputText ><a href="{!urlfor($Action.Hotel_Room__c.View, hotelRoom.Id)}">{!hotelRoom.name}</a></apex:outputText> 
            </apex:column>
            <apex:column headerValue="Room #" value="{!hotelRoom.Room_Number__c}" />
            <apex:column headerValue="Send Text/Email" value="{!hotelRoom.Send_Text_Email_Notifications__c}" style="text-align:center"/>
            <apex:column headerValue="Check-In" value="{!hotelRoom.Check_In__c}" />
            <apex:column headerValue="Est. Check-Out" value="{!hotelRoom.Estimated_Check_Out_Date__c}"/>
            <apex:column headerValue="Check-Out" value="{!hotelRoom.CheckOut__c}" />
            <apex:column headerValue="BAR Rate" rendered="{!isManagerOrDirector}">
            <apex:inputField id="hotelBARRate" value="{!hotelRoom.BAR_Rate__c}" onchange="clientUpdateHotelRoomBARRate(this, '{!hotelRoom.Id}')" required="true" style="width:70px;text-align:right"/>
            </apex:column>
            <apex:column headerValue="BAR Rate" value="{!hotelRoom.BAR_Rate__c}" rendered="{!!isManagerOrDirector}" headerClass="clsRight" style="text-align:right"/>
            <apex:column value="{!hotelRoom.Kitchen_Features__c}"/>
            <apex:column value="{!hotelRoom.CRS_Room_Rate_Price__c}" headerClass="clsRight" style="text-align:right"/>
            <apex:column value="{!hotelRoom.Nights_In_Room__c}" headerClass="clsRight" style="text-align:right"/>
            <apex:column value="{!hotelRoom.Total_Unbilled__c}" headerClass="clsRight" style="text-align:right"/>  
            <apex:column headerValue="Type" value="{!hotelRoom.Pet_Fee_Type__c}"/>
            <apex:column headerValue="Pet Fee" value="{!hotelRoom.Pet_Fee_Amount__c}" headerClass="clsRight" style="text-align:right"/>
            <apex:column headerValue="Type" value="{!hotelRoom.Parking_Fee_Type__c}" />
            <apex:column headerValue="Parking Fee" value="{!hotelRoom.Parking_Fee_Amount__c}" headerClass="clsRight" style="text-align:right"/>
            <apex:column headerValue="Type" value="{!hotelRoom.Other_Fee_Type__c}" />
            <apex:column headerValue="Desc" value="{!hotelRoom.Other_Fee_Description__c}" />
            <apex:column headerValue="Other Fee" value="{!hotelRoom.Other_Fee_Amount__c}" headerClass="clsRight" style="text-align:right"/>
            <apex:column value="{!hotelRoom.Confirmation__c}" />
            <apex:column value="{!hotelRoom.Cancellation_del__c}" />
            <apex:column headerValue="Billed Through" value="{!hotelRoom.Billed_Through_Date__c}" />
        </apex:pageBlockTable>
        <apex:actionFunction name="updateHotelRoomBARRate"
                              action="{!updateHotelRoomBARRate}"
                              rerender="hotelRoomPBS"
                              oncomplete="stopProcessing();toggleDisabledFormElements()">
             <apex:param name="hotelRoomId" value="" />
             <apex:param name="hotelRoomBARRate" value="" />
             
         </apex:actionFunction>
      </apex:pageBlockSection>
      <br></br>
       <apex:pageBlock mode="maindetail" >      
       <apex:pageBlockSection id="placementHistoryPBS" title="Placement History" columns="1" collapsible="true">
            <apex:pageBlockTable value="{!History.events}" var="event">
                 <apex:column >
                    <apex:facet name="header">Timestamp</apex:facet>
                    <apex:outputText value="{!event.formatted}" />
                </apex:column> 
                <apex:column width="15%">
                    <apex:facet name="header">Action</apex:facet>
                    <apex:outputText value="{!event.eventType}" />
                </apex:column>
                <apex:column >
                    <apex:facet name="header">Description</apex:facet>
                    <apex:outputLink value="/{!event.detailID}" rendered="{!NOT(ISNULL(event.detailID))}" target="_blank">
                        <apex:outputText value="{!event.description}" />
                    </apex:outputLink>
                    <apex:outputText value="{!event.description}" rendered="{!ISNULL(event.detailID)}" />
                </apex:column>
                <apex:column >
                    <apex:facet name="header">Modified By</apex:facet>
                    <apex:outputText value="{!event.modifiedBy.name}" />
                </apex:column>
            </apex:pageBlockTable>
       </apex:pageBlockSection>
       </apex:pageBlock>
      
      <apex:outputPanel id="NewHotelSearchPanel" style="display:none;">
        <apex:actionRegion >
          <apex:pageBlock >
            <apex:pageBlockButtons location="top">
                <apex:actionStatus id="hotelAccountStatus" startText="Fetching Hotel Information..." >
                    <apex:facet name="stop">
                        <apex:outputPanel >          
                            <apex:commandButton value="Add Hotel Account" onclick="ids.newHotelAccountPanel.dialog('open');return false" />
                            <apex:commandButton value="Save Hotel Option" 
                                                    onclick="clientSaveNewHotelSearch();return false;"
                                                    style="display: none;"
                                                    id="newHotelSearchButton" />
                        </apex:outputPanel>            
                    </apex:facet>
                    <apex:facet name="start">
                        <apex:outputPanel >
                            <apex:image url="{!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')}"></apex:image>
                            <apex:outputText ><b>Processing...</b></apex:outputText>
                        </apex:outputPanel> 
                    </apex:facet>
                </apex:actionStatus>                               
            </apex:pageBlockButtons>
            
            <div id="hotel-search-errors" class="jqError">
               <ul id="hotel-search-error-list"></ul>
            </div>
            
            <apex:pageBlockSection title="New Hotel Search" columns="2" id="newHotelSearchPBS" collapsible="false">
                <apex:inputField value="{!newHotelSearch.Hotel__c}" id="selectedHotelId"/> 
                <apex:commandLink value="Update Search Fields" onclick="clientUpdateAccount();return false;" />
                <apex:outputField value="{!newHotelSearch.Hotel_Name__c}" id="selectedHotelNameRO" rendered="{!newHotelSearch.Hotel__c == null}"/>
                <apex:inputField value="{!newHotelSearch.Hotel_Name__c}" id="selectedHotelName" rendered="{!newHotelSearch.Hotel__c != null}"/>  
                <apex:outputText >&nbsp;</apex:outputText>
                <apex:outputField value="{!newHotelSearch.Distance_from_Damaged_Property__c}" id="selectedDistanceRO" rendered="{!newHotelSearch.Hotel__c == null}"/>
                <apex:inputField value="{!newHotelSearch.Distance_from_Damaged_Property__c}" id="selectedDistance" rendered="{!newHotelSearch.Hotel__c != null}" style="text-align:right" required="true"/> 
                <apex:outputText >&nbsp;</apex:outputText>
                <apex:outputField value="{!newHotelSearch.Street_Addr1__c}" id="selectedHotelAddrOne"/>
                <apex:outputField value="{!newHotelSearch.Phone__c}" id="selectedHotelPhone"/>
                <apex:outputField value="{!newHotelSearch.Street_Addr2__c}" id="selectedHotelAddrTwo" />
                <apex:outputField value="{!newHotelSearch.Fax__c}" id="selectedHotelFax" />
                <apex:outputField value="{!newHotelSearch.City__c}" id="selectedHotelCity"/>
                <apex:outputField value="{!newHotelSearch.State__c}" id="selectedHotelState"/>
                <apex:outputField value="{!newHotelSearch.Zip__c}" id="selectedHotelZip"/>
                <apex:outputField value="{!newHotelSearch.Email__c}" id="selectedHotelEmail"/>
            </apex:pageBlockSection>    
          </apex:pageBlock>
          
            <apex:actionFunction name="updateSelectedHotelInfo" 
                                                      rerender="newHotelSearchPBS"  
                                                      status="hotelAccountStatus"
                                                      action="{!updateSelectedHotelInfo}"
                                                      onComplete="toggleSaveHotelSearchButtonVisibility()" >   
                <apex:param name="accountId"  value="" />                                  
            </apex:actionFunction>      
                      
             <apex:actionFunction name="saveNewHotelSearch"
                                                     action="{!saveNewHotelSearch}"
                                                     status="hotelAccountStatus"
                                                     rerender="hasCompletedClaim,serviceRequestPBS1,hotelSearchesPBS1,mainPageButtons,mainMessages"
                                                     oncomplete="ids.newHotelSearchButton.hide();ids.newHotelSearchPanel.dialog('close'); j('.selectedHotel.disabled').attr('disabled', 'disabled')">
                 <apex:param name="selectedHotelName" value="" />  
                 <apex:param name="firstPropertyPresented" value="" />  
                 <apex:param name="selectedDistance" value="" />                                  
             </apex:actionFunction>
             
             <apex:actionFunction name="clearHotelSearch" 
                                  action="{!clearHotelSearch}" 
                                  rerender="newHotelSearchPBS,hdnHasPlacement"
                                  oncomplete="stopProcessing();j('#hotel-search-error-list').empty();if(j('[id$=hdnHasPlacement]').val() == 'true'){ids.pageRefreshPanel.dialog('open')}else{ids.newHotelSearchPanel.dialog('open')}">
             </apex:actionFunction>    
                                        
        </apex:actionRegion>
      </apex:outputPanel>
      
      <apex:outputPanel id="NewHotelAccountPanel" style="display:none">
        <apex:iframe id="newHotelAccountIFrame" scrolling="true" src="/001/e?retURL=%2F001%2Fo&RecordType=012700000001PZc&ent=Account&isdtp=mn"></apex:iframe>
      </apex:outputPanel>
      
      <apex:outputPanel id="RateCalendarPanel" style="display:none">
        <apex:outputText value="{!placement.Name}" style="font-weight:bold"/> 
       
        <apex:outputPanel id="RateCalendarOP">
           
            <apex:iframe id="RCIFrame" scrolling="true" width="795px" height="775px" src="{!rateCalendarURL}"></apex:iframe>
        </apex:outputPanel>
      </apex:outputPanel>
    
      <apex:outputPanel id="PaymentSelectionPanel" style="display:none"> 
        <apex:actionRegion >
          <apex:pageBlock >
            <apex:pageBlockButtons location="top">
                <apex:actionStatus id="paymentSelectionStatus">
                     <apex:facet name="stop">
                        <apex:outputPanel >          
                             <apex:commandButton value="Continue" 
                                    onclick="clientSetupPlacement(); return false;"
                                    id="btnPaymentSelectionComplete" />
                        </apex:outputPanel>            
                    </apex:facet>
                    <apex:facet name="start">
                        <apex:outputPanel >
                            <apex:image url="{!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')}"></apex:image>
                            <apex:outputText ><b>Processing...</b></apex:outputText>
                        </apex:outputPanel> 
                    </apex:facet>
                </apex:actionStatus> 
            </apex:pageBlockButtons>
            <div id="payment-selection-errors" class="jqError">
                <ul id="payment-selection-error-list"></ul>
            </div>
            <apex:pageBlockSection id="PaymentSelectionPBS" columns="2">
      
                <apex:outputLabel value="Payment Type" />
             
                <select id="placementPaymentType" name="placementPaymentType" size="1">
                    <option value="" selected="selected">--None--</option>
                    <option value="PayNet">PayNet</option>
                    <option value="PayNet ID Copy">PayNet ID Copy</option>
                    <option value="Check">Check</option>
                </select>
                <apex:inputHidden id="itemId"/>
            </apex:pageBlockSection> 
          </apex:pageBlock>
        </apex:actionRegion>
      </apex:outputPanel>
      
      
      <apex:outputPanel id="PageRefreshPanel" style="display:none"> 
        <apex:pageBlock >
            <apex:pageBlockButtons location="top">
                <apex:commandButton value="Refresh" 
                                    onclick="clientRefreshPage(); return false;"
                                    id="btnRefreshPage" />
            </apex:pageBlockButtons>
            <apex:outputText value="Updates have been made to this hotel placement outside of this page.<br/>This page needs to be refreshed." escape="false" />
        </apex:pageBlock>
      </apex:outputPanel>
            
      <apex:outputPanel id="NewHotelRoomPanel" style="display:none">
        <apex:pageBlock id="NewHotelRoomPanelPageBlock" title="" mode="edit">
            <apex:pageblockButtons location="top">
                <apex:actionStatus id="hotelRoomAccountStatus" startText="Fetching Hotel Information..." >
                    <apex:facet name="stop">
                        <apex:outputPanel >     
                            <apex:commandButton onclick="clientSaveHotelRoom(); return false;" 
                                                    value="Save Hotel Room" 
                                                    id="saveHotelRoomButton" />
                        </apex:outputPanel>
                    </apex:facet>
                    <apex:facet name="start">
                        <apex:outputPanel >
                            <apex:image url="{!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')}"></apex:image>
                            <apex:outputText ><b>Processing...</b></apex:outputText>
                        </apex:outputPanel> 
                    </apex:facet>
                </apex:actionStatus> 
           </apex:pageBlockButtons>

           <div id="new-hotel-room-notes" class="note" style="text-align:center;display:none">When extending a room please provide IATA information to the hotel and double check the Rate Calendar.</div>
            
           <div id="new-hotel-room-errors" class="jqError">
               <ul id="new-hotel-room-error-list"></ul>
           </div>

            
          <apex:pageBlockSection title="Add Hotel Room" columns="2" id="newHotelRoomPBS" collapsible="false">
                <apex:inputField value="{!newHotelRoom.Room_Type__c}" id="newHotelRoomType" styleClass="jqRequiredField"/>
                <apex:inputField value="{!newHotelRoom.Room_Number__c}" id="newHotelRoomRoomNumber"/>
                <apex:inputField value="{!newHotelRoom.Confirmation__c}" id="newHotelRoomConfirmation" styleClass="jqRequiredField"/>
                <apex:inputField value="{!newHotelRoom.Cancellation_del__c}" id="newHotelRoomCancellation" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:outputText rendered="{!newHotelRoom.Id==null}">&nbsp;</apex:outputText> 
                <apex:inputField value="{!newHotelRoom.Check_In__c}" id="newHotelRoomCheckIn" styleClass="jqRequiredField"  onclick="setZIndexForDatepicker(this);"/>
                <apex:inputField value="{!newHotelRoom.Estimated_Check_Out_Date__c}" id="newHotelRoomEstimatedCheckOut" styleClass="jqRequiredField" onclick="setZIndexForDatepicker(this);"/>
                <apex:inputField value="{!newHotelRoom.CheckOut__c}" id="newHotelRoomCheckOut" rendered="{!newHotelRoom.Id!=null}"/> 
                <apex:outputText rendered="{!newHotelRoom.Id==null && isBillingSpecialist}">&nbsp;</apex:outputText>
                <apex:inputField value="{!newHotelRoom.Billed_Through_Date__c}" id="newHotelRoomBilledThroughDate" rendered="{!newHotelRoom.Id!=null || isBillingSpecialist}"/> 
                <apex:inputField value="{!newHotelRoom.Hotel_Nightly_Rate__c}" id="newHotelRoomNightlyRate" rendered="{!newHotelRoom.Id==null}" styleClass="jqRequiredField" style="text-align:right"/>
                <apex:outputField value="{!newHotelRoom.Hotel_Nightly_Rate__c}" id="newHotelRoomNightlyRateRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:inputField value="{!newHotelRoom.Itemized_Tax__c}" id="newHotelRoomItemizedTax" rendered="{!newHotelRoom.Id==null}" styleClass="jqRequiredField" style="text-align:right"/>
                <apex:outputField value="{!newHotelRoom.Itemized_Tax__c}" id="newHotelRoomItemizedTaxRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:inputField value="{!newHotelRoom.BAR_Rate__c}" id="newHotelRoomBARRate" rendered="{!newHotelRoom.Id==null}" styleClass="jqRequiredField" style="text-align:right"/>
                <apex:outputField value="{!newHotelRoom.BAR_Rate__c}" id="newHotelRoomBARRateRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:inputField value="{!newHotelRoom.Hotel_Discount_Used__c}" id="newHotelRoomHotelDiscountUsed" styleClass="jqRequiredField"/>
                <apex:inputField value="{!newHotelRoom.Kitchen_Features__c}" id="newHotelRoomKitchenFeatures" styleClass="jqRequiredField"/>
                <apex:inputField value="{!newHotelRoom.Send_Text_Email_Notifications__c}" id="newHotelRoomSendTextEmailNotifications"/>
                <apex:inputField value="{!newHotelRoom.Pet_Fee_Type__c}" id="newHotelRoomPetFeeType" rendered="{!newHotelRoom.Id==null}" onchange="toggleRequiredIndicator(this, 'pet-fee');"/>
                <apex:outputField value="{!newHotelRoom.Pet_Fee_Type__c}" id="newHotelRoomPetFeeTypeRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:inputField value="{!newHotelRoom.One_Time_Pet_Fees_Taxable__c}" id="newHotelRoomOneTimePetFeesTaxable" rendered="{!newHotelRoom.Id==null}"/>
                <apex:outputField value="{!newHotelRoom.One_Time_Pet_Fees_Taxable__c}" id="newHotelRoomOneTimePetFeesTaxableRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:inputField value="{!newHotelRoom.Pet_Fee_Amount__c}" id="newHotelRoomPetFeeAmount" rendered="{!newHotelRoom.Id==null}" styleClass="pet-fee" style="text-align:right" onblur="toggleRequiredIndicator(this, 'pet-fee');"/>
                <apex:outputField value="{!newHotelRoom.Pet_Fee_Amount__c}" id="newHotelRoomPetFeeAmountRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:outputText >&nbsp;</apex:outputText> 
                <apex:inputField value="{!newHotelRoom.Parking_Fee_Type__c}" id="newHotelRoomParkingFeeType" rendered="{!newHotelRoom.Id==null}" styleClass="parking-fee" onchange="toggleRequiredIndicator(this, 'parking-fee');"/>
                <apex:outputField value="{!newHotelRoom.Parking_Fee_Type__c}" id="newHotelRoomParkingFeeTypeRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:inputField value="{!newHotelRoom.One_Time_Parking_Fees_Taxable__c}" id="newHotelRoomOneTimeParkingFeesTaxable" rendered="{!newHotelRoom.Id==null}"/>
                <apex:outputField value="{!newHotelRoom.One_Time_Parking_Fees_Taxable__c}" id="newHotelRoomOneTimeParkingFeesTaxableRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:inputField value="{!newHotelRoom.Parking_Fee_Amount__c}" id="newHotelRoomParkingFeeAmount" rendered="{!newHotelRoom.Id==null}" styleClass="parking-fee" style="text-align:right" onblur="toggleRequiredIndicator(this, 'parking-fee');"/>
                <apex:outputField value="{!newHotelRoom.Parking_Fee_Amount__c}" id="newHotelRoomParkingFeeAmountRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:outputText >&nbsp;</apex:outputText> 
                <apex:inputField value="{!newHotelRoom.Other_Fee_Type__c}" id="newHotelRoomOtherFeeType" rendered="{!newHotelRoom.Id==null}" styleClass="other-fee" onchange="toggleRequiredIndicator(this, 'other-fee');"/>
                <apex:outputField value="{!newHotelRoom.Other_Fee_Type__c}" id="newHotelRoomOtherFeeTypeRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:inputField value="{!newHotelRoom.One_Time_Other_Fees_Taxable__c}" id="newHotelRoomOneTimeOtherFeesTaxable" rendered="{!newHotelRoom.Id==null}"/>
                <apex:outputField value="{!newHotelRoom.One_Time_Other_Fees_Taxable__c}" id="newHotelRoomOneTimeOtherFeesTaxableRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:inputField value="{!newHotelRoom.Other_Fee_Amount__c}" id="newHotelRoomOtherFeeAmount" rendered="{!newHotelRoom.Id==null}" styleClass="other-fee" style="text-align:right" onblur="toggleRequiredIndicator(this, 'other-fee');"/>
                <apex:outputField value="{!newHotelRoom.Other_Fee_Amount__c}" id="newHotelRoomOtherFeeAmountRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:inputField value="{!newHotelRoom.Other_Fee_Description__c}" id="newHotelRoomOtherFeeDesc" rendered="{!newHotelRoom.Id==null}" styleClass="other-fee" onblur="toggleRequiredIndicator(this, 'other-fee');"/>
                <apex:outputField value="{!newHotelRoom.Other_Fee_Description__c}" id="newHotelRoomOtherFeeDescRO" rendered="{!newHotelRoom.Id!=null}"/>
                <apex:inputHidden value="{!newHotelRoom.Id}" id="newHotelRoomId"/>
            </apex:pageBlockSection>
            
            <apex:actionFunction name="saveNewHotelRoom" 
                                  action="{!saveHotelRoom}"
                                  status="hotelRoomAccountStatus"
                                  rerender="hotelRoomPBS,mainPageButtons,hdnHasHotelRooms,hdnHasPlacement,hdnHasUnbilledRooms,mainMessages,hotelSearchesPBS1,placementPBS1,placementHistoryPBS,placementDocumentLinksPBS,relatedid"
                                  oncomplete="if(j('[id$=hdnHasPlacement]').val() == 'false'){ids.pageRefreshPanel.dialog('open')}else{ids.newHotelRoomPanel.dialog('close');toggleCommandButtons();checkPlacementCheckedOut();j('.selectedHotel').attr('disabled', 'disabled');clientRefreshHotelRooms();jqRequiredField();j('#hotel-placement-error-list').empty();j('.countable1').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800})}">
                        <apex:param name="hotelRoomId" value="" />
                        <apex:param name="roomType" value="" />
                        <apex:param name="roomNumber" value="" />
                        <apex:param name="kitchenFeatures" value="" />
                        <apex:param name="confirmation" value="" />
                        <apex:param name="checkIn" value="" />
                        <apex:param name="estimatedCheckOut" value="" />
                        <apex:param name="checkOut" value="" />
                        <apex:param name="cancellation" value="" />
                        <apex:param name="nightlyRate" value="" />
                        <apex:param name="itemizedTax" value="" />
                        <apex:param name="barRate" value="" />
                        <apex:param name="hotelDiscountUsed" value="" />
                        <apex:param name="parkingFeeType" value="" />
                        <apex:param name="petFeeType" value="" />
                        <apex:param name="parkingFeeAmount" value="" />
                        <apex:param name="petFeeAmount" value="" />
                        <apex:param name="otherFeeType" value="" />
                        <apex:param name="otherFeeAmount" value="" />  
                        <apex:param name="otherFeeDesc" value="" />
                        <apex:param name="billedThroughDate" value="" />
                        <apex:param name="oneTimePetFeesTaxable" value="" />
                        <apex:param name="oneTimeParkingFeesTaxable" value="" />
                        <apex:param name="oneTimeOtherFeesTaxable" value="" />
                        <apex:param name="sendTextEmailNotifications" value="" />
            </apex:actionFunction>
                    
            <apex:actionFunction name="editRateCalendar" 
                                         action="{!editHotelRoom}"
                                         status="mainPageStatus"
                                         rerender="RateCalendarOP" 
                                         oncomplete="stopProcessing();ids.rateCalendarPanel.dialog('open')">
                        <apex:param name="hotelRoomId" value="" />
            </apex:actionFunction>
            
            <apex:actionFunction name="editHotelRoom" 
                                         action="{!editHotelRoom}" 
                                         rerender="newHotelRoomPBS"
                                         oncomplete="stopProcessing();jqRequiredField();resetStyling();ids.newHotelRoomPanel.dialog('open')">
                        <apex:param name="hotelRoomId" value="" />
            </apex:actionFunction>
                    
            <apex:actionFunction name="cloneHotelRoom" 
                                         action="{!cloneHotelRoom}" 
                                         rerender="hotelRoomPBS,placementHistoryPBS,placementPBS1">
                        <apex:param name="hotelRoomId" value="" />
            </apex:actionFunction>
                    
            <apex:actionFunction name="clearHotelRoom" 
                                         action="{!clearHotelRoom}" 
                                         rerender="newHotelRoomPBS,hdnHasPlacement"
                                         oncomplete="stopProcessing();if(j('[id$=hdnHasPlacement]').val() == 'false'){ids.pageRefreshPanel.dialog('open')}else{jqRequiredField();resetStyling();ids.newHotelRoomPanel.dialog('open')}">
            </apex:actionFunction>  

            <apex:actionFunction name="refreshHotelRooms" 
                                         action="{!refreshHotelRooms}" 
                                         status="mainPageStatus"
                                         rerender="hotelRoomPBS,placementPBS1,placementHistoryPBS,placementDocumentLinksPBS,openActivites"
                                         oncomplete="jqRequiredField();j('.countable1').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800})">
            </apex:actionFunction>  
 
            </apex:pageBlock>
      </apex:outputPanel> 
                 
      <apex:inputHidden value="{!hasSelectedHotelSearch}" id="hdnSelectedHotelSearch"/>
      <apex:inputHidden value="{!hasPlacement}" id="hdnHasPlacement"/>
      <apex:inputHidden value="{!hasHotelRooms}" id="hdnHasHotelRooms"/>
      <apex:inputHidden value="{!isBillingSpecialist}" id="hdnIsBillingSpecialist"/>
      <apex:inputHidden value="{!isAccountingManager}" id="hdnIsAccountingManager"/>
      <apex:inputHidden value="{!isBillingCompleted}" id="hdnIsBillingCompleted"/> 
      <apex:inputHidden value="{!hasUnbilledRooms}" id="hdnHasUnbilledRooms"/>
      <apex:inputHidden value="{!hasCompletedClaim}" id="hdnHasCompletedClaim"/>
      <apex:inputHidden value="{!isPlacementCheckedOut}" id="hdnIsPlacementCheckedOut"/>
      <apex:inputHidden value="{!isProductionOrg}" id="hdnIsProductionOrg"/>
      <apex:inputHidden value="{!instanceName}" id="hdnInstanceName"/>  
                 
            <script type="text/javascript"> 
                ids.waitDialog = j('#waitDialog');
            
                ids.newHotelSearchPanel = j(jq('{!$Component.NewHotelSearchPanel}'));
                ids.newHotelAccountPanel = j(jq('{!$Component.NewHotelAccountPanel}'));
                ids.paymentSelectionPanel = j(jq('{!$Component.PaymentSelectionPanel}'));  
                ids.rateCalendarPanel = j(jq('{!$Component.RateCalendarPanel}'));  
                ids.newHotelRoomPanel = j(jq('{!$Component.NewHotelRoomPanel}')); 
                ids.pageRefreshPanel = j(jq('{!$Component.PageRefreshPanel}'));  
                ids.placementHistoryPBS = j('[id$=placementHistoryPBS]');
                ids.placementDocumentLinksPBS = j('[id$=placementDocumentLinksPBS]');
                ids.newHotelAccountInput = j('[id$=selectedHotelId]');
                ids.serviceRequestStatus = j('[id$=serviceRequestStatus]');
                                
                if (j('[id$=firstPropertyPresentedRO]').text() != '')
                {
                    ids.firstPropertyPresented = j('[id$=firstPropertyPresentedRO]').text();
                }
                else
                {
                    ids.firstPropertyPresented = j('[id$=firstPropertyPresented]').val();
                }
                ids.serviceRequestDWOReasonCode = j('[id$=serviceRequestDWOReasonCode]');
                ids.serviceRequestCreditCardNumber = j('[id$=serviceRequestCreditCardNumber]');
              
                
                // newHotelRoom field id's   NewHotelRoomPanel.NewHotelRoomPanelPageBlock.newHotelRoomPBS
                ids.newhotelRoomPBS = j('[id$=newHotelRoomPBS]');
                ids.newHotelRoomId = j('[id$=newHotelRoomId]');
                ids.newHotelRoomType = j('[id$=newHotelRoomType]');
                ids.newHotelRoomRoomNumber = j('[id$=newHotelRoomRoomNumber]');
                ids.newHotelRoomSendTextEmailNotifications = j('[id$=newHotelRoomSendTextEmailNotifications]'); 
                ids.newHotelRoomKitchenFeatures = j('[id$=newHotelRoomKitchenFeatures]');
                ids.newHotelRoomConfirmation = j('[id$=newHotelRoomConfirmation]');
                ids.newHotelRoomCheckIn = j('[id$=newHotelRoomCheckIn]');  
                ids.newHotelRoomCancellation = j('[id$=newHotelRoomCancellation]');
                ids.newHotelRoomEstimatedCheckOut = j('[id$=newHotelRoomEstimatedCheckOut]');
                ids.newHotelRoomNightlyRate = j('[id$=newHotelRoomNightlyRate]');
                ids.newHotelRoomCheckOut = j('[id$=newHotelRoomCheckOut]');
                
                ids.newHotelRoomItemizedTax = j('[id$=newHotelRoomItemizedTax]');
                ids.newHotelRoomBARRate = j('[id$=newHotelRoomBARRate]');
                ids.newHotelRoomHotelDiscountUsed = j('[id$=newHotelRoomHotelDiscountUsed]');   
                
                ids.newHotelRoomParkingFeeType = j('[id$=newHotelRoomParkingFeeType]');
                ids.newHotelRoomPetFeeType = j('[id$=newHotelRoomPetFeeType]');
                ids.newHotelRoomParkingFeeAmount = j('[id$=newHotelRoomParkingFeeAmount]');
                ids.newHotelRoomPetFeeAmount = j('[id$=newHotelRoomPetFeeAmount]');
                ids.newHotelRoomOtherFeeType = j('[id$=newHotelRoomOtherFeeType]');
                ids.newHotelRoomOtherFeeAmount = j('[id$=newHotelRoomOtherFeeAmount]');
                ids.newHotelRoomOtherFeeDesc = j('[id$=newHotelRoomOtherFeeDesc]');
                ids.newHotelRoomBilledThroughDate = j('[id$=newHotelRoomBilledThroughDate]');
                ids.newHotelRoomOneTimePetFeesTaxable = j('[id$=newHotelRoomOneTimePetFeesTaxable]:checked'); 
                ids.newHotelRoomOneTimeParkingFeesTaxable = j('[id$=newHotelRoomOneTimeParkingFeesTaxable]:checked'); 
                ids.newHotelRoomOneTimeOtherFeesTaxable = j('[id$=newHotelRoomOneTimeOtherFeesTaxable]:checked'); 
                
                ids.btnDWOServiceRequest = j('[name$=btnDWOServiceRequest]');
                ids.btnAddHotelSearch = j('[name$=btnAddHotelSearch]');
                ids.btnAddHotelRoom = j('[name$=btnAddHotelRoom]');
                ids.btnBillingCompleted = j('[name$=btnBillingCompleted]');
                ids.btnUndoBillingCompleted = j('[name$=btnUndoBillingCompleted]');
                ids.hasSelectedHotelSearch = j('[id$=hdnSelectedHotelSearch]');
                ids.hasPlacement = j('[id$=hdnHasPlacement]');
                ids.hasHotelRooms = j('[id$=hdnHasHotelRooms]');
                ids.hasCompletedClaim = j('[id$=hdnHasCompletedClaim]');
                ids.isBillingSpecialist = j('[id$=hdnIsBillingSpecialist]');
                ids.isAccountingManager = j('[id$=hdnIsAccountingManager]');
                ids.hasUnbilledRooms = j('[id$=hdnHasUnbilledRooms]');
                ids.isBillingCompleted = j('[id$=hdnIsBillingCompleted]');
                ids.isServiceRequest = j('[id$=isServiceRequest]');
                ids.isPlacementCheckedOut = j('[id$=hdnIsPlacementCheckedOut]');
                                         
                ids.placementStatus = j('[id$=placementStatus]');
                ids.placementCreditCardType = j('[id$=placementCreditCardType]');
                ids.placementPaymentType = j('[id$=placementPaymentType]');
                ids.placementHSASigned = j('[id$=placementHSASigned]');
                                               
                ids.confirmationPanel = j('[id$=ConfirmationPanel]');
                ids.newHotelSearchButton = j('[id$=newHotelSearchButton]');
                ids.selectedHotelName = j('[id$=selectedHotelName]');
                ids.placementHR = j('[id$=placementHR]');
                ids.placementPaymentType = j('[id$=placementPaymentType]');
               
                ids.btnPaymentSelectionComplete = j('[name$=btnPaymentSelectionComplete]');
                ids.itemId = j('[id$=itemId]');
                
                function clientPCSaveServiceRequest()
                {
                        pcSaveServiceRequest();
                }
                                            
                function clientSaveServiceRequest()
                {
                   
                    
                        var isValid = true;
                        var errorList = j('#serviceRequest-error-list');
                        var hotelSearchField = j('[id$=hdnSelectedHotelSearch]');
                        var HoldFollowUp = j('[id$=serviceRequestHoldFollowupdate]').val();                                                             
                        var selectedUserId = j('[id$=InitialSRAssigned]');
                        var lockSelectedUserId = j('[id$=lockInitialSRAssigned]');              
                        var hiddenBooleanFlagId = j('[id$=hiddenBooleanFlag]');         
                        var initialCallDate = j('[id$=serviceRequestInitialCallDate]');         
                        var initialContactDate = j('[id$=serviceRequestInitialContactDate]');    
                                                
                        if (j('[id$=firstPropertyPresentedRO]').text() != '')
                        {
                            ids.firstPropertyPresented = j('[id$=firstPropertyPresentedRO]').text();
                        }
                        else
                        {
                            ids.firstPropertyPresented = j('[id$=firstPropertyPresented]').val();
                        }
                        var firstPropertyPresented = ids.firstPropertyPresented;
                        var serviceRequestDWOReasonCode = j(ids.serviceRequestDWOReasonCode.selector).val();
                        var serviceRequestStatus = j(ids.serviceRequestStatus.selector).text();
                                                            
                        errorList.empty();
                        
                        // begin validations
                        if(initialContactDate.val() != '' && initialCallDate.val() == '')       
                        {       
                            isValid = false;        
                            errorList.append('<li>Please select Initial Call Date</li>');       
                        }       
                                
                        if(j(hiddenBooleanFlagId).val() == 'true' && j(selectedUserId).val() == '' && j(lockSelectedUserId).val() != j(selectedUserId).val())
                        {
                            isValid = false;
                            errorList.append('<li>Please select Initial Call being worked by</li>'); 
                        }
                        else{
                            j('[id$=lockInitialSRAssigned]').val(j('[id$=InitialSRAssigned]').val());
                        }
                        
                        if (jQuery.trim(firstPropertyPresented) == '' && j(hotelSearchField).val() == 'true')
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a 1st Property Presented date</li>');
                        }
                        if (jQuery.trim(serviceRequestDWOReasonCode) == '' && serviceRequestStatus == 'Lost Opportunity' )
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a DWO Reason Code</li>');
                        }  
                        if(j('[id$=serviceRequestHold]').is(":checked"))                
                        {               
                            DisableOnHold();                
                        }                   
                        if(j('[id$=serviceRequestHold]').is(":checked") && HoldFollowUp == '')              
                        {               
                              isValid = false;              
                              errorList.append('<li>Please enter Hold Follow Up Date</li>');                        
                        } 
                        
                        if (isValid === true)
                        {
                            processing();
                            if (jQuery.trim(serviceRequestDWOReasonCode) != '')
                            {
                                j('.selectedHotel').attr('disabled', 'disabled');   
                            }
                            saveServiceRequest();
                        }
                        else
                        {
                            return false;
                        }
                    
                }
                
                function currentUserUpdateOnSRWorkedByFun()             
                {               
                                        
                        var isValid = true;             
                        var errorList = j('#serviceRequest-error-list');                
                        var hotelSearchField = j('[id$=hdnSelectedHotelSearch]');               
                        var HoldFollowUp = j('[id$=serviceRequestHoldFollowupdate]').val();             
                                        
                        if (j('[id$=firstPropertyPresentedRO]').text() != '')               
                        {               
                            ids.firstPropertyPresented = j('[id$=firstPropertyPresentedRO]').text();                
                        }               
                        else                
                        {               
                            ids.firstPropertyPresented = j('[id$=firstPropertyPresented]').val();               
                        }               
                        var firstPropertyPresented = ids.firstPropertyPresented;                
                        var serviceRequestDWOReasonCode = j(ids.serviceRequestDWOReasonCode.selector).val();                
                        var serviceRequestStatus = j(ids.serviceRequestStatus.selector).text();             
                                                                            
                        errorList.empty();              
                        // begin validations                
                        if (jQuery.trim(firstPropertyPresented) == '' && j(hotelSearchField).val() == 'true')               
                        {               
                            isValid = false;                
                            errorList.append('<li>Please enter a 1st Property Presented date</li>');                
                        }               
                                    
                        if (jQuery.trim(serviceRequestDWOReasonCode) == '' && serviceRequestStatus == 'Lost Opportunity' )              
                        {               
                            isValid = false;                
                            errorList.append('<li>Please enter a DWO Reason Code</li>');                
                        }               
                        if(j('[id$=serviceRequestHold]').is(":checked"))                
                        {               
                            DisableOnHold();                
                        }                   
                        if(j('[id$=serviceRequestHold]').is(":checked") && HoldFollowUp == '')              
                        {               
                              isValid = false;              
                              errorList.append('<li>Please enter Hold Follow Up Date</li>');                        
                        }               
                                        
                        if (isValid === true)               
                        {               
                            processing();               
                            if (jQuery.trim(serviceRequestDWOReasonCode) != '')             
                            {               
                                j('.selectedHotel').attr('disabled', 'disabled');                   
                            }               
                            currentUserUpdateOnSRWorkedBy();        
                        }       
                        else{       
                            return false;       
                        }       
                }
                
                function clientUpdatePlacement()
                {
                    var isValid = true;
                    var errorList = j('#hotel-placement-error-list');
                    var dateTimePattern = /^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$/;
                
                    var placementIATANumberProvided = j('[id$=placementIATANumberProvided]:checked').val();
                    var placementIATACommissionPaid = j('[id$=placementIATACommissionPaid]:checked').val();
                    var placementIATAClosed = j('[id$=placementIATAClosed]:checked').val();
                    var placementIATAClosedNotes = j('[id$=placementIATAClosedNotes]').val();
                     

                    var placementHSASigned = j(ids.placementHSASigned.selector).val();
                    if (j('[id$=placementSpecialInstructionsRO]').text() != '')
                    {
                    var placementSpecialInstructions = j('[id$=placementSpecialInstructionsRO]').text();
                    }
                    else
                    {
                    var placementSpecialInstructions = j('[id$=placementSpecialInstructions]').val();
                    }
                    if (j('[id$=placementAccountingInstructionsRO]').text() != '')
                    {
                    var placementAccountingInstructions = j('[id$=placementAccountingInstructionsRO]').text();
                    }
                    else
                    {
                    var placementAccountingInstructions = j('[id$=placementAccountingInstructions]').val();
                    }
                    var placementReasonForLeaving = j('[id$=placementReasonForLeaving]').val();
                    var placementStatus = j('[id$=placementStatus]').text();
                    
                    errorList.empty();
                    if (jQuery.trim(placementHSASigned) != '')
                    {
                        if (placementHSASigned.match(dateTimePattern) == null)
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a valid HSA Signed Date</li>');
                        }
                        else
                        {
                            var date = new Date();           
                            var currentDateString = (date.getMonth()+1) + "/" + date.getDate() + "/" + date.getFullYear();
                            var currentDate = new Date(currentDateString);
                            var placementHSASignedDate = new Date(placementHSASigned.substring(0,placementHSASigned.indexOf(" ")));
                            if (placementHSASignedDate > currentDate)
                            {
                                isValid = false;
                                errorList.append('<li>HSA Signed Date cannot be a future date.</li>');
                            }
                        }
                    }

                    if (placementReasonForLeaving == '' && placementStatus == 'Checked-Out')
                    {
                         isValid = false;
                         errorList.append('<li>Please enter a Reason for Leaving.</li>');
                    }  
                    
                    if (isValid === true)
                    {
                        processing();
                        updatePlacement(placementIATANumberProvided,placementIATACommissionPaid,placementIATAClosed,placementIATAClosedNotes,placementHSASigned,placementSpecialInstructions,placementAccountingInstructions,placementReasonForLeaving);
                    }
                    else
                    {
                        jqRequiredField();
                        return false;
                    }
                }                
                    
                    
                function clientSaveHotelRoom()
                {
                    var isValid = true;
                    var errorList = j('#new-hotel-room-error-list');
                    var roomId = j(ids.newHotelRoomId.selector).val();
                    var roomType = j(ids.newHotelRoomType.selector).val();
                    var roomNumber = j(ids.newHotelRoomRoomNumber.selector).val();
                    var kitchenFeatures = j(ids.newHotelRoomKitchenFeatures.selector).val();
                    var sendTextEmailNotifications = j('[id$=newHotelRoomSendTextEmailNotifications]').attr('checked');
                    var confirmation = j(ids.newHotelRoomConfirmation.selector).val();
                    var checkIn = j(ids.newHotelRoomCheckIn.selector).val();
                    var estimatedCheckOut = j(ids.newHotelRoomEstimatedCheckOut.selector).val();
                    var checkOut = j(ids.newHotelRoomCheckOut.selector).val();
                    var cancellation = j(ids.newHotelRoomCancellation.selector).val();
                    var hotelDiscountUsed = j(ids.newHotelRoomHotelDiscountUsed.selector).val();
                    
                  
                    if (roomId == '')
                    {
                        // Only need to setup these values if it is a new room
                        var parkingFeeType = j(ids.newHotelRoomParkingFeeType.selector).val();
                        var parkingFeeAmount = j(ids.newHotelRoomParkingFeeAmount.selector).val();
                        var petFeeType = j(ids.newHotelRoomPetFeeType.selector).val();
                        var petFeeAmount = j(ids.newHotelRoomPetFeeAmount.selector).val();
                        var otherFeeType = j(ids.newHotelRoomOtherFeeType.selector).val();
                        var otherFeeAmount = j(ids.newHotelRoomOtherFeeAmount.selector).val();
                        var otherFeeDesc = j(ids.newHotelRoomOtherFeeDesc.selector).val();
                        var oneTimePetFeesTaxable = j('[id$=newHotelRoomOneTimePetFeesTaxable]:checked').val();
                        var oneTimeParkingFeesTaxable = j('[id$=newHotelRoomOneTimeParkingFeesTaxable]:checked').val();
                        var oneTimeOtherFeesTaxable = j('[id$=newHotelRoomOneTimeOtherFeesTaxable]:checked').val();
                        var nightlyRate = j(ids.newHotelRoomNightlyRate.selector).val();
                        var itemizedTax = j(ids.newHotelRoomItemizedTax.selector).val();
                        var barRate = j(ids.newHotelRoomBARRate.selector).val();
                    }
                   
                    var billedThroughDate = j(ids.newHotelRoomBilledThroughDate.selector).val();
                  
                    var isBillingSpecialist = j('[id$=hdnIsBillingSpecialist]').val();
                    var datePattern = /^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{2}|\d{4})$/;
                    var percentagePattern = /^(100(?:\.0{1,2})?|0*?\.\d{1,2}|\d{1,2}(?:\.\d{1,2})?)$/;
                    var ratePattern = /^(\d{1,3}(\,\d{3})*|(\d+))(\.\d{2})?$/;

                    errorList.empty();
                                      
                    // begin validations
                    if (jQuery.trim(roomType) == '')
                    {
                        isValid = false;
                        errorList.append('<li>Please enter a Room Type</li>');
                    } 
                    
                    if (jQuery.trim(confirmation) == '')
                    {
                        isValid = false;
                        errorList.append('<li>Please enter a Confirmation #</li>');
                    } 
                                                         
                    if (jQuery.trim(checkIn) != '' && checkIn.match(datePattern) == null)
                    {
                        isValid = false;
                        errorList.append('<li>Please enter a valid Check-In Date</li>');
                    }
                    
                    if (jQuery.trim(checkIn) == '')
                    {
                        isValid = false;
                        errorList.append('<li>Please enter a Check-In Date</li>');
                    } 
                    
                    if (jQuery.trim(cancellation) != '' && jQuery.trim(checkOut) == '')
                    {
                        isValid = false;
                        errorList.append('<li>Please enter a Check-Out Date</li>');
                    } 
                    
                    if (jQuery.trim(estimatedCheckOut) != '' && estimatedCheckOut.match(datePattern) == null)
                    {
                        isValid = false;
                        errorList.append('<li>Please enter a valid Estimated Check-Out Date</li>');
                    }
                                        
                    if (jQuery.trim(estimatedCheckOut) == '')
                    {
                        isValid = false;
                        errorList.append('<li>Please enter a Estimated Check-Out Date</li>');
                    }
                    
                    if (jQuery.trim(estimatedCheckOut) != '' && jQuery.trim(estimatedCheckOut).length >= 8 && 
                        jQuery.trim(checkIn) != '' && jQuery.trim(checkIn).length >= 8 && jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(estimatedCheckOut)) < jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(checkIn)))
                    {
                        isValid = false;
                        errorList.append('<li>Estimated Check-Out Date cannot be before Check-In Date</li>');
                    }
                    
                    if (jQuery.trim(checkOut) != '' && checkOut.match(datePattern) == null)
                    {
                        isValid = false;
                        errorList.append('<li>Please enter a valid Check-Out Date</li>');
                    } 
                    
                    if (jQuery.trim(checkOut) != '' && jQuery.trim(checkOut).length >= 8 && jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(checkOut)) < jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(checkIn)))
                    {
                        isValid = false;
                        errorList.append('<li>Check-Out Date cannot be before Check-In Date</li>');
                    }
                    
                    if (jQuery.trim(checkOut) != '' && jQuery.trim(checkOut).length >= 8 && jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(checkOut)) > new Date())
                    {
                        isValid = false;
                        errorList.append('<li>Check-Out Date cannot be a future date</li>');
                    }
                    
                    if (jQuery.trim(billedThroughDate) != '' && billedThroughDate.match(datePattern) == null)
                    {
                        isValid = false;
                        errorList.append('<li>Please enter a valid Billed Through Date</li>');
                    } 
                    
                    if (jQuery.trim(billedThroughDate) != '' && jQuery.trim(billedThroughDate).length >= 8 && 
                        jQuery.trim(checkIn) != '' && jQuery.trim(checkIn).length >= 8 && jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(checkIn)) > jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(billedThroughDate)))
                    {
                        isValid = false;
                        errorList.append('<li>Billed Through Date cannot be before Check-In Date</li>');
                    }
                    
                    if (jQuery.trim(billedThroughDate) != '' && jQuery.trim(billedThroughDate).length >= 8 && 
                        jQuery.trim(estimatedCheckOut) != '' && jQuery.trim(estimatedCheckOut).length >= 8 && jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(estimatedCheckOut)) < jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(billedThroughDate)))
                    {
                        isValid = false;
                        errorList.append('<li>Estimated Check-Out Date cannot be before Billed Through Date</li>');
                    }
                    
                    if (jQuery.trim(billedThroughDate) != '' && jQuery.trim(billedThroughDate).length >= 8 && 
                        jQuery.trim(checkOut) != '' && jQuery.trim(checkOut).length >= 8 && jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(checkOut)) < jQuery.datepicker.parseDate('mm/dd/yy', jQuery.trim(billedThroughDate)))
                    {
                        isValid = false;
                        errorList.append('<li>Check-Out Date cannot be before Billed Through Date</li>');
                    }

                    if (roomId == '')
                    {
                        // Only need to validate these values if it is a new room
                        if (jQuery.trim(nightlyRate).length > 6)                
                        {               
                            isValid = false;                
                            errorList.append('<li>Please enter a valid Nightly Rate</li>');             
                        }
                        if (jQuery.trim(nightlyRate) != '' && nightlyRate.match(ratePattern) == null)
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a valid Nightly Rate</li>');
                        } 
                                       
                        if (jQuery.trim(nightlyRate) == '')
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a Nightly Rate</li>');
                        }
                    
                        if (jQuery.trim(itemizedTax) != '' && itemizedTax.match(percentagePattern) == null)
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a valid Tax Rate</li>');
                        } 
                    
                        if (jQuery.trim(itemizedTax) == '')
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a Tax Rate</li>');
                        }

                        if (jQuery.trim(barRate) == '')
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a BAR Rate</li>');
                        }
                        
                        if (jQuery.trim(barRate) != '' && barRate.match(ratePattern) == null)
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a valid BAR Rate</li>');
                        }

                        if (jQuery.trim(petFeeAmount) != '')
                        {
                            if (petFeeAmount.match(ratePattern) == null)
                            {
                                isValid = false;
                                errorList.append('<li>Please enter a valid Pet Fee Amount</li>');
                            }
                            else
                            {
                                if (jQuery.trim(petFeeType) == '')
                                { 
                                    isValid = false;
                                    errorList.append('<li>Please select a Pet Fee Type</li>');
                                }
                            }
                        }
                        
                        // pet fee amount validation rule
                        if (jQuery.trim(petFeeAmount) == '' && jQuery.trim(petFeeType) != '')
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a Pet Fee Amount</li>');
                        }
                        
                        if (jQuery.trim(parkingFeeAmount) != '')
                        {
                            if (parkingFeeAmount.match(ratePattern) == null)
                            {
                                isValid = false;
                                errorList.append('<li>Please enter a valid Parking Fee Amount</li>');
                            }
                            else
                            {
                                if (jQuery.trim(parkingFeeType) == '')
                                { 
                                    isValid = false;
                                    errorList.append('<li>Please select a Parking Fee Type</li>');
                                }
                            }
                        }
                        
                        if (jQuery.trim(parkingFeeAmount) == '' && jQuery.trim(parkingFeeType) != '')
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a Parking Fee Amount</li>');
                        }
                        
                        if (jQuery.trim(otherFeeAmount) != '')
                        {
                            if (otherFeeAmount.match(ratePattern) == null)
                            {
                                isValid = false;
                                errorList.append('<li>Please enter a valid Other Fee Amount</li>');
                            }
                            else
                            {
                                if (jQuery.trim(otherFeeType) == '')
                                { 
                                    isValid = false;
                                    errorList.append('<li>Please select a Other Fee Type</li>');
                                }
                                if (jQuery.trim(otherFeeType) != '' && jQuery.trim(otherFeeDesc) == '')
                                {
                                    isValid = false;
                                    errorList.append('<li>Please enter a Other Fee Description</li>');
                                }
                            }
                        }
                                  
                        if ((jQuery.trim(otherFeeDesc) != '' || jQuery.trim(otherFeeType) != '' ) && jQuery.trim(otherFeeAmount) == '')
                        {
                            isValid = false;
                            errorList.append('<li>Please enter a Other Fee Amount</li>');
                        }
                        
                        if (otherFeeDesc.length > 255)
                        {
                            isValid = false;
                            errorList.append('<li>You have exceeded the 255 character limit on the Other Fee Description field</li>');
                        }
                    }

                    if (hotelDiscountUsed == '')
                    {
                      isValid = false;
                      errorList.append('<li>Please select a Hotel Discount Used</li>');
                    }  

                    if (kitchenFeatures == '')
                    {
                        isValid = false;
                        errorList.append('<li>Please select a Kitchen Feature</li>');
                    }   

                    if (isValid === true)
                    {
                        saveNewHotelRoom(roomId,roomType,roomNumber,kitchenFeatures,confirmation,checkIn,estimatedCheckOut,checkOut,cancellation,nightlyRate,
                                         itemizedTax,barRate,hotelDiscountUsed,parkingFeeType,petFeeType,parkingFeeAmount,petFeeAmount,otherFeeType,otherFeeAmount,otherFeeDesc,
                                         billedThroughDate,oneTimePetFeesTaxable,oneTimeParkingFeesTaxable,oneTimeOtherFeesTaxable,sendTextEmailNotifications);
                    }
                    else 
                    {
                        return false;
                    }
                }
                
                function sleep (ms, args, obj)  
                {
                    var caller = sleep.caller;
                    if (caller.sleepTimer) { 
                      /* if invoked from timeout function, delete timer and return false */
                      delete caller.sleepTimer;
                      return true;
                    }
                
                    /* Create timer and re-call caller at expiry */
                    caller.sleepTimer = window.setTimeout (function () {
                      caller.apply (obj || null, args || []);
                    },ms);
                
                    return false;
                }
              
                function clientRefreshHotelRooms()
                {
                   if (!sleep (10000)) return;  
                   refreshHotelRooms();
                }
                
                function clientSetupRateCalendar(hotelRoomId)
                {
                   editRateCalendar(hotelRoomId);
                }
                
                function clientEditHotelRoom(hotelRoomId)
                {
                    j('[id$=new-hotel-room-notes]').show();
                    editHotelRoom(hotelRoomId);
                }
                
                function clientCloneHotelRoom(hotelRoomId)
                {
                    cloneHotelRoom(hotelRoomId);
                }
                
                function clientClearHotelRoom()
                {
                    j('#new-hotel-room-error-list').text("");
                    jqUndoRequiredFieldBySelector('pet-fee');
                    jqUndoRequiredFieldBySelector('parking-fee');
                    jqUndoRequiredFieldBySelector('other-fee');
                    clearDescendantFormElements(ids.newhotelRoomPBS);
                }
                
                function clientSetupPlacement()
                {
                    var isValid = true;
                    var errorList = j('#payment-selection-error-list');
                    errorList.empty();
                    var placementPaymentType = j('[id$=placementPaymentType]').val();
                    var selected_id = j(ids.itemId).val();
                    
                    if (placementPaymentType == '--None--')
                    {
                        isValid = false;
                        errorList.append('<li>Please select a payment type</li>');
                        return false;
                    }
                    
                    j('.selectedHotel').attr('disabled', 'disabled')        
                    updateSelectedHotelSearch(selected_id,placementPaymentType);      
                }
                
                function clientGetNewCreditCard()
                {
                        var hotelSearchField = j('[id$=hdnSelectedHotelSearch]').val();
                        if (hotelSearchField == 'true')
                        {
                            getNewCreditCard();
                        }
                        else
                        {
                            toggleCommandButtons();
                            togglePageBlockSections()
                        }
                }
                
                function toggleSaveHotelSearchButtonVisibility()
                {
                    var newHotelAccountInput = j(ids.newHotelAccountInput.selector).val();
                    
                    if (newHotelAccountInput != '')
                    {
                        ids.newHotelSearchButton.show();
                    }
                    else
                    {
                        ids.newHotelSearchButton.hide();
                    }  
                }
                                         
                function toggleAddHotelRoomButtonVisibility(hotelSearchField, isBillingCompleted, isPlacementCheckedOut, button)
                {
                    if (hotelSearchField == 'true' && isBillingCompleted == 'false' && isPlacementCheckedOut == 'false')
                    {
                        button.show();
                    }
                    else
                    {
                        button.hide();
                    }
                }
                
                function toggleHotelSearchButtonVisibility(hotelSearchField, isBillingCompleted, serviceRequestDWOReasonCode, serviceRequestStatus, isPlacementCheckedOut, button)
                {
                    if (hotelSearchField == 'false' && (serviceRequestDWOReasonCode == '' || serviceRequestDWOReasonCode == null) && serviceRequestStatus != 'Lost Opportunity' && isBillingCompleted == 'false' && isPlacementCheckedOut == 'false')
                    {
                        button.show();
                    }
                    else
                    {
                        button.hide();
                        if (serviceRequestStatus == 'Lost Opportunity')
                        {
                            j('.selectedHotel').attr('disabled','disabled') 
                        }
                        else
                        {
                            if (hotelSearchField == 'true')
                            {
                                j('.selectedHotel').not(':checked').attr('disabled', 'disabled')
                            }
                        }
                    }
                }
                
                function toggleBillingCompletedButtonVisibility(isBillingSpecialist,isBillingCompleted,hasUnbilledRooms,button)
                {
                    if (isBillingSpecialist == 'true' && hasUnbilledRooms == 'false' && isBillingCompleted == 'false')
                    {
                        button.show();
                    }
                    else
                    {
                        button.hide();
                    }
                }
                
                function toggleSaveServiceRequestVisibility(serviceRequestStatus, button)
                {
                    if (serviceRequestStatus != 'Checked-In/Closed')
                    {
                        button.show();
                    }
                    else
                    {
                        button.hide();
                    }
                }
                
                function toggleCommandButtons()
                {
                    var hotelSearchField = j('[id$=hdnSelectedHotelSearch]').val();
                    var serviceRequestStatus = j(ids.serviceRequestStatus.selector).text();
                    var serviceRequestDWOReasonCode = j(ids.serviceRequestDWOReasonCode.selector).val();
                    var isBillingSpecialist = j('[id$=hdnIsBillingSpecialist]').val();
                    var isBillingCompleted = j('[id$=hdnIsBillingCompleted]').val();
                    var hasUnbilledRooms = j('[id$=hdnHasUnbilledRooms]').val();
                    var isPlacementCheckedOut = j('[id$=hdnIsPlacementCheckedOut]').val();
                    var serviceRequestCreditCardNumber = j('[id$=serviceRequestCreditCardNumber]').text(); 
                   
                    toggleHotelSearchButtonVisibility(hotelSearchField, isBillingCompleted, serviceRequestDWOReasonCode, serviceRequestStatus, isPlacementCheckedOut, ids.btnAddHotelSearch);
                    toggleAddHotelRoomButtonVisibility(hotelSearchField, isBillingCompleted, isPlacementCheckedOut, ids.btnAddHotelRoom);
                    toggleBillingCompletedButtonVisibility(isBillingSpecialist,isBillingCompleted,hasUnbilledRooms,ids.btnBillingCompleted);
                    
                }
                
                function togglePageBlockSections()
                {
                  var hasPlacement = j('[id$=hdnHasPlacement]').val();
                  var hasCompletedClaim = j('[id$=hdnHasCompletedClaim]').val();
                  var isBillingCompleted = j('[id$=hdnIsBillingCompleted]').val();
                  var serviceRequestStatus = j(ids.serviceRequestStatus.selector).text();
                  var placementHistoryPBS = j('[id$=placementHistoryPBS]');
                  var placementDocumentLinksPBS = j('[id$=placementDocumentLinksPBS]');
                  var placementLinksPBS = j('[id$=placementLinksPBS]');
                  var placementNotesAndAttachments = j('[id$=placementNotesAndAttachments]');
                  var serviceRequestActivityHistories = j('[id$=serviceRequestActivityHistories]');
                  var isPlacementCheckedOut = j('[id$=hdnIsPlacementCheckedOut]').val();
                  var placementHR = j('[id$=placementHR]');
                  var isHighPriority = j('[id$=serviceRequestHighPriority]:checked').val();
                    var serviceRequestPBS2 =  j('[id$=serviceRequestPBS2]'); 
                    
                  if (hasPlacement == 'true')
                  {
                      placementHistoryPBS.show();
                      placementDocumentLinksPBS.show();
                      placementLinksPBS.show();
                      placementNotesAndAttachments.show(); 
                      serviceRequestActivityHistories.show();
                      if (serviceRequestStatus != "DWO" && hasCompletedClaim=="true")
                      {
                          placementHR.show();
                      }
                      else
                      {
                          placementHR.hide();
                      }       
                  }
                  else
                  {
                      placementHistoryPBS.hide();
                      placementDocumentLinksPBS.hide();
                      placementLinksPBS.hide();
                      placementNotesAndAttachments.hide(); 
                      //serviceRequestActivityHistories.hide();
                      placementHR.hide();  
                  }
                    
                    if (isHighPriority == '1')
                    {
                        serviceRequestPBS2.show();
                    }
                    else
                    {
                        serviceRequestPBS2.hide();
                    }
                }                   
                
                function clientSaveNewHotelSearch()
                {
                    var selectedHotelName = j('[id$=selectedHotelName]').val();
                    if (j('[id$=firstPropertyPresentedRO]').text() != '')
                    {
                        ids.firstPropertyPresented = j('[id$=firstPropertyPresentedRO]').text();
                    }
                    else
                    {
                        ids.firstPropertyPresented = j('[id$=firstPropertyPresented]').val();
                    }
                    var firstPropertyPresented = ids.firstPropertyPresented;
                    var selectedDistance = j('[id$=selectedDistance]').val();
                    
                    var isValid = true;
                    var errorList = j('#hotel-search-error-list');
                    var dfdpPattern = /^(\d{1}(\,\d{3})*|(\d+))(\.\d{0,2})?$/;
                    
                    noCommasdfdp = selectedDistance.replace(/,/g, '');
                    if (noCommasdfdp.indexOf('.') == -1)
                    {
                        maxLength = 4
                    }
                    else
                    {
                        maxLength = 7
                    }
                            
                    errorList.empty();
                  // begin validations
                  if (jQuery.trim(selectedDistance) == '')
                  {
                    isValid = false;
                    errorList.append('<li>Please enter a Distance from Damaged Property</li>');
                  }
                  else
                  {  
                    if (jQuery.trim(selectedDistance) != '' && selectedDistance.match(dfdpPattern) == null || jQuery.trim(noCommasdfdp).length > maxLength)
                        {
                            isValid = false;
                        errorList.append('<li>Please enter a valid Distance from Damaged Property</li>');
                        }
                  }
                                
                    if (isValid === true)
                    {
                        
                        saveNewHotelSearch(selectedHotelName, firstPropertyPresented, selectedDistance);   
                    }
                      else
                    {
                        return false;
                    }   
                }
                
                function clientUpdateSearchDistanceToDamagedProp(el,hotelSearchId)
                {
                    var errorList = j('#hotelSearches-error-list');
                  errorList.empty();
                  var distanceToDamagedProperty = j(el).val();
                    processing();
                    updateSearchDistanceToDamagedProp(hotelSearchId,distanceToDamagedProperty);    
                
                }
                
                function clientUpdateHotelRoomBARRate(el,hotelRoomId)
                {
                    processing();
                    var barRate = j(el).val();
                    updateHotelRoomBARRate(hotelRoomId,barRate);    
              
                }
        
        </script> 
          
    </apex:pageBlock>
    
    
    <script type="text/javascript">
        
      function clientUpdateAccount()
      {
        var hiddenAccountId = j('[id$=selectedHotelId_lkid]');
        updateSelectedHotelInfo(hiddenAccountId.val());
      }
      
      function clientValidateSelectedHotelSearch(distanceFromDamagedProperty)
      {
        var selected_id = j('.selectedHotel:checked').prev().val();
        var isValid = true;

        if(j('.selectedHotel:checked').val() == '1')
        {
          
          var errorList = j('#hotelSearches-error-list');
           errorList.empty();
          
          if (j('[id$=firstPropertyPresentedRO]').text() != '')
          {
              ids.firstPropertyPresented = j('[id$=firstPropertyPresentedRO]').text();
          }
          else
          {
              ids.firstPropertyPresented = j('[id$=firstPropertyPresented]').val();
          }
          var firstPropertyPresented = ids.firstPropertyPresented;
                                                                    
         
       // begin validations
          if (jQuery.trim(firstPropertyPresented) == '' && j('.selectedHotel:checked').val() == '1')
          {
              isValid = false;
              errorList.append('<li>You must enter a 1st Property Presented date before a search can be selected</li>');
              j('.selectedHotel:checked').removeAttr('checked');
              return false;
          }
          if (jQuery.trim(distanceFromDamagedProperty) == '')
          {
             isValid = false;
             errorList.append('<li>You must enter a Distance from Damaged Property before this search can be selected</li>');
             j('.selectedHotel:checked').removeAttr('checked');
             return false;
          }
        }

        if (isValid == true)
        {
          pcSelectedHotelSearch();
        }  
      }
     
     function clientUpdateSelectedHotelSearch()
      {
       
        var selected_id = j('.selectedHotel:checked').prev().val();
        var hasPlacement = j('[id$=hdnHasPlacement]').val();
        if(j('.selectedHotel:checked').val() == '1')
        {
            
            j(ids.itemId).val(selected_id);
            j(ids.placementPaymentType.selector).val('');
            if (hasPlacement == 'false')
            {
                ids.paymentSelectionPanel.dialog('open')
                j('body').css('overflow','hidden');
            }
            else
            {
                    stopProcessing();
                    ids.pageRefreshPanel.dialog('open');
            }   
        }
        else
        {
            if (hasPlacement == 'false')
            {
                    stopProcessing();
                    ids.pageRefreshPanel.dialog('open');
            }
            else
            {
                processing();
                j('.selectedHotel').attr('disabled', 'disabled')
                var placementPaymentType = j('[id$=placementCreditCardType]').text();
                updateUnSelectedHotelSearch(selected_id,placementPaymentType); 
          
            }         
         }
      }
      
      function clientRefreshPage()
      {
         window.top.location='/{!ServiceRequest__c.id}';
      }
      
      function clearDescendantFormElements(elementId)
      {
        // note: can have :hidden selector also. (input:hidden)?
        // var p = j(ids.newhotelRoomPBS.selector + ' :input');
        var x = j(ids.newhotelRoomPBS.selector + ' :input').not(':submit, :reset, :button');
        x.val('').removeAttr('checked').removeAttr('selected');
      }

      function radioButtonCheckBox(element, className)
      {
        var checkboxes = j('.' + className);
                        
        checkboxes.each
        ( 
            j.proxy( function( i, checkbox ) {
                    if (this.id != checkbox.id && j(checkbox).is(':checked') == true )
            {
              j(checkbox).removeAttr('checked');
            }
            }
            , element )
        );       
      }

      function toggleDisabledFormElements() 
      {
        j('.disabled').attr('disabled', true); 
      }
      
      function toggleWarningMessages(adjuster,contact) 
      {
        var adjusterMessage = j('[id$=adjusterMessage]');
        var contactMessage = j('[id$=contactMessage]');
               
        if (adjuster == "")
        {       
            adjusterMessage.show();
        }
        else
        {
            adjusterMessage.hide();
        }
        if (contact == "")
        {       
            contactMessage.show();
        }
        else
        {
            contactMessage.hide();
        }
      }
      
      function jqRequiredField()
      {  
        j('.jqRequiredField').wrap('<div class="requiredInput" />').before('<div class="requiredBlock"></div>');
      }
          
      function jqRequiredFieldBySelector(className)
      {
        if ( j('.' + className).parents('div.requiredInput').length == 0 )
        {
            j('.' + className).wrap('<div class="requiredInput" />').before('<div class="requiredBlock"></div>');
        }
      }
          
      function jqUndoRequiredFieldBySelector(className)
      {
        if ( j('.' + className).parents('div.requiredInput').length > 0 )
        {
            j('.' + className).parents('div.requiredInput').children('div.requiredBlock').remove();
            j('.' + className).unwrap('div.requiredInput');
        }
      }  
          
     function toggleRequiredIndicator(el,className)
     {
        hasContent = false;
        elements = j(el);  
        elements.each(function(index){ var t = j(el); if (j.trim(t.val()).length > 0) { hasContent = true; }});
        
        if (hasContent == true)
        {
            jqRequiredFieldBySelector(className);
        }
        else
        {
           jqUndoRequiredFieldBySelector(className);
           j('.' + className).val('');
        }
      }
      
      function resetStyling()
      { 
        // Have to add the style class to these elements because they loose them when the panel gets rerendered 
        j('[id$=newHotelRoomPetFeeType]').addClass('pet-fee'); 
        j('[id$=newHotelRoomParkingFeeType]').addClass('parking-fee');
        j('[id$=newHotelRoomOtherFeeType]').addClass('other-fee');
      
        // Turn on or off required indicators  
        toggleRequiredIndicator(j('[id$=newHotelRoomPetFeeType]'), 'pet-fee')
        toggleRequiredIndicator(j('[id$=newHotelRoomParkingFeeType]'), 'parking-fee')
        toggleRequiredIndicator(j('[id$=newHotelRoomOtherFeeType]'), 'other-fee')
        
        var roomId = j(ids.newHotelRoomId.selector).val();
        var billedThroughDate = j(ids.newHotelRoomBilledThroughDate.selector).val();
        var isBillingSpecialist = j('[id$=hdnIsBillingSpecialist]').val();
                
        if (isBillingSpecialist == 'false' && roomId != null)
        {
            j('[id$=newHotelRoomBilledThroughDate]').parent('.dateInput').children('.dateFormat').hide();
            j('[id$=newHotelRoomBilledThroughDate]').attr("disabled","disabled");
            j('[id$=newHotelRoomBilledThroughDate]').css({backgroundColor:'transparent',borderStyle:'none',color:'black',fontSize:'inherit'});
            
            if (billedThroughDate != null && billedThroughDate != '')
            {
                j('[id$=newHotelRoomCheckIn]').parent('.requiredInput').parent('.dateInput').children('.dateFormat').hide();
                j('[id$=newHotelRoomCheckIn]').attr("disabled","disabled");
                j('[id$=newHotelRoomCheckIn]').unwrap('div.requiredInput');
                j('[id$=newHotelRoomCheckIn]').css({backgroundColor:'transparent',borderStyle:'none',color:'black',fontSize:'inherit'});
                
                j('[id$=newHotelRoomCancellation]').hide();
            }
        }
        
      }
      
      function clientMakeReadOnly()
      { 
        j('[id$=placementHSASigned]').parent('.dateInput').children('.dateFormat').hide();
        j('[id$=placementHSASigned]').attr("disabled","disabled");
        j('[id$=placementHSASigned]').css({backgroundColor:'transparent',borderStyle:'none',color:'black',fontSize:'inherit'});
        j('[id$=placementHR]').hide();
      }
      
      function checkBillingCompleted()
      { 
        var isBillingCompleted = j('[id$=hdnIsBillingCompleted]').val();
        var isAccountingManager = j('[id$=hdnIsAccountingManager]').val();
        var isBillingSpecialist = j('[id$=hdnIsBillingSpecialist]').val();
        
        if(isBillingCompleted == 'true')
        {
            clientMakeReadOnly();
            if (isAccountingManager == 'true' || isBillingSpecialist == 'true')
            {
                ids.btnUndoBillingCompleted.show();
            }
        }
        else
        {
            ids.btnUndoBillingCompleted.hide();
        }
       
      }
      
      function checkPlacementCheckedOut()
      { 
        var isPlacementCheckedOut = j('[id$=hdnIsPlacementCheckedOut]').val();
        if(isPlacementCheckedOut == 'true')
        {
            clientMakeReadOnly(); 
        }
      }
      
      function setZIndexForDatepicker(el)
      {
        var e = j(el);
        var zindex = e.css('z-index');
        j('#datePicker').css('z-index', 500000);
      }
      
      function processing()
      {
        j.blockUI({ message: '<h1><img src={!URLFOR($Resource.ajaxPics, 'smallSpinner.gif')} /> Processing...</h1>' }); 
      }
      
      function stopProcessing()
      {
        j.unblockUI(); 
      }
      
      function lookupPick(a, b, c, d, e, f, g, j) 
      {
        b = {
        parentIdElement: getElementsByNameCS(b)[0],parentEditElement: getElementsByNameCS(c)[0],
        parentEditOldValueElement: getElementsByNameCS(c + "_lkold")[0],
        relatedFieldElement: getElementsByNameCS(d)[0],
        extraNameElement: getElementsByNameCS(j)[0],
        modElement: getElementsByNameCS(c + "_mod")[0]};
        return doLookupPick(a, b, e, f, false, true, g)
      }
    
      function lookupPick2(a, b, c, d, e, f, g, j, l, h) 
      {
        b = {
        parentIdElement: getElementsByNameCS(b)[0],
        parentEditElement: getElementsByNameCS(c)[0],
        parentEditOldValueElement: getElementsByNameCS(c + "_lkold")[0],
        extraNameElement: getElementsByNameCS(f)[0],
        extraIdElement: getElementsByNameCS(j)[0],
        extraEditOldValueElement: getElementsByNameCS(f + "_lkold")[0],
        modElement: getElementsByNameCS(c + "_mod")[0]};
        return doLookupPick(a, b, d, e, h, false, null, g, l)
      } 
      
      function openConga(URL) 
      { 
        window.open(URL, '','scrollbars=yes,menubar=no,height=600,width=800,resizable=yes, toolbar=no,location=no,status=yes'); 
      }          
               
      j(document).ready(function() 
      {
          ids.newHotelRoomPanel.dialog({autoOpen: false, title: "Hotel Room", resizable: false, closeOnEscape: true, modal: true, height: 740, width: 700});
          ids.newHotelSearchPanel.dialog({autoOpen: false,title: "Hotel Search", resizable: false, closeOnEscape: true, modal: true, height: 400, width: 600});
          ids.paymentSelectionPanel.dialog({autoOpen: false,title: "Hotel Payment Selection", resizable: false, closeOnEscape: true, modal: true, height: 300, width: 300});
          ids.newHotelAccountPanel.dialog({autoOpen: false,title: "Hotel Account", closeOnEscape: true, modal: true, height: 750, width: 600});
          ids.rateCalendarPanel.dialog({autoOpen: false, close: function(){clientRefreshHotelRooms()},title: "Rate Calendar",resizable: false, closeOnEscape: true, modal: true, height: 790, width: 790});
          ids.pageRefreshPanel.dialog({autoOpen: false,title: "Page Error", resizable: false, closeOnEscape: false, modal: true, height: 300, width: 500});
          j(ids.pageRefreshPanel).dialog("widget").find(".ui-dialog-titlebar-close").hide();    
                  
          toggleCommandButtons();
          togglePageBlockSections();
          toggleDisabledFormElements();
          jqRequiredField();
          checkBillingCompleted();
          checkPlacementCheckedOut();
          j('.countable1').jqEasyCounter({'maxChars': 32000,'maxCharsWarning': 31800});
          j('.countable2').jqEasyCounter({'maxChars': 255,'maxCharsWarning': 225});
      });
        
    </script>
    <script>                                
        function DisableOnHold()                
        {               
           if(j('[id$=serviceRequestHold]').is(":checked"))             
           {                
            j('[id$=serviceRequestHoldFollowupdate]').attr('disabled',false);               
            $('[id$=serviceRequestPBS1] :input').each(function()                
              {             
                  if($(this).attr('id') != j('[id$=serviceRequestHold]').attr('id') && $(this).attr('id') != j('[id$=serviceRequestHoldFollowupdate]').attr('id'))              
                  {             
                      $(this).attr('disabled',true);                
                  }             
                                
              });               
           }                
           else             
           {                
               j('[id$=serviceRequestHoldFollowupdate]').attr('disabled',true);                 
           }                
        }               
        DisableOnHold();                
                        
        function addHotelOption(){              
            if(j('[id$=serviceRequestHold]').is(":checked") == false)               
            {               
                processing();               
                clearHotelSearch();             
            }               
            else{               
                alert('Service Request on Hold');               
            }               
        }               
        function addHotelRoom(){                
            if(j('[id$=serviceRequestHold]').is(":checked") == false)               
            {               
                j('[id$=new-hotel-room-notes]').hide();
                processing();               
                clientClearHotelRoom();             
                clearHotelRoom();               
            }               
            else{               
                alert('Service Request on Hold');               
            }               
        }               
        function billingCompletedFunc(){                
            if(j('[id$=serviceRequestHold]').is(":checked") == false)               
            {               
                processing();               
                setBillingCompleted();              
            }               
            else{               
                alert('Service Request on Hold');               
            }               
        }               
        function undoBillingCompletedFunc(){                
            if(j('[id$=serviceRequestHold]').is(":checked") == false)               
            {               
                processing();               
                undoBillingCompleted();             
            }               
            else{               
                alert('Service Request on Hold');               
            }               
        }               
    </script>    
   </apex:form>
   <apex:outputPanel id="relatedid"> 
        <apex:relatedList subject="{!Placement}" list="NotesAndAttachments" id="placementNotesAndAttachments"/>
        <apex:relatedList subject="{!ServiceRequest}" list="OpenActivities" id="openActivites"/>
        <apex:relatedList subject="{!ServiceRequest}" list="ActivityHistories" id="serviceRequestActivityHistories"/>
   </apex:outputPanel>      
</apex:page>